<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YINUXY | 理想的生活就是生活的理想</title>
  
  <subtitle>Welcome to YinuxY&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.yinuxy.com/"/>
  <updated>2020-02-14T04:02:13.816Z</updated>
  <id>https://blog.yinuxy.com/</id>
  
  <author>
    <name>YinuxY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maven学习心得（情人节快乐！）</title>
    <link href="https://blog.yinuxy.com/2020/02/14/Study/Maven_learndiary001/"/>
    <id>https://blog.yinuxy.com/2020/02/14/Study/Maven_learndiary001/</id>
    <published>2020-02-14T11:43:16.000Z</published>
    <updated>2020-02-14T04:02:13.816Z</updated>
    
    <content type="html"><![CDATA[<blockquote><center><font size="5" color="#1BC3FB" face="楷体">Maven学习心得（祝天下码农终成眷属！）</font></center></blockquote><a id="more"></a><h1 id="Maven介绍及环境搭建"><a href="#Maven介绍及环境搭建" class="headerlink" title="Maven介绍及环境搭建"></a>Maven介绍及环境搭建</h1><h2 id="Maven是什么"><a href="#Maven是什么" class="headerlink" title="Maven是什么"></a>Maven是什么</h2><ol><li>Maven是基于项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件。</li><li>Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。</li><li>Maven这个单词来自于意第绪语（犹太语），意为知识的积累，最初在Jakata Turbine项目中用来简化构建过程。当时有一些项目（有各自Ant build文件），仅有细微的差别，而JAR文件都由CVS来维护。于是希望有一种标准化的方式构建项目，一个清晰的方式定义项目的组成，一个容易的方式发布项目的信息，以及一种简单的方式在多个项目中共享JARs。</li></ol><h2 id="Maven环境搭建"><a href="#Maven环境搭建" class="headerlink" title="Maven环境搭建"></a>Maven环境搭建</h2><p>参考<a href="https://blog.csdn.net/qq_28289405/article/details/88305269" target="_blank" rel="noopener">maven 安装以及环境变量配置</a></p><h1 id="Maven案例创建"><a href="#Maven案例创建" class="headerlink" title="Maven案例创建"></a>Maven案例创建</h1><h2 id="Maven目录结构"><a href="#Maven目录结构" class="headerlink" title="Maven目录结构"></a>Maven目录结构</h2><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Learndiary/Maven001/output_1.png" alt></p><ol><li>首先创建文件夹命名为<code>src</code></li><li>在<code>src</code>目录下分别创建子目录<code>main</code>和<code>test</code></li><li>在<code>main</code>和<code>test</code>目录下各创建一个子目录<code>java</code></li></ol><h2 id="创建HelloMaven"><a href="#创建HelloMaven" class="headerlink" title="创建HelloMaven"></a>创建HelloMaven</h2><ol><li><p>在<code>main</code>目录的<code>java</code>目录下创建如下目录并创建<code>HellowWorld.java</code>Java类文件<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Learndiary/Maven001/output_2.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld &#123;</span><br><span class="line">    public String sayHello()&#123;</span><br><span class="line">        return &quot;Hello World!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>test</code>目录的<code>java</code>目录下创建如下目录并创建<code>testHello.java</code>Java类文件<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Learndiary/Maven001/output_3.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import org.junit.*;</span><br><span class="line">import org.junit.Assert.*;</span><br><span class="line">public class HellOWorldTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void testHello() &#123;</span><br><span class="line">        Assert.assertEquals(&quot;Hello World!&quot;,new HelloWorld().sayHello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>src</code>根目录下创建<code>pom.xml</code>编写代码如下：<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Learndiary/Maven001/output_4.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </span><br><span class="line">    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;!-- 模型版本。maven2.0必须是这样写，现在是maven2唯一支持的版本 --&gt;  </span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.winner.trade，maven会将该项目打成的jar包放本地路径：/com/winner/trade --&gt;  </span><br><span class="line">    &lt;groupId&gt;com.study&lt;/groupId&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;!-- 本项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;  </span><br><span class="line">    &lt;artifactId&gt;study-model&lt;/artifactId&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;!-- 本项目目前所处的版本号 --&gt;  </span><br><span class="line">    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;!-- 打包的机制，如pom,jar, maven-plugin, ejb, war, ear, rar, par，默认为jar --&gt;  </span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;  </span><br><span class="line"></span><br><span class="line">    &lt;!-- 定义本项目的依赖关系 --&gt;  </span><br><span class="line">    &lt;dependencies&gt;  </span><br><span class="line">  </span><br><span class="line">        &lt;!-- 每个dependency都对应这一个jar包 --&gt;  </span><br><span class="line">        &lt;dependency&gt;  </span><br><span class="line">            &lt;!--一般情况下，maven是通过groupId、artifactId、version这三个元素值（俗称坐标）来检索该构件， 然后引入你的工程。如果别人想引用你现在开发的这个项目（前提是已开发完毕并发布到了远程仓库），--&gt;   </span><br><span class="line">            &lt;!--就需要在他的pom文件中新建一个dependency节点，将本项目的groupId、artifactId、version写入， maven就会把你上传的jar包下载到他的本地 --&gt;  </span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;  </span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;  </span><br><span class="line">            &lt;version&gt;4.10&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;  </span><br><span class="line">    &lt;/dependencies&gt;  </span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li><li><p>打开命令提示行，进入到HelloWorld项目的根目录中输入<code>mvn compile</code>回车运行对该项目进行编译（如果是第一次运行Maven会在运行之前下载很多第三方的插件和Maven所依赖的jar）.<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Learndiary/Maven001/output_5.png" alt><br>出现<code>BUILD SUCCESS</code>即表示项目运行成功~<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Learndiary/Maven001/output_6.png" alt></p></li><li><p>运行测试例，输入<code>mvn test</code>:<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Learndiary/Maven001/output_7.png" alt><br>测试例成功运行，并且无任何报错~</p></li><li><p>接下来看一下项目的根目录下会有哪些变化：<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Learndiary/Maven001/output_8.png" alt><br>它默认生成了一个<code>target</code>文件夹，打开它，在<code>classes</code>目录下存放着生成的字节码文件;<code>surefire-reports</code>下存放着生成的测试报告；<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Learndiary/Maven001/output_9.png" alt></p></li><li><p>下面再去命令行键入<code>mvn package</code>：<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Learndiary/Maven001/output_10.png" alt><br>完美运行！<br>可以看到在<code>target</code>目录下生成了一个<code>study-model-1.0.0-SNAPSHOT.jar</code>的jar包<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Learndiary/Maven001/output_11.png" alt></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font size=&quot;5&quot; color=&quot;#1BC3FB&quot; face=&quot;楷体&quot;&gt;Maven学习心得（祝天下码农终成眷属！）&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.yinuxy.com/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="https://blog.yinuxy.com/2020/02/13/Study/Docker_learndiary001/"/>
    <id>https://blog.yinuxy.com/2020/02/13/Study/Docker_learndiary001/</id>
    <published>2020-02-13T11:43:16.000Z</published>
    <updated>2020-02-13T12:27:30.362Z</updated>
    
    <content type="html"><![CDATA[<blockquote><center><font size="5" color="#1BC3FB" face="楷体">Docker常用命令</font></center></blockquote><a id="more"></a><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><ol><li><p>查看Docker 版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure></li><li><p>查看Docker 系统信息，包括镜像和容器数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></li><li><p>查看Docker 常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --help</span><br></pre></td></tr></table></figure></li></ol><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><ol><li>列出镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images [OPTIONS]</span><br></pre></td></tr></table></figure></li></ol><p>参数说明： </p><div style="text-align:center">  <table border="1" cellpadding="3" cellspacing="0" style="width: 60%;margin:auto">    <tr>        <th>REPOSITORY</th>        <th>表示镜像的仓库源</th>    </tr>    <tr>        <td>TAG</td>        <td>镜像的标签</td>    </tr>    <tr>        <td>IMAGE ID</td>        <td>镜像ID</td>    </tr>    <tr>        <td>SIZE</td>        <td>镜像大小</td>    </tr>  </table></div><p>[OPTIONS]说明：</p><div style="text-align:center">  <table border="1" cellpadding="3" cellspacing="0" style="width: 60%;margin:auto">    <tr>        <th>-a</th>        <th>列出本地所有的镜像（含中间映像层）</th>    </tr>    <tr>        <td>-q</td>        <td>只显示镜像ID</td>    </tr>    <tr>        <td>--digests</td>        <td>显示镜像的摘要信息</td>    </tr>    <tr>        <td>--no-trunc</td>        <td>显示完整的镜像信息</td>    </tr>  </table></div><ol start="2"><li>查询镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search [OPTION] imagename</span><br></pre></td></tr></table></figure></li></ol><p>[OPTION]说明：</p><div style="text-align:center">  <table border="1" cellpadding="3" cellspacing="0" style="width: 60%;margin:auto">    <tr>        <th>  --no-trunc </th>        <th>        显示完整的镜像描述       </th>    </tr>    <tr>        <td>      -s     </td>        <td>   列出收藏数不少于指定数的镜像  </td>    </tr>    <tr>        <td> --automated </td>        <td> 只列出automated bulid类型的镜像 </td>    </tr>  </table></div>  <ol start="3"><li>下载镜像</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker  pull imagename [:TAG]</span><br></pre></td></tr></table></figure><ol start="4"><li>删除镜像</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi imageID</span><br></pre></td></tr></table></figure><p>删除单个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f imageID</span><br></pre></td></tr></table></figure><p>删除多个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f imagename1:TAG1 imagename2:TAG2</span><br></pre></td></tr></table></figure><p>删除全部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f$(docker images -qa)</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p>有镜像才能创建容器！</p><ol><li>新建并启动容器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTION] IMAGE [COMMAND] ARG...</span><br></pre></td></tr></table></figure></li></ol><p>[OPTION]说明：</p><div style="text-align:center">  <table border="1" cellpadding="3" cellspacing="0" style="width: 80%;margin:auto">    <tr>        <th> --name="" </th>        <th>              为容器制定一个新名称              </th>    </tr>    <tr>        <td>     -d    </td>        <td>  后台运行容器，并返回容器ID，即启动守护式容器  </td>    </tr>    <tr>        <td>     -i    </td>        <td>      以交互模式运行容器，通常与-t同时使用      </td>    </tr>    <tr>        <td>     -t    </td>        <td> 为容器重新分配一个伪输入终端。通常与-i同时使用 </td>    </tr>    <tr>        <td>     -P    </td>        <td>                  随机端口映射                  </td>    </tr>    <tr>        <td>     -p    </td>        <td>                  指定端口映射                  </td>    </tr>  </table></div> <blockquote><p>-p有以下四种格式：<br>ip:hostPort:containerPort<br>ip::containerPort<br>hostPort:containerPort<br>containerPort</p></blockquote><ol start="2"><li>列出当前正在运行的容器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps [OPTION]</span><br></pre></td></tr></table></figure></li></ol><p>[OPTION]说明：</p><div style="text-align:center">  <table border="1" cellpadding="3" cellspacing="0" style="width: 60%;margin:auto">    <tr>        <th>-a</th>        <th>列出当前正在运行的容器+历史上运行过的</th>    </tr>    <tr>        <td>-l</td>        <td>显示最近创建的容器</td>    </tr>    <tr>        <td>-n</td>        <td>显示n个最近创建的容器</td>    </tr>    <tr>        <td>-q</td>        <td>静默模式，只显示容器编号</td>    </tr>    <tr>        <td>--no-trunc</td>        <td>不截断退出</td>    </tr>  </table></div><ol start="3"><li><p>退出容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit             #容器停止退出</span><br><span class="line">Ctrl+P+Q         #容器不停止退出</span><br></pre></td></tr></table></figure></li><li><p>启动容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start continerID/continerName</span><br></pre></td></tr></table></figure></li><li><p>重启容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart continerID/continerName</span><br></pre></td></tr></table></figure></li><li><p>停止容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop continerID/continerName</span><br></pre></td></tr></table></figure></li><li><p>强制停止容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill continerID/continerName</span><br></pre></td></tr></table></figure></li><li><p>删除已停止的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm continerID</span><br><span class="line">docker rm -f$(docker ps -a -q)               #一次性删除多个容器</span><br><span class="line">docker ps -a -q | xargs docker rm            #一次性删除多个容器</span><br></pre></td></tr></table></figure></li></ol><h2 id="容器命令-重要"><a href="#容器命令-重要" class="headerlink" title="容器命令-重要"></a>容器命令-重要</h2><ol><li>启动守护式容器：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d containerName</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>使用镜像<code>centos:latsext</code>以后台模式启动一个容器<code>docker run -d centos</code><br>问题：使用<code>docker ps -a</code>进行查看，<font color="blue" face="黑体">会发现容器已经退出</font><br>很重要的说明一点：<font color="red" face="黑体">Docker容器后台运行，就必须有一个前台进程</font><br>容器运行的命令如果不是那些<font color="red" face="黑体">一直挂起的命令</font>（比如运行top、tail），就会自动退出<br>这个是Docker的机制问题，比如说以你的web容器，我们以nginx为例，正常情况下，我们配置启动服务只需启动相应的service即可。例如<code>service nginx start</code>，但是这样做，nginx为后台进程模式运行，就导致docker前台没有运行的应用，这样的容器后台启动后，会立即自杀以为他觉得她没事可做了。<br>所以，最佳的解决方案是：将你要运行的程序以前台进程的形式运行。</p></blockquote><ol start="2"><li><p>查看容器日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker logs -d -t --tail containerID</span><br><span class="line">-t          加入时间戳</span><br><span class="line">-f          跟随最新的日志打印</span><br><span class="line">--tail      数字显示最后多少条</span><br></pre></td></tr></table></figure></li><li><p>查看容器内运行的进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top containerID</span><br></pre></td></tr></table></figure></li><li><p>查看容器内部细节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect containerID</span><br></pre></td></tr></table></figure></li><li><p>进入正在运行的容器并以命令行交互</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec it containerID bashShell</span><br><span class="line">docker attach containerID    #重新进入</span><br></pre></td></tr></table></figure></li></ol><blockquote><p> 区别<br> attach       直接进入容器命令的终端，不启动新的进程<br> exec         在容器中打开新的终端，并可以启动新的进程</p></blockquote><ol start="6"><li>从容器内拷贝文件到主机上<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp containerID:容器内路径 目的主机地址</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font size=&quot;5&quot; color=&quot;#1BC3FB&quot; face=&quot;楷体&quot;&gt;Docker常用命令&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.yinuxy.com/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Anaconda中的python版本降级</title>
    <link href="https://blog.yinuxy.com/2020/02/11/Experience/conda_python_down/"/>
    <id>https://blog.yinuxy.com/2020/02/11/Experience/conda_python_down/</id>
    <published>2020-02-11T06:55:16.000Z</published>
    <updated>2020-02-13T11:46:57.264Z</updated>
    
    <content type="html"><![CDATA[<blockquote><center><font size="5" color="#1BC3FB" face="楷体">Anaconda中的python版本降级</font></center></blockquote><a id="more"></a><ol><li>打开anaconda navigato<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.28/img/Experience/conda_python_down/output_1.jpg" alt></li><li>最左侧边栏选择Environments,搜索python并找到python，查看红框处python版本（我的已经降级为3.5，新安装的情况下会看到的是3.6）<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.28/img/Experience/conda_python_down/output_2.jpg" alt></li><li>左键点击python前方绿色箭头（红框处），选择Mark for specific version installation，选择对应的python<br>版本（3.5）<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.28/img/Experience/conda_python_down/output_3.jpg" alt></li><li>等待安装完成后（时间有点长，res改成中国的话可以得到改善）,运行下python并检查下版本是否已经降级到了3.5<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.28/img/Experience/conda_python_down/output_4.jpg" alt></li></ol><blockquote><p>转载于<a href="http://f.dataguru.cn/thread-841874-1-1.html" target="_blank" rel="noopener">谈谈如果在官网上下载的anaconda 3.6中把python降级到3.5</a>,如有侵权请联系博主删除。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font size=&quot;5&quot; color=&quot;#1BC3FB&quot; face=&quot;楷体&quot;&gt;Anaconda中的python版本降级&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.yinuxy.com/categories/Python/"/>
    
    
      <category term="Anaconda" scheme="https://blog.yinuxy.com/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>解决No module named &#39;mpl_toolkits.basemap&#39;问题</title>
    <link href="https://blog.yinuxy.com/2020/02/10/Error/error_0001/"/>
    <id>https://blog.yinuxy.com/2020/02/10/Error/error_0001/</id>
    <published>2020-02-10T03:37:16.000Z</published>
    <updated>2020-02-13T11:47:22.656Z</updated>
    
    <content type="html"><![CDATA[<blockquote><center><font size="5" color="#1BC3FB" face="楷体">解决No module named 'mpl_toolkits.basemap'问题</font></center></blockquote><a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Python3.x版本导入<code>from mpl_toolkits.basemap import Basemap</code>包时出现问题：<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.28/img/Error/Feb/output_1.png" alt></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>安装pyproj：<br><code>pip install pyproj -i https://pypi.tuna.tsinghua.edu.cn/simple</code><br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.28/img/Error/Feb/output_2.png" alt></li><li>进入<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#basemap" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#basemap</a>   ctrl + F   搜索 basemap，下载<img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.28/img/Error/Feb/output_3.png" alt><br>下载时请与自身系统所用python版本对应；如python版本为3.6.X、amd64可选用图中红框版本</li><li>下载完后使用Shell命令进入文件根目录运行<code>pip install packagename</code>即可安装成功！<img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.29/img/Error/Feb/output_4.png" alt></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font size=&quot;5&quot; color=&quot;#1BC3FB&quot; face=&quot;楷体&quot;&gt;解决No module named &#39;mpl_toolkits.basemap&#39;问题&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Matplotlib" scheme="https://blog.yinuxy.com/categories/Matplotlib/"/>
    
    
      <category term="basemap" scheme="https://blog.yinuxy.com/tags/basemap/"/>
    
      <category term="pyproj" scheme="https://blog.yinuxy.com/tags/pyproj/"/>
    
  </entry>
  
  <entry>
    <title>Word2Vec——使用GloVe训练中文词向量</title>
    <link href="https://blog.yinuxy.com/2020/01/16/Lessons/Word2Vec_GloVe/"/>
    <id>https://blog.yinuxy.com/2020/01/16/Lessons/Word2Vec_GloVe/</id>
    <published>2020-01-16T03:37:16.000Z</published>
    <updated>2020-01-16T12:11:09.195Z</updated>
    
    <content type="html"><![CDATA[<blockquote><center><font size="5" color="#1BC3FB" face="楷体">Word2Vec——使用GloVe训练中文词向量</font></center></blockquote><a id="more"></a><h2 id="准备语料"><a href="#准备语料" class="headerlink" title="准备语料"></a>准备语料</h2><p>准备好中文语料：<a href="https://github.com/Embedding/Chinese-Word-Vectors" target="_blank" rel="noopener">中文语料库</a>，或者使用<a href="https://www.cnblogs.com/sylvanas2012/p/5428746.html" target="_blank" rel="noopener">Leavingseason</a>准备好的语料进行训练：<a href="http://pan.baidu.com/s/1jHZCvvo" target="_blank" rel="noopener">http://pan.baidu.com/s/1jHZCvvo</a><br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.27/img/Word2Vec_GloVe/output_1.png" alt></p><h2 id="准备源码"><a href="#准备源码" class="headerlink" title="准备源码"></a>准备源码</h2><p>到<a href="https://github.com/stanfordnlp/GloVe" target="_blank" rel="noopener">斯坦福GloVe开源代码gihub地址</a>下载代码；解压后将语料×××.txt添加到GloVe-master文件夹下<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.27/img/Word2Vec_GloVe/output_2.png" alt></p><h2 id="修改训练语料地址"><a href="#修改训练语料地址" class="headerlink" title="修改训练语料地址"></a>修改训练语料地址</h2><p>打开demo.sh文件，修改相应的内容<br>因为demo默认是下载网上的语料来训练的，因此如果要训练自己的语料，需要注释掉<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.27/img/Word2Vec_GloVe/output_3.png" alt><br>修改参数设置，将CORPUS设置成语料的名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CORPUS=text8                                     要生成词向量的文本</span><br><span class="line">VOCAB_FILE=vocab.txt                             得到的词和词频</span><br><span class="line">COOCCURRENCE_FILE=cooccurrence.bin</span><br><span class="line">COOCCURRENCE_SHUF_FILE=cooccurrence.shuf.bin</span><br><span class="line">BUILDDIR=build</span><br><span class="line">SAVE_FILE=vectors</span><br><span class="line">VERBOSE=2</span><br><span class="line">MEMORY=4.0                                        内存</span><br><span class="line">VOCAB_MIN_COUNT=5                                 最小词频数</span><br><span class="line">VECTOR_SIZE=50                                    词向量维度</span><br><span class="line">MAX_ITER=15                                       训练迭代次数</span><br><span class="line">WINDOW_SIZE=15                                    上下文窗口数</span><br><span class="line">BINARY=2                                          保存文件类型（2进制）</span><br><span class="line">NUM_THREADS=8                                     线程数</span><br><span class="line">X_MAX=10</span><br></pre></td></tr></table></figure><h2 id="执行bash文件"><a href="#执行bash文件" class="headerlink" title="执行bash文件"></a>执行bash文件</h2><p>进入到主文件夹下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.27/img/Word2Vec_GloVe/output_5.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash demo.sh</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.27/img/Word2Vec_GloVe/output_6.png" alt><br>注意，如果训练数据较大，则训练时间较长，那么建议使用nohup来运行程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup bash demo.sh &gt;output.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>训练后会得到vetors.txt，打开后在第一行加上vacob_size vector_size，这样才能用word2vec的load函数加载成功<br>vacob_size vector_size可在训练时看到：<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.27/img/Word2Vec_GloVe/output_7.png" alt></p><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>进入glove目录下，首先先参考README.txt,里面主要介绍这个程序包含了四部分子程序，按步骤分别是<code>vocab_count</code>、<code>cooccur</code>、<code>shuffle</code>、<code>glove</code>：</p><ol><li><code>vocab_count</code>:用于计算原文本的单词统计（生成vocab.txt,每一行为：单词  词频）</li><li><code>cooccur</code>：用于统计词与词的共现，类似word2vec的窗口内的任意两个词（生成的是cooccurrence.bin,二进制文件）</li><li><code>shuffle</code>：对于2中的共现结果重新整理</li><li><code>glove</code>：glove算法的训练模型，会运用到之前生成的相关文件（1&amp;3），最终会输出vectors.txt和vectors.bin（前者直接可以打开，下文主要针对它做研究，后者还是二进制文件）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font size=&quot;5&quot; color=&quot;#1BC3FB&quot; face=&quot;楷体&quot;&gt;Word2Vec——使用GloVe训练中文词向量&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.yinuxy.com/categories/Algorithm/"/>
    
    
      <category term="Word2Vec" scheme="https://blog.yinuxy.com/tags/Word2Vec/"/>
    
      <category term="词向量" scheme="https://blog.yinuxy.com/tags/%E8%AF%8D%E5%90%91%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>活动线报001——京东炸年兽脚本</title>
    <link href="https://blog.yinuxy.com/2020/01/03/Activity/0001/jdzns/"/>
    <id>https://blog.yinuxy.com/2020/01/03/Activity/0001/jdzns/</id>
    <published>2020-01-03T03:37:16.000Z</published>
    <updated>2020-01-03T16:14:27.824Z</updated>
    
    <content type="html"><![CDATA[<blockquote><center><font size="5" color="#1BC3FB" face="楷体">活动线报001——京东炸年兽脚本</font></center></blockquote><a id="more"></a><ol><li>使用电脑端登录一下<a href="http://m.jd.com" target="_blank" rel="noopener">http://m.jd.com</a>登录自己账号</li><li>登陆成功后再打开如下链接：<br><a href="https://bunearth.m.jd.com/babelDiy/SGFJVMOZADGTQCZWGEYU/4PWgqmrFHunn8C38mJA712fufguU/index.html#/wxhome" target="_blank" rel="noopener">https://bunearth.m.jd.com/babelDiy/SGFJVMOZADGTQCZWGEYU/4PWgqmrFHunn8C38mJA712fufguU/index.html#/wxhome</a></li><li>进入活动界面有按下F12进入开发者模式 点击Console下粘贴下面红色的脚本 按回车键<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(function(p,a,c,k,e,d)&#123;e=function(c)&#123;return(c&lt;a?&quot;&quot;:e(parseInt(c/a)))+((c=c%a)&gt;35?String.fromCharCode(c+29):c.toString(36))&#125;;if(!&apos;&apos;.replace(/^/,String))&#123;while(c--)d[e(c)]=k[c]||e(c);k=[function(e)&#123;return d[e]&#125;];e=function()&#123;return&apos;\\w+&apos;&#125;;c=1;&#125;;while(c--)if(k[c])p=p.replace(new RegExp(&apos;\\b&apos;+e(c)+&apos;\\b&apos;,&apos;g&apos;),k[c]);return p;&#125;(&apos;6 0=1.5(\&apos;0\&apos;);0.7=&quot;2/3&quot;;0.4=&quot;b://c.d/8&quot;;1.9.a(0);&apos;,14,14,&apos;script|document|text|javascript|src|createElement|var|type|ATmFCV|body|appendChild|https|6url|cn&apos;.split(&apos;|&apos;),0,&#123;&#125;))</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Activities/0001/output_1.png" alt></p><ol start="4"><li>接下来点击右上角三个点 选择<code>More tools</code>-&gt;<code>Network conditions</code><br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Activities/0001/output_2.png" alt><br>运行会出现一个ʚ福利鸭ɞ 如下图<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Activities/0001/output_3.png" alt></li><li>复制下面红色的<code>user-Agent</code>粘贴到箭头1位置;再重复一次步骤3。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdapp;android;8.4.2;8.0.0;;network/wifi;model/Mi Note 2;osVer/26;appBuild/71043;psn/|7;psq/1;uid/;adk/;ads/;pap/JA2015_311210|8.4.2|ANDROID 8.0.0;osv/8.0.0;pv/2.23;jdv/;ref/com.jingdong.app.mall.WebActivity;partner/huawei;apprpd/Home_Main;Mozilla/5.0 (Linux; Android 8.0.0; Mi Note 2 Build/OPR1.170623.032; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/71.0.3578.99 Mobile Safari/537.36</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Activities/0001/output_4.png" alt></p><ol start="6"><li>点击左侧的所有按钮完成任务。<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Activities/0001/output_5.png" alt></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font size=&quot;5&quot; color=&quot;#1BC3FB&quot; face=&quot;楷体&quot;&gt;活动线报001——京东炸年兽脚本&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="活动线报" scheme="https://blog.yinuxy.com/categories/%E6%B4%BB%E5%8A%A8%E7%BA%BF%E6%8A%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>算法笔记（0002） - 【贪心算法】活动安排问题</title>
    <link href="https://blog.yinuxy.com/2019/10/31/OJContest/AlgorithmNote0002/"/>
    <id>https://blog.yinuxy.com/2019/10/31/OJContest/AlgorithmNote0002/</id>
    <published>2019-10-31T12:31:54.000Z</published>
    <updated>2019-12-23T12:16:13.581Z</updated>
    
    <content type="html"><![CDATA[<blockquote><center><font size="5" color="#1BC3FB" face="楷体">算法笔记（0002） - 【贪心算法】活动安排问题</font></center></blockquote><a id="more"></a><h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在对问题求解时，总是做出在<font face="黑体" color="red">当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。</font>贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>贪心算法采用<font face="黑体" color="red">自顶向下</font>，以迭代的方法做出相继的贪心选择，每做一次贪心选择就将所求问题简化为一个规模更小的子问题，通过每一步贪心选择，可得到问题的一个最优解，虽然每一步上都要保证能获得局部最优解，但由此产生的全局解有时不一定是最优的，所以贪婪法不要回溯。能够用贪心算法求解的问题一般具有两个重要特性：<font face="黑体" color="red">贪心选择性质</font>和<font face="黑体" color="red">最优子结构性质。</font></p><h3 id="1、贪心选择性质"><a href="#1、贪心选择性质" class="headerlink" title="1、贪心选择性质"></a>1、贪心选择性质</h3><p>所谓贪心选择性质是指所求问题的整体最优解可以通过一系列局部最优的选择，即贪心选择来达到。这是贪心算法可行的第一个基本要素。贪心算法则通常以自顶向下的方式进行，以迭代的方式作出相继的贪心选择，每作一次贪心选择就将所求问题简化为规模更小的子问题。</p><p>对于一个具体问题，要确定它是否具有贪心选择性质，必须证明每一步所作的贪心选择最终导致问题的整体最优解。证明的大致过程为：首先考察问题的一个整体最优解，并证明可修改这个最优解，使其以贪心选择开始。做了贪心选择后，原问题简化为规模更小的类似子问题。然后用数学归纳法证明通过每一步做贪心选择，最终可得到问题的整体最优解。其中，证明贪心选择后的问题简化为规模更小的类似子问题的关键在于利用该问题的最优子结构性质。</p><h3 id="2、最优子结构性质"><a href="#2、最优子结构性质" class="headerlink" title="2、最优子结构性质"></a>2、最优子结构性质</h3><p>当一个问题的最优解包含其子问题的最优解时，称此问题具有最优子结构性质。</p><h3 id="3、贪心算法与动态规划算法的差异"><a href="#3、贪心算法与动态规划算法的差异" class="headerlink" title="3、贪心算法与动态规划算法的差异"></a>3、贪心算法与动态规划算法的差异</h3><p>动态规划和贪心算法都是一种递推算法，均有最优子结构性质，通过局部最优解来推导全局最优解。两者之间的区别在于：<font face="黑体" color="red">贪心算法中作出的每步贪心决策都无法改变，因为贪心策略是由上一步的最优解推导下一步的最优解，而上一部之前的最优解则不作保留，贪心算法每一步的最优解一定包含上一步的最优解。动态规划算法中全局最优解中一定包含某个局部最优解，但不一定包含前一个局部最优解，因此需要记录之前的所有最优解。</font></p><h3 id="4、基本思路："><a href="#4、基本思路：" class="headerlink" title="4、基本思路："></a>4、基本思路：</h3><ol><li>建立数学模型来描述问题。</li><li>把求解的问题分成若干个子问题。</li><li>对每一子问题求解，得到子问题的局部最优解。</li><li>把子问题的解局部最优解合成原来解问题的一个解。</li></ol><h1 id="活动安排问题"><a href="#活动安排问题" class="headerlink" title="活动安排问题"></a>活动安排问题</h1><p>活动安排问题就是要在所给的活动集合中选出最大的相容活动子集合，是可以用贪心算法有效求解的很好例子。该问题要求高效地安排一系列争用某一公共资源的活动。贪心算法提供了一个简单、漂亮的方法使得尽可能多的活动能兼容地使用公共资源。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p> 设有n个活动的集合E={1,2,…,n}，其中每个活动都要求使用同一资源，如演讲会场等，而在同一时间内只有一个活动能使用这一资源。每个活动i都有一个要求使用该资源的起始时间si和一个结束时间fi,且si &lt;fi。如果选择了活动i，则它在半开时间区间[si, fi)内占用资源。若区间[si, fi)与区间[sj, fj)不相交,则称活动i与活动j是相容的。也就是说，当si≥fj或sj≥fi时，活动i与活动j相容。活动安排问题就是要在所给的活动集合中选出最大的相容活动子集合。 </p><h2 id="求解思路"><a href="#求解思路" class="headerlink" title="求解思路"></a>求解思路</h2><p>将活动按照结束时间进行从小到大排序。然后用i代表第i个活动，s[i]代表第i个活动开始时间，f[i]代表第i个活动的结束时间。按照从小到大排序，挑选出结束时间尽量早的活动，并且满足后一个活动的起始时间晚于前一个活动的结束时间，全部找出这些活动就是最大的相容活动子集合。事实上系统一次检查活动i是否与当前已选择的所有活动相容。若相容活动i加入已选择活动的集合中，否则，不选择活动i，而继续下一活动与集合A中活动的相容性。若活动i与之相容，则i成为最近加入集合A的活动，并取代活动j的位置。</p><p>下面给出求解活动安排问题的贪心算法，各活动的起始时间和结束时间存储于数组s和f中，且按结束时间的非减序排列。如果所给的活动未按此序排列，可以用O(nlogn)的时间重排。具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include &lt;iostream&gt; </span><br><span class="line">using namespace std; </span><br><span class="line"> </span><br><span class="line">template&lt;class Type&gt;</span><br><span class="line">void GreedySelector(int n, Type s[], Type f[], bool A[]);</span><br><span class="line"> </span><br><span class="line">const int N = 11;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//下标从1开始,存储活动开始时间</span><br><span class="line">int s[] = &#123;0,1,3,0,5,3,5,6,8,8,2,12&#125;;</span><br><span class="line"> </span><br><span class="line">//下标从1开始,存储活动结束时间</span><br><span class="line">int f[] = &#123;0,4,5,6,7,8,9,10,11,12,13,14&#125;;</span><br><span class="line"> </span><br><span class="line">bool A[N+1];</span><br><span class="line"> </span><br><span class="line">cout&lt;&lt;&quot;各活动的开始时间,结束时间分别为：&quot;&lt;&lt;endl;</span><br><span class="line">for(int i=1;i&lt;=N;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;&quot;[&quot;&lt;&lt;i&lt;&lt;&quot;]:&quot;&lt;&lt;&quot;(&quot;&lt;&lt;s[i]&lt;&lt;&quot;,&quot;&lt;&lt;f[i]&lt;&lt;&quot;)&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">GreedySelector(N,s,f,A);</span><br><span class="line">cout&lt;&lt;&quot;最大相容活动子集为：&quot;&lt;&lt;endl;</span><br><span class="line">for(int i=1;i&lt;=N;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(A[i])&#123;</span><br><span class="line">cout&lt;&lt;&quot;[&quot;&lt;&lt;i&lt;&lt;&quot;]:&quot;&lt;&lt;&quot;(&quot;&lt;&lt;s[i]&lt;&lt;&quot;,&quot;&lt;&lt;f[i]&lt;&lt;&quot;)&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">template&lt;class Type&gt;</span><br><span class="line">void GreedySelector(int n, Type s[], Type f[], bool A[])</span><br><span class="line">&#123;</span><br><span class="line">A[1]=true;</span><br><span class="line">int j=1;//记录最近一次加入A中的活动</span><br><span class="line"> </span><br><span class="line">for (int i=2;i&lt;=n;i++)//依次检查活动i是否与当前已选择的活动相容</span><br><span class="line">&#123;</span><br><span class="line">if (s[i]&gt;=f[j])</span><br><span class="line">&#123; </span><br><span class="line">A[i]=true;</span><br><span class="line">j=i;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">A[i]=false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于输入的活动以其完成时间的非减序排列，所以算法greedySelector每次总是选择<font face="黑体" color="red">具有最早完成时间</font>的相容活动加入集合A中。直观上，按这种方法选择相容活动<font face="黑体" color="red">为未安排活动留下尽可能多的时间。</font>也就是说，该算法的贪心选择的意义是<font face="黑体" color="red">使剩余的可安排时间段极大化，以便安排尽可能多的相容活动。</font>算法greedySelector的效率极高。当输入的活动已按结束时间的非减序排列，算法只需O(n)的时间安排n个活动，使最多的活动能相容地使用公共资源。如果所给出的活动未按非减序排列，可以用O(nlogn)的时间重排。 </p><p>例：设待安排的11个活动的开始时间和结束时间按结束时间的非减序排列如下：<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Algorithm_Note0002/output_2.jpg" alt><br>算法greedySelector 的计算过程如下图所示。图中每行相应于算法的一次迭代。阴影长条表示的活动是已选入集合A的活动，而空白长条表示的活动是当前正在检查相容性的活动。<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Algorithm_Note0002/output_3.jpg" alt><br>若被检查的活动i的开始时间Si小于最近选择的活动j的结束时间fi，则不选择活动i，否则选择活动i加入集合A中。贪心算法并不总能求得问题的整体最优解。但对于活动安排问题，贪心算法greedySelector却总能求得的整体最优解，即它最终所确定的相容活动集合A的规模最大。这个结论可以用数学归纳法证明。</p><p> 证明如下：设E=｛0，1，2，…，n-1｝为所给的活动集合。由于E中活动安排安结束时间的非减序排列，所以活动0具有最早完成时间。首先证明活动安排问题有一个最优解以贪心选择开始，即该最优解中包含活动0.设a是所给的活动安排问题的一个最优解，且a中活动也按结束时间非减序排列，a中的第一个活动是活动k。如k=0，则a就是一个以贪心选择开始的最优解。若k&gt;0，则我们设b=a-｛k｝∪｛0｝。由于end[0] ≤end[k],且a中活动是互为相容的，故b中的活动也是互为相容的。又由于b中的活动个数与a中活动个数相同，且a是最优的，故b也是最优的。也就是说b是一个以贪心选择活动0开始的最优活动安排。因此，证明了总存在一个以贪心选择开始的最优活动安排方案，也就是算法具有贪心选择性质。</p><h2 id="例题练手"><a href="#例题练手" class="headerlink" title="例题练手"></a>例题练手</h2><p>题目地址：<a href="https://www.51nod.com/tutorial/course.html#!courseId=14" target="_blank" rel="noopener">点击打开链接</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有若干个活动，第i个开始时间和结束时间是[Si,fi)，只有一个教室，活动之间不能交叠，求最多安排多少个活动？</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ol><li>开始最早的活动优先，目标是想尽早结束活动，让出教室。</li></ol><p>然而， 这个显然不行，因为最早的活动可能很长，影响我们进行后面的活动。例如活动开始和结束时间分别为[0, 100), [1,2) ,[2, 3), [3, 4),[4,5]，安排［0，100)的这个活动之后，其他活动无法安排，可是最优解是安排除它外的4个活动。</p><ol start="2"><li>短活动优先， 目标也是尽量空出教室。但是不难构造如下反例： [0,5) [5,10) [3, 7), 这里[3,7)最短，但如果我们安排了[3,7)，其它两个无法安排了。但是最优解显然是安排其它两个，而放弃[3,7)，可见这个贪心策略也是不行的。<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Algorithm_Note0002/output_4.jpg" alt></li><li>最少冲突的活动优先， 既然上面安排活动是想减少冲突，那么如果我们优先安排冲突最少的活动可以么？至少从（1）和（2）看来，这个策略是有效的。真是对的么？ 尝试这个例子：<br>[0,2) [2,4) [4,6) [6,8)<br>[1,3) [1,3) [1,3) [3,5) [5,7) [5,7) [5,7)<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Algorithm_Note0002/output_5.jpg" alt><br>看一下[0,2) 和3个活动冲突——3个[1,3)</li></ol><p>[2,4)和4个活动冲突3个[1,3)和一个[3,5)<br>[4,6)和也和4个活动冲突3个[5,7)和一个[3,5)<br>[6,8)和3个活动冲突——3个[5,7)</p><p>下面[1,3)和[5,7)每个都和5个活动冲突，<br>而[3,5)只和两个活动冲突——[2,4)和[4,6)。</p><p>那按照我们的策略应该先安排[3,5), 可是一旦选择了[3,5)，我们最多只可能安排3个活动。<br>但明显第一行的4个活动都可以安排下来，所以这种策略也是不对的。</p><ol start="4"><li>看似最不对的策略——结束时间越早的活动优先。这个策略是有效的，我们可以证明。假设最优解OPT中安排了m个活动，我们把这些活动也按照结束时间由小到大排序，显然是不冲突的。假设排好顺序后，这些活动是a(1) , a(2), a(3)….am</li></ol><p>假设按照我们的贪心策略，选出的活动自然是按照结束时间排好顺序的，并且也都是不冲突的，这些活动是b(1), b(2) …b(n)</p><p>问题关键是，假设a(1) = b(1), a(2) = b(2)…. a(k) = b(k)，但是a(k+1) != b(k+1)，回答几个问题：</p><ol><li>b(k+1)会在a(k+2), a(k+3), …. a(m)中出现么？<br>不会。因为b(k+1)的结束时间是最早的，即f(b(k+1)) &lt;= f(a(k+1)),而a(k+2), a(k+3), …. a(m)的开始时间和结束时间都在f(a(k+1))之后，所以b(k+1)不在其中。</li><li>b(k+1)和a(1), a(2), …. a(k) 冲突么？<br>不冲突，因为a(1), a(2), …. a(k)就是b(1), b(2), …. b(k)</li><li>b(k+1)和a(k+2), a(k+3), …. a(m)冲突么？<br>不冲突，因为f(b(k+1)) &lt;= f(a(k+1))，而a(k+2), a(k+3), …. a(m)的开始时间都在f(a(k+1))之后，更在f(b(k+1))之后。</li></ol><p>因此我们可以把a(k+1) 换成b(k+1)， 从而最优解和我们贪心得到的解多了一个相同的，经过一个一个替换，我们可以把最优解完全替换成我们贪心策略得到的解。 从而证明了这个贪心策略的最优性。<br>最后，我们来提供输入输出数据，由你来写一段程序，实现这个算法，只有写出了正确的程序，才能继续后面的课程。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第1行：1个数N，线段的数量(2 &lt;= N &lt;= 10000)<br>第2 - N + 1行：每行2个数，线段的起点和终点(-10^9 &lt;= S,E &lt;= 10^9)</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出最多可以选择的线段数量。</p><h3 id="输入示例"><a href="#输入示例" class="headerlink" title="输入示例"></a>输入示例</h3><p>3<br>1 5<br>2 3<br>3 6</p><h3 id="输出示例"><a href="#输出示例" class="headerlink" title="输出示例"></a>输出示例</h3><p>2</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct Node&#123;</span><br><span class="line">   int start;</span><br><span class="line">   int end;</span><br><span class="line">&#125; a[10001];</span><br><span class="line">/**</span><br><span class="line">  自定义的排序规则</span><br><span class="line">*/</span><br><span class="line">bool cmp(Node x,Node y)&#123;</span><br><span class="line">    if(x.end&lt;y.end)</span><br><span class="line">        return true;</span><br><span class="line">    else if(x.end==y.end&amp;&amp;x.start&gt;y.start)</span><br><span class="line">        return true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i].start&gt;&gt;a[i].end;</span><br><span class="line">    &#125;</span><br><span class="line">    //a是待排序的数组的首地址，a+n是尾地址</span><br><span class="line">    //cmp是自定义排序规则</span><br><span class="line">    sort(a,a+n,cmp);</span><br><span class="line">    int ans =0;</span><br><span class="line">    int end = -1000000000;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        if(a[i].start&gt;=end)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            end=a[i].end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><blockquote><p><a href="https://blog.csdn.net/liufeng_king/article/details/8709005" target="_blank" rel="noopener">贪心算法与活动安排问题</a><br><a href="https://blog.csdn.net/qq_26891045/article/details/51025619" target="_blank" rel="noopener">ACM–贪心算法–活动安排问题</a></p></blockquote><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=1mf6rgkiph5g5" target="_blank" rel="noopener">https://cloud.tencent.com/developer/support-plan?invite_code=1mf6rgkiph5g5</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font size=&quot;5&quot; color=&quot;#1BC3FB&quot; face=&quot;楷体&quot;&gt;算法笔记（0002） - 【贪心算法】活动安排问题&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="贪心算法" scheme="https://blog.yinuxy.com/categories/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="动态规划" scheme="https://blog.yinuxy.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="最优子结构" scheme="https://blog.yinuxy.com/tags/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84/"/>
    
      <category term="贪心选择" scheme="https://blog.yinuxy.com/tags/%E8%B4%AA%E5%BF%83%E9%80%89%E6%8B%A9/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记（0001） - 【动态规划】图像压缩问题</title>
    <link href="https://blog.yinuxy.com/2019/10/26/OJContest/AlgorithmNote0001/"/>
    <id>https://blog.yinuxy.com/2019/10/26/OJContest/AlgorithmNote0001/</id>
    <published>2019-10-26T03:37:16.000Z</published>
    <updated>2019-12-03T11:24:54.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><center><font size="5" color="#1BC3FB" face="楷体">算法笔记（0001） - 【动态规划】图像压缩问题</font></center></blockquote><a id="more"></a><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在计算机中，常用像素点的灰度值序列{p1,p1,……pn}表示图像。其中整数pi,1&lt;=i&lt;=n，表示像素点i的灰度值。通常灰度值的范围是0-255。因此需要8位二进制数来表示一个像素。这个时候大家应该有了一些小的疑问：我能不能用更少的位数来表示灰度值？（因为有的灰度值并没有达到255这么大）所以我们引入了图像压缩算法来解决这个问题。<br>不过在引入问题之前，我要在这里介绍一些算法设计的知识——我们要将灰度值序列分组，而每一组中所有的数就有可能是&lt;255的，所以我们就不需要用8位数字去表示像素大小了，但是分组会带来一个新的问题：我如何表示当前组中像素的个数和像素的位数呢（因为不是八位，所以要有一个数据来记录真正的位数）？这里我们引入两个固定位数的值来表示，①我们用3位数字来表示当前组的每一位像素的的位数②我们引入8来表示当前组中像素点的个数　　因为我们在这里规定了一组中最多存储–&gt;0~255个数字，而一个灰度值最多有8位（2^3），所以我们可以用即3位数字来表示当前组的像素位数（注意这里都是二进制）<br>压缩的原理就是<font color="red" face="黑体">把序列{p1,p1,……pn}进行设断点，将其分割成一段一段的。分段的过程就是要找出断点，让一段里面的像素的最大灰度值比较小，那么这一段像素(本来需要8位)就可以用较少的位(比如7位)来表示，从而减少存储空间。</font><br>b代表bits,l代表length,分段是，b[i]表示每段一个像素点需要的最少存储空间(少于8位才有意义)，l[i]表示每段里面有多少个像素点，s[i]表示从0到i压缩为一共占多少存储空间。<br>如果限制l[i]&lt;=255,则需要8位来表示l[i]。而b[i]&lt;=8，需要3位表示b[i]。所以每段所需的存储空间为l[i]*b[i]+11位。假设将原图像分成m段，那么需要<img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Algorithm_Note0001/output_1.jpg" alt>位的存储空间。<br>图像压缩问题就是要<font color="red" face="黑体">确定像素序列{p1,p1,……pn}的最优分段，使得依此分段所需的存储空间最小。</font></p><h1 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h1><p>设l[i],b[i],1&lt;=i&lt;=m是{p1,p1,……pn}的一个最优分段，则l[1],b[1]是{p1,……,pl[1]}的一个最优分段，且l[i],b[i],2&lt;=i&lt;=m是{pl[1]+1,……,pn}的一个最优分段。即图像压缩问题满足最优子结构性质。</p><h1 id="递推关系"><a href="#递推关系" class="headerlink" title="递推关系"></a>递推关系</h1><p>设s[i],1&lt;=i&lt;=n是像素序列{p1,p1,……pi}的最优分段所需的存储位数，则s[i]为前i-k个的存储位数加上后k个的存储空间。由最优子结构性质可得：<img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Algorithm_Note0001/output_2.jpg" alt>式中<img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Algorithm_Note0001/output_3.jpg" alt></p><h1 id="构造最优解"><a href="#构造最优解" class="headerlink" title="构造最优解"></a>构造最优解</h1><p>数组l[i],b[i]记录了最优分段所需的信息最优分段的最后一段的段长度和像素位数分别存储在l[n]和b[n]中,其前一段的段长度和像素位数存储于l[n-l[n]]和b[n-l[n]]中，依此类推，可在O(n)时间内构造最优解。</p><h1 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h1><p>{6, 5, 7,5, 245, 180, 28,28,19, 22, 25,20}这是一组灰度值序列。我们按照默认的解体方法来看—-一共12个数字，所以12*8=96位来表示。<br>而下面我们将其进行分组：<img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Algorithm_Note0001/output_4.png" alt><br>这里我们将他们分为三组：</p><ol><li>第一组4个数，最大是7所以用3位表示；</li><li>第二组2个数，最大是245所以用8位表示；</li><li>第三组6个数，最大是28所以用5位表示；</li><li>这个时候，我们最后得到了最后的位数结果为：43+28+65+113=91。是不是优化了？？<br>那我们算法应该怎么做来找最优的值呢？？<br>下面我一步一步介绍。<br>压缩过程中的数组存储：<br>既然是DP问题，所以我们肯定需要数组来记录每一步的最优值。这里我们用<br>S[i]来记录前i个数字的最优处理方式得到的最优解。<br>l[i]中来记录第当前第i个数所在组中有多少个数。(因而只有每一组的最后一个l[x],存储有效)（这句话，暂时看不懂也没关系）<br>b[i]中存第i个数的像素位数。</li></ol><p>下面我写出来具体的递推过程–&gt;<br>例题:　求像素序列4，6，5，7，129，138，1的最优分段。<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Algorithm_Note0001/output_5.png" alt><br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/Algorithm_Note0001/output_6.png" alt><br>在解体过程中，我们知道在我们求s[3]的时候，我们是分三种情况—-</p><ol><li>前三个数为一组，这个时候我需要的存储位数是3(位数)*3（每一组中数的个数）+11（每分一组所必须的固定位数）</li><li>s[1]为单独一组，剩下的两个数字为一组，此时我所需要的空间为s[1]+2*3+11</li><li>前两个数字为一组，最后一个数为一组。此时我们要用s[2]（前面已经计算出的最优值）+3*1+11<br>然后比较三个数的大小，取最小的那一种分组情况，然后记下l[3]=3（当前最优分组中是三个数在同一组中），b[3]=3（每一个像素所用的存储位数）<br>递归到最后得到最优解为　　58.<h1 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">写完奉上</span><br></pre></td></tr></table></figure></li></ol><h2 id="压缩部分代码"><a href="#压缩部分代码" class="headerlink" title="压缩部分代码"></a>压缩部分代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">void Compress(int n,int p[],int s[],int l[],int b[])</span><br><span class="line">&#123;</span><br><span class="line">    int Lmax = 256,header = 11;</span><br><span class="line">    s[0] = 0;</span><br><span class="line">    for(int i=1; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i] = length(p[i]);//计算像素点p需要的存储位数  </span><br><span class="line">        int bmax = b[i];</span><br><span class="line">        s[i] = s[i-1] + bmax + header;</span><br><span class="line">        l[i] = 1;</span><br><span class="line">        for(int j=2; j&lt;=i &amp;&amp; j&lt;=Lmax;j++)  //最后一段含有一个像素，两个像素，所有像素</span><br><span class="line">        &#123;  </span><br><span class="line">            //if(bmax&lt;b[i-j+1])   //最后一个b[i-j+1]有效，是前一段当中的最大值，并不是后一段中的最大值</span><br><span class="line">            if(bmax&lt;length(p[i-j+1])) </span><br><span class="line">            &#123;  </span><br><span class="line">                bmax = length(p[i-j+1]);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            if(s[i]&gt;s[i-j]+j*bmax+header)  </span><br><span class="line">            &#123;  </span><br><span class="line">                s[i] = s[i-j] + j*bmax+header;  </span><br><span class="line">                l[i] = j;  </span><br><span class="line">                b[i] = bmax;  //我加，跟新当前组，所需的存储位数</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">//代码参考：https://www.cnblogs.com/caiyishuai/p/8876077.html </span><br><span class="line">//dacao 2019/6/25</span><br><span class="line">#include&lt;iostream&gt; </span><br><span class="line">#include&lt;cmath&gt;  </span><br><span class="line">#include&lt;stack&gt;</span><br><span class="line">using namespace std;   </span><br><span class="line">  </span><br><span class="line">const int N = 7;  </span><br><span class="line">  </span><br><span class="line">int length(int i);  </span><br><span class="line">void Compress(int n,int p[],int s[],int l[],int b[]);  </span><br><span class="line">int TraceBack(int n,int l[],int b[]);  //返回有多少个段</span><br><span class="line">void Out(int m,int min_len,int l[],int b[]);</span><br><span class="line">  </span><br><span class="line">int main()  </span><br><span class="line">&#123;  </span><br><span class="line">    //int p[] = &#123;0,10,12,15,255,1,2&#125;;//图像灰度数组 下标从1开始计数  </span><br><span class="line">      int p[] = &#123;0,255,1,5,2,1,2&#125;;</span><br><span class="line">    int s[N]=&#123;0&#125;,l[N]=&#123;0&#125;,b[N]=&#123;0&#125;;  </span><br><span class="line">  </span><br><span class="line">    cout&lt;&lt;&quot;图像的灰度序列为：&quot;&lt;&lt;endl;  </span><br><span class="line">  </span><br><span class="line">    for(int i=1;i&lt;N;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        cout&lt;&lt;p[i]&lt;&lt;&quot; &quot;;  </span><br><span class="line">    &#125;  </span><br><span class="line">    cout&lt;&lt;endl;  </span><br><span class="line">  </span><br><span class="line">    Compress(N-1,p,s,l,b);  </span><br><span class="line">    int m=TraceBack(N-1,l,b); </span><br><span class="line">    Out(m,s[N-1],l,b);</span><br><span class="line">    return 0;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">void Compress(int n,int p[],int s[],int l[],int b[])  </span><br><span class="line">&#123;  </span><br><span class="line">    int Lmax = 256,header = 11;  </span><br><span class="line">    s[0] = 0;  </span><br><span class="line">    for(int i=1; i&lt;=n; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        b[i] = length(p[i]);//计算像素点p需要的存储位数  </span><br><span class="line">        int bmax = b[i];  </span><br><span class="line">        s[i] = s[i-1] + bmax + header;  </span><br><span class="line">        l[i] = 1;  </span><br><span class="line">  </span><br><span class="line">        for(int j=2; j&lt;=i &amp;&amp; j&lt;=Lmax;j++)  //最后一段含有一个像素，两个像素，所有像素</span><br><span class="line">        &#123;  </span><br><span class="line">            //if(bmax&lt;b[i-j+1])   //最后一个b[i-j+1]有效，是前一段当中的最大值，并不是后一段中的最大值</span><br><span class="line">            if(bmax&lt;length(p[i-j+1])) </span><br><span class="line">            &#123;  </span><br><span class="line">                bmax = length(p[i-j+1]);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            if(s[i]&gt;s[i-j]+j*bmax+header)  </span><br><span class="line">            &#123;  </span><br><span class="line">                s[i] = s[i-j] + j*bmax+header;  </span><br><span class="line">                l[i] = j;  </span><br><span class="line">                b[i] = bmax;  //我加，跟新当前组，所需的存储位数</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">int length(int i)  </span><br><span class="line">&#123;   </span><br><span class="line">    int k=1;  </span><br><span class="line">    i = i/2;  </span><br><span class="line">    while(i&gt;0)  </span><br><span class="line">    &#123;  </span><br><span class="line">        k++;  </span><br><span class="line">        i=i/2;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return k;</span><br><span class="line">   //return ceil(log(i+1)/log(2));  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">int TraceBack(int n,int l[],int b[]) //从后向前检查，因而之后对应段的，最后一个存储有效</span><br><span class="line">&#123;</span><br><span class="line">    stack&lt;int&gt;ss;</span><br><span class="line">    ss.push(l[n]);</span><br><span class="line">    ss.push(b[n]);</span><br><span class="line">    while (n!=0)</span><br><span class="line">    &#123;</span><br><span class="line">        n=n-l[n];</span><br><span class="line">        ss.push(l[n]);  //l[0]=0,也被压入栈中</span><br><span class="line">        ss.push(b[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    int i=0;</span><br><span class="line">    while (!ss.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        b[i]=ss.top();</span><br><span class="line">        ss.pop(); </span><br><span class="line">        l[i]=ss.top(); //此时　ｌ[]，用来存储，第ｉ组中，元素个数</span><br><span class="line">        ss.pop();</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return i-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Out(int m,int min_len,int l[],int b[])</span><br><span class="line">&#123;</span><br><span class="line">    int i=0;</span><br><span class="line">    cout&lt;&lt;&quot;最小长度：&quot;&lt;&lt;min_len&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;共分成：&quot;&lt;&lt;m&lt;&lt;&quot;段&quot;&lt;&lt;endl;</span><br><span class="line">    for(i=i+1;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;第一个段含有&quot;&lt;&lt;l[i]&lt;&lt;&quot;元素.   &quot;&lt;&lt;&quot;需要存储位数&quot;&lt;&lt;b[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><blockquote><p><a href="https://blog.csdn.net/liufeng_king/article/details/8648195" target="_blank" rel="noopener">0016算法笔记——【动态规划】图像压缩问题</a><br><a href="https://blog.csdn.net/sinat_38816924/article/details/93771579" target="_blank" rel="noopener">图像压缩－－－动态规划</a><br><a href="https://blog.csdn.net/bingqingsuimeng/article/details/78675855" target="_blank" rel="noopener">动态规划之–图像压缩</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font size=&quot;5&quot; color=&quot;#1BC3FB&quot; face=&quot;楷体&quot;&gt;算法笔记（0001） - 【动态规划】图像压缩问题&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.yinuxy.com/categories/Algorithm/"/>
    
    
      <category term="动态规划" scheme="https://blog.yinuxy.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="最优子结构" scheme="https://blog.yinuxy.com/tags/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84/"/>
    
      <category term="重叠子问题" scheme="https://blog.yinuxy.com/tags/%E9%87%8D%E5%8F%A0%E5%AD%90%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>kettle 利用 HTTP Client 获取猫眼电影API近期上映相关信息，并解析json</title>
    <link href="https://blog.yinuxy.com/2019/10/17/Study/kettle_proj1/"/>
    <id>https://blog.yinuxy.com/2019/10/17/Study/kettle_proj1/</id>
    <published>2019-10-17T11:13:47.000Z</published>
    <updated>2019-12-03T11:20:21.224Z</updated>
    
    <content type="html"><![CDATA[<blockquote><center><font size="4" color="#1BC3FB" face="楷体">kettle 利用 HTTP Client 获取猫眼电影API近期上映相关信息，并解析json</font></center></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Kettle 除了常规的数据处理之外，还可以模拟发送HTTP client/post  ，REST client。</p><h2 id="实验背景"><a href="#实验背景" class="headerlink" title="实验背景"></a>实验背景</h2><p>这周二老师布置了一项实验：</p><blockquote><p>建立一个转换，实现一个猫眼API热映电影的json，生成为xls文件。<br>猫眼的热门电影接口为： <a href="http://m.maoyan.com/#movie" target="_blank" rel="noopener">http://m.maoyan.com/#movie</a>，从里面找到API接口：<a href="http://m.maoyan.com/ajax/movieOnInfoList" target="_blank" rel="noopener">http://m.maoyan.com/ajax/movieOnInfoList</a>。需要获取里面的：电影名、评分、主演、信息。</p></blockquote><h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><p>我使用的是kettle的HTTP GET 请求访问了<a href="http://m.maoyan.com/ajax/movieOnInfoList" target="_blank" rel="noopener">猫眼电影提供的接口</a></p><p>HTTP Client 组件在kettle中的位置是：<img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/kettle_proj1/output_1.png" alt></p><p>kettle 的处理流程为：<img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/kettle_proj1/output_2.png" alt></p><h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><p>HTTP Client 为设置请求，HTTP client 通过url调用接口，有两种方式。第一种是直接给定 url，第二种通过步骤从前一步当中传 url 过来。<br>调用之后返回的数据一般会以json的形式存在一个字段当中。我们可以通过设定“结果字段名”对获取后的 json 进行命名，方便下面操作。<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/kettle_proj1/output_3.png" alt><br>在调用HTTP client 时如果被拒绝访问时可以添加请求头。<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/kettle_proj1/output_4.png" alt></p><h2 id="kettle-解析json"><a href="#kettle-解析json" class="headerlink" title="kettle 解析json"></a>kettle 解析json</h2><p>kettle 解析json主要通过 输入内的组件 json input 。<br>使用该组件时，<font color="red" face="黑体">必须保证解析的json的格式完全符合自己编写的解析规则。</font><br>读取本地文件解析无需勾选 源定义在一个字段里 。<br>勾选之后可以从上个步骤当中获取包含json的字段 ，对其解析。该字段一般会是 http client  的 结果输出字段名 。<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/kettle_proj1/output_5.png" alt><br>HTTP client 解析时json 结构未知,需要我们自己书写解析规则。<br>以下面的json 为例 ，我们需要获取 results 中的nm 、star、sc、showInfo、rt等信息对应的json解析规则如下<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/kettle_proj1/output_6.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;coming&quot;:[]</span><br><span class="line">,&quot;movieIds&quot;:[503342,1230121,1249366,342146,1277939,345419,1250700,1227005,1219701,1215348,1256872,1225993,1251174,296020,1178432,359377,1211270,345397,1190383,1260354,1245196,1243361,1277982,1240752,334625,78519,668097,1197625,1291398,1180993,1242130]</span><br><span class="line">,&quot;stid&quot;:&quot;576591972453269000&quot;</span><br><span class="line">,&quot;stids&quot;:[&#123;&quot;movieId&quot;:503342,&quot;stid&quot;:&quot;576591972453269000_a503342_c0&quot;&#125;</span><br><span class="line">,&#123;&quot;movieId&quot;:1230121,&quot;stid&quot;:&quot;576591972453269000_a1230121_c1&quot;&#125;</span><br><span class="line">,&#123;&quot;movieId&quot;:1249366,&quot;stid&quot;:&quot;576591972453269000_a1249366_c2&quot;&#125;</span><br><span class="line">,&#123;&quot;movieId&quot;:342146,&quot;stid&quot;:&quot;576591972453269000_a342146_c3&quot;&#125;</span><br><span class="line">,&#123;&quot;movieId&quot;:1277939,&quot;stid&quot;:&quot;576591972453269000_a1277939_c4&quot;&#125;</span><br><span class="line">,&#123;&quot;movieId&quot;:345419,&quot;stid&quot;:&quot;576591972453269000_a345419_c5&quot;&#125;</span><br><span class="line">,&#123;&quot;movieId&quot;:1250700,&quot;stid&quot;:&quot;576591972453269000_a1250700_c6&quot;&#125;</span><br><span class="line">,&#123;&quot;movieId&quot;:1227005,&quot;stid&quot;:&quot;576591972453269000_a1227005_c7&quot;&#125;</span><br><span class="line">,&#123;&quot;movieId&quot;:1219701,&quot;stid&quot;:&quot;576591972453269000_a1219701_c8&quot;&#125;</span><br><span class="line">,&#123;&quot;movieId&quot;:1215348,&quot;stid&quot;:&quot;576591972453269000_a1215348_c9&quot;&#125;</span><br><span class="line">,&#123;&quot;movieId&quot;:1256872,&quot;stid&quot;:&quot;576591972453269000_a1256872_c10&quot;&#125;</span><br><span class="line">,&#123;&quot;movieId&quot;:1225993,&quot;stid&quot;:&quot;576591972453269000_a1225993_c11&quot;&#125;]</span><br><span class="line">,&quot;total&quot;:31</span><br><span class="line">,&quot;movieList&quot;:[</span><br><span class="line">&#123;&quot;id&quot;:503342,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/c437c3e340eff266f5cc7dcc79bead6b2406517.jpg&quot;,&quot;version&quot;:&quot;v3d imax&quot;,&quot;nm&quot;:&quot;双子杀手&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:102860,&quot;star&quot;:&quot;威尔·史密斯,玛丽·伊丽莎白·温斯特德,克里夫·欧文&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;今天51家影院放映58场&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0&#125;</span><br><span class="line">,&#123;&quot;id&quot;:1230121,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/cddf92d0ac6a0db837a1bc488b241c42267927.jpg&quot;,&quot;version&quot;:&quot;v2d imax&quot;,&quot;nm&quot;:&quot;中国机长&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:9.4,&quot;globalReleased&quot;:true,&quot;wish&quot;:561040,&quot;star&quot;:&quot;张涵予,欧豪,杜江&quot;,&quot;rt&quot;:&quot;2019-09-30&quot;,&quot;showInfo&quot;:&quot;今天126家影院放映1637场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0&#125;</span><br><span class="line">,&#123;&quot;id&quot;:1249366,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/moviemachine/ff399baffe786445b96e4e3d24fe1eeb675719.jpg&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;航海王：狂热行动&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:337092,&quot;star&quot;:&quot;田中真弓,冈村明美,中井和哉&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;今天4家影院放映4场&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0&#125;</span><br><span class="line">,&#123;&quot;id&quot;:342146,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/6392cd350d00860921042cdac7f2ed797389667.jpg&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;犯罪现场&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:8.9,&quot;globalReleased&quot;:true,&quot;wish&quot;:110692,&quot;star&quot;:&quot;古天乐,张继聪,宣萱&quot;,&quot;rt&quot;:&quot;2019-10-12&quot;,&quot;showInfo&quot;:&quot;今天125家影院放映1369场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0&#125;</span><br><span class="line">,&#123;&quot;id&quot;:1277939,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/moviemachine/b2c5c74d33e45745fd3462e44b3698e18336620.jpg&quot;,&quot;version&quot;:&quot;v2d imax&quot;,&quot;nm&quot;:&quot;我和我的祖国&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:9.7,&quot;globalReleased&quot;:true,&quot;wish&quot;:578308,&quot;star&quot;:&quot;黄渤,张译,韩昊霖&quot;,&quot;rt&quot;:&quot;2019-09-30&quot;,&quot;showInfo&quot;:&quot;今天126家影院放映1201场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0&#125;</span><br><span class="line">,&#123;&quot;id&quot;:345419,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p1.meituan.net/w.h/moviemachine/c68e3fff79463952b33cbc1e1b45442b1772992.jpg&quot;,&quot;version&quot;:&quot;v3d imax&quot;,&quot;nm&quot;:&quot;沉睡魔咒2&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:227645,&quot;star&quot;:&quot;安吉丽娜·朱莉,艾丽·范宁,切瓦特·埃加福特&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;今天34家影院放映34场&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0&#125;</span><br><span class="line">,&#123;&quot;id&quot;:1250700,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/4c01895cfd53e82f7c3048c407974a6b4739229.jpg&quot;,&quot;version&quot;:&quot;v2d imax&quot;,&quot;nm&quot;:&quot;攀登者&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:9.4,&quot;globalReleased&quot;:true,&quot;wish&quot;:558579,&quot;star&quot;:&quot;吴京,章子怡,张译&quot;,&quot;rt&quot;:&quot;2019-09-30&quot;,&quot;showInfo&quot;:&quot;今天124家影院放映700场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0&#125;</span><br><span class="line">,&#123;&quot;id&quot;:1227005,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/980cddbf2fe1296ae3657c968e536ea56541174.png&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;侠路相逢&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:24896,&quot;star&quot;:&quot;姜武,邵兵,姚娆&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;2019-10-18 本周五上映&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0&#125;</span><br><span class="line">,&#123;&quot;id&quot;:1219701,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/c8c17eb7c9c82d189771e3bfdd4d95061444262.jpg&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;急速逃脱&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:7.7,&quot;globalReleased&quot;:true,&quot;wish&quot;:24799,&quot;star&quot;:&quot;沃坦·维尔克·默林,汉娜·赫茨施普龙,克里斯蒂安娜·保罗&quot;,&quot;rt&quot;:&quot;2019-10-12&quot;,&quot;showInfo&quot;:&quot;今天41家影院放映106场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0&#125;</span><br><span class="line">,&#123;&quot;id&quot;:1215348,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/6bce8da6f1daa7f69bed91cd00b049a42186478.jpg&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;天作谜案&quot;,&quot;preShow&quot;:true,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:18799,&quot;star&quot;:&quot;西达尔特·马尔霍特拉,索娜什·辛哈,阿克夏耶·坎纳&quot;,&quot;rt&quot;:&quot;2019-10-25&quot;,&quot;showInfo&quot;:&quot;2019-10-25 下周五上映&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0&#125;</span><br><span class="line">,&#123;&quot;id&quot;:1256872,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/db82e48befc1c7e2e98425165b2500d76222872.jpg&quot;,&quot;version&quot;:&quot;v3d&quot;,&quot;nm&quot;:&quot;为国而歌&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:8700,&quot;star&quot;:&quot;王雷,古力娜扎,海一天&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;2019-10-18 本周五上映&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0&#125;</span><br><span class="line">,&#123;&quot;id&quot;:1225993,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/cbfd89ee598b5837c7d6b7bb6f6d9e0a1744668.jpg&quot;,&quot;version&quot;:&quot;v3d&quot;,&quot;nm&quot;:&quot;雪人奇缘&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:9.3,&quot;globalReleased&quot;:true,&quot;wish&quot;:59473,&quot;star&quot;:&quot;汪可盈,张子枫,丹增·诺盖·特雷纳&quot;,&quot;rt&quot;:&quot;2019-10-01&quot;,&quot;showInfo&quot;:&quot;今天38家影院放映57场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<br>在<code>字段-&gt;路径</code>中如果要传递的值在第二层，那么$后面有2个点号，不加的话可能会传递不了值</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font size=&quot;4&quot; color=&quot;#1BC3FB&quot; face=&quot;楷体&quot;&gt;kettle 利用 HTTP Client 获取猫眼电影API近期上映相关信息，并解析json&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="大数据预处理" scheme="https://blog.yinuxy.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
    
    
      <category term="kettle" scheme="https://blog.yinuxy.com/tags/kettle/"/>
    
      <category term="HTTP Client" scheme="https://blog.yinuxy.com/tags/HTTP-Client/"/>
    
      <category term="json" scheme="https://blog.yinuxy.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1067-取石子游戏</title>
    <link href="https://blog.yinuxy.com/2019/10/09/OJContest/WythoffGame/"/>
    <id>https://blog.yinuxy.com/2019/10/09/OJContest/WythoffGame/</id>
    <published>2019-10-09T12:30:00.000Z</published>
    <updated>2019-12-03T11:20:04.622Z</updated>
    
    <content type="html"><![CDATA[<blockquote><center><font size="5" color="RED" face="楷体">威佐夫博弈（Wythoff Game）/巴什博弈（Bash Game）</font></center></blockquote><a id="more"></a><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><center><strong>Time Limit: 1000MS        Memory Limit: 10000K</strong></center><center><strong>Total Submissions: 1        Accepted: 1</strong></center>有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出对应也有若干行，每行包含一个数字1或0，如果最后你是胜者，则为1，反之，则为0。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2 1<br>8 4<br>4 7</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>0<br>1<br>0</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><a href="http://poj.org/searchproblem?field=source&key=NOI" target="_blank" rel="noopener">NOI</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><a href="https://baike.baidu.com/item/%E5%A8%81%E4%BD%90%E5%A4%AB%E5%8D%9A%E5%BC%88/19858256?fromtitle=%E5%A8%81%E4%BD%90%E5%A4%AB%E5%8D%9A%E5%A5%95&fromid=7139745&fr=aladdin" target="_blank" rel="noopener">威佐夫博弈（Wythoff’s game）</a>，是ACM题中常见的组合游戏中的一种，大致上是这样的：<br>比如有两堆石子，先设定一堆有 10，另一堆有 15 个，双方轮流取走一些石子，合法的取法有如下两种：</p><ol><li>在一堆石子中取走任意多颗；</li><li>在两堆石子中取走相同多的任意颗；</li></ol><p>约定取走最后一颗石子的人为赢家，求必胜策略。<br>有两堆各若干个物品，两个人轮流从某一堆或同时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜。如果甲面对（0，0），那么甲已经输了，这种局势我们称为奇异局势。前几个奇异局势是：（0，0）、（1，2）、（3，5）、（4，7）、（6，10）.可以看出,a0=b0=0,ak是未在前面出现过的最小自然数,而 bk=ak+k. 那么任给一个局势（a，b），怎样判断它是不是奇异局势呢？<br>我们有如下公式：<br> ak =[k（1+√5）/2]，bk= ak + k （k=0，1，2，…,n 方括号表示取整函数)<br>奇妙的是其中出现了黄金分割数（1+√5）/2 = 1。618…,因此,由ak，bk组成的矩形近似为黄金矩形，由于2/（1+√5）=（√5-1）/2，可以先求出j=[a（√5-1）/2]，若a=[j（1+√5）/2]，那么a = aj，bj = aj + j，若不等于，那么a = aj+1，bj+1 = aj+1+ j + 1，若都不是，那么就不是奇异局势。然后再按照上述法则进行，一定会遇到奇异局势。</p><h3 id="奇异局势的性质"><a href="#奇异局势的性质" class="headerlink" title="奇异局势的性质"></a>奇异局势的性质</h3><ol><li>任何自然数都包含在一个且仅有一个奇异局势中。<br>由于a[k]是未在前面出现过的最小自然数，所以有a[k] &gt; a[k-1] ，而 b[k]= a[k] + k &gt; a[k-1] + k &gt; a[k-1] + k - 1 = b[k-1] &gt; a[k-1] 。所以性质1成立。</li><li>任意操作都可将奇异局势变为非奇异局势。<br>事实上，若只改变奇异局势（a[k]，b[k]）的某一个分量，那么另一个分量不可能在其他奇异局势中，所以必然是非奇异局势。如果使（a[k]，b[k]）的两个分量同时减少，则由于其差不变，且不可能是其他奇异局势的差，因此也是非奇异局势。</li><li>采用适当的方法，可以将非奇异局势变为奇异局势。<br>假设面对的局势是（a,b），若 b = a，则同时从两堆中取走 a 个物体，就变为了奇异局势（0，0）；如果a = a[k] ，b &gt; b[k] 那么，取走b - b[k]个物体，即变为奇异局势；如果 a = a[k] ， b &lt; b[k] 则同时从两堆中拿走a-a[b-a]（注：这里b-a是a的下标， 不是a*(b-a)） 个物体变为奇异局势（ a[b-a], b-a+a[b-a]）；如果a &gt; a[k] ，b= a[k] + k 则从第一堆中拿走多余的数量a - a[k] 即可；如果a &lt; a[k] ，b= b[k],分两种情况，第一种，a=a[n] （n&lt; k）从第二堆里面拿走 b - b[n] 即可；第二种，a=b[n] （n &lt; k）从第二堆里面拿走 b - a[n] 即可。</li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from math import sqrt</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def solution(a ,b):</span><br><span class="line">    a = int(a)</span><br><span class="line">    b = int(b)</span><br><span class="line">    if a&lt;b :</span><br><span class="line">        a ^= b</span><br><span class="line">        b ^= a</span><br><span class="line">        a ^= b</span><br><span class="line">    k = a - b</span><br><span class="line">    a = int(k * (1 + sqrt(5)) / 2.0)</span><br><span class="line">    if a == b:</span><br><span class="line">        print(&quot;0\n&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;1\n&quot;)</span><br><span class="line"></span><br><span class="line">for line in sys.stdin:</span><br><span class="line">    line = line.strip()</span><br><span class="line">    a, b = line.strip().split(&apos; &apos;)</span><br><span class="line">    solution(a, b)</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line"> </span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">int a,b;</span><br><span class="line"> </span><br><span class="line">int main()&#123;</span><br><span class="line"> </span><br><span class="line">    //freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);</span><br><span class="line"> </span><br><span class="line">    while(~scanf(&quot;%d%d&quot;,&amp;a,&amp;b))&#123;</span><br><span class="line">        if(a&lt;b)&#123;</span><br><span class="line">            a^=b;</span><br><span class="line">            b^=a;</span><br><span class="line">            a^=b;</span><br><span class="line">        &#125;</span><br><span class="line">        int k=a-b;</span><br><span class="line">        a=(int)(k*(1+sqrt(5))/2.0);</span><br><span class="line">        if(a==b)</span><br><span class="line">            printf(&quot;0\n&quot;);</span><br><span class="line">        else</span><br><span class="line">            printf(&quot;1\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font size=&quot;5&quot; color=&quot;RED&quot; face=&quot;楷体&quot;&gt;威佐夫博弈（Wythoff Game）/巴什博弈（Bash Game）&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.yinuxy.com/categories/Algorithm/"/>
    
    
      <category term="ACM" scheme="https://blog.yinuxy.com/tags/ACM/"/>
    
      <category term="Wythoff&#39;s game" scheme="https://blog.yinuxy.com/tags/Wythoff-s-game/"/>
    
  </entry>
  
  <entry>
    <title>热烈庆祝中华人民共和国成立70周年</title>
    <link href="https://blog.yinuxy.com/2019/10/01/Anniversary/seventyanniversary/"/>
    <id>https://blog.yinuxy.com/2019/10/01/Anniversary/seventyanniversary/</id>
    <published>2019-10-01T00:30:00.000Z</published>
    <updated>2019-12-03T11:19:05.410Z</updated>
    
    <content type="html"><![CDATA[<p><marquee scrollamount="2" width="auto" height="45" scrolldely="10" align="absmiddle"><b><font style="font-weight: normal; font-size: 30pt; line-height: normal; font-style: normal; font-variant: normal" face="宋体" color="#ff0000"><b>热烈庆祝中华人民共和国成立七十周年</b></font></b></marquee></p><p></p><a id="more"></a><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/pageimg/anniversary.jpg"><center><font size="6" color="FF0000" face="楷体">热烈庆祝中华人民共和国成立七十周年</font></center><center><font size="6" color="FF0000" face="楷体">祝祖国母亲七十华诞生日快乐！</font></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;marquee scrollamount=&quot;2&quot; width=&quot;auto&quot; height=&quot;45&quot; scrolldely=&quot;10&quot; align=&quot;absmiddle&quot;&gt;&lt;b&gt;&lt;font style=&quot;font-weight: normal; font-size: 30pt; line-height: normal; font-style: normal; font-variant: normal&quot; face=&quot;宋体&quot; color=&quot;#ff0000&quot;&gt;&lt;b&gt;热烈庆祝中华人民共和国成立七十周年&lt;/b&gt;&lt;/font&gt;&lt;/b&gt;&lt;/marquee&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Comet OJ - Contest  \#11 eon题解</title>
    <link href="https://blog.yinuxy.com/2019/09/20/OJContest/number_theory/"/>
    <id>https://blog.yinuxy.com/2019/09/20/OJContest/number_theory/</id>
    <published>2019-09-20T12:30:00.000Z</published>
    <updated>2019-12-03T11:19:58.249Z</updated>
    
    <content type="html"><![CDATA[<blockquote><center><font size="5" color="#1BC3FB" face="楷体">在一上来动不动就用循环体我就剁手！</font></center></blockquote><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>「这次练习用的数也太大了吧，我怎么记得住。」线段树小声嘀咕着，「我用所有的手指也只能数到 10231023 。」</p><p>「这可不是数据结构会作出的发言。」链表指引着面前的少女把数写进她的本体——一棵二叉树的图样中。有光自最浅的节点倾泻而下。「接下来你应该把这个十进制数按数位拆开，重新排列出一个最大的数，然后算出这个数和原数的差。」她正要问线段树是否听懂了任务，却被线段树的发问打断了。</p><p>「上一代数据结构，他们会区间排序，能轻松地击溃那些题目，是这样吗？他们于代码的溪流中降生，在算法的庇佑下抽枝长叶，以天赐的技巧征服了我们一代至今无法涉足的外界，是这样吗？」</p><p>链表沉默半晌，转移了话题：「你还不会输出，那便直接告诉我练习的答案对 10 取模的值。」</p><p>你对这个种族的历史毫无兴趣，只想知道练习题的答案，也就是说——</p><hr><h3 id="简洁题意："><a href="#简洁题意：" class="headerlink" title="简洁题意："></a>简洁题意：</h3><p>对于一个数 nn ，记 mm 为把 nn 的各数位重排序得到的最大的数，求 m-nm−n 对 1010 取模的值(也就是 m-nm−n 除以 10 的余数)。</p><p>举例来说，当 n=213 时， 各数位重排序有 123、132、213、231、312、321 六种可能，其中最大的数字是 321 ，所以 m=321，输出的答案即为 (m-n) = 108 对 10 取模的结果，也就是 8。</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><p>一行一个整数 n (0 &lt; n &lt; 10<sup>10<sup>6</sup></sup> ,也就是说 n 是位数不超过 10n<sup>6</sup> 的正整数。)。</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><p>一个整数，表示答案。</p><table><thead><tr><th>样例输入 1</th><th>样例输出 1</th></tr></thead><tbody><tr><td>213</td><td>8</td></tr></tbody></table><p>样例解释 1<br>此样例的解释在题目描述里。</p><table><thead><tr><th>样例输入 2</th><th>样例输出 2</th></tr></thead><tbody><tr><td>71806291</td><td>9</td></tr></tbody></table><p>样例解释 2<br>答案为 98762110−71806291=26955819≡9(mod10) 。</p><table><thead><tr><th>样例输入 2</th><th>样例输出 2</th></tr></thead><tbody><tr><td>12345678912345678912345</td><td>6</td></tr></tbody></table><p>样例解释 3<br>请特别注意， n 的值可能非常大，无法用 32-bits 或 64-bits 整数储存。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><font size="4" color="000000" face="黑体">一看到这个题第一眼我以为就是卡数据想都没想就选了Python用了两个循环就交了，结果当然是WA了，结果卡出1900ms，后来仔细审了下题，因本题数据非常大，而且所求只与数位有关，然后结果就是最大数的最低位（即原数的数位的最小值）和原数最低位的差。这样它的时间复杂度就为O(n)。</font></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num = input()</span><br><span class="line">num = list(num)</span><br><span class="line">for i in num:</span><br><span class="line">    i = int(i)</span><br><span class="line">minnum = min(num)</span><br><span class="line">print((int(minnum) - int(num[len(num)-1]))%10)</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line"> </span><br><span class="line">using namespace std;</span><br><span class="line">typedef unsigned long long ull;</span><br><span class="line">const int N=1e7;</span><br><span class="line">int a[N];</span><br><span class="line">int main()&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    int x=s.size();</span><br><span class="line">    int y;</span><br><span class="line">    y=s[x-1]-&apos;0&apos;;</span><br><span class="line">    int minn=0x3f3f3f3f;</span><br><span class="line">    for(int i=0;i&lt;s.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(s[i]-&apos;0&apos;&lt;minn) minn=s[i]-&apos;0&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    int p=minn-y;</span><br><span class="line">    if(p==0) cout&lt;&lt;0;</span><br><span class="line">    else cout&lt;&lt;p+10; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font size=&quot;5&quot; color=&quot;#1BC3FB&quot; face=&quot;楷体&quot;&gt;在一上来动不动就用循环体我就剁手！&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blog.yinuxy.com/categories/Algorithm/"/>
    
    
      <category term="数论" scheme="https://blog.yinuxy.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="ACM" scheme="https://blog.yinuxy.com/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>用Python来分析一波周董新曲《说好不哭》为何如此火爆！</title>
    <link href="https://blog.yinuxy.com/2019/09/20/Reptiles/script_dontcry/"/>
    <id>https://blog.yinuxy.com/2019/09/20/Reptiles/script_dontcry/</id>
    <published>2019-09-20T12:30:00.000Z</published>
    <updated>2019-12-03T11:20:12.929Z</updated>
    
    <content type="html"><![CDATA[<blockquote><center><font size="5" color="FF0000" face="楷体">用Python来分析一波周董新曲《说好不哭》为何如此火爆！</font></center></blockquote><a id="more"></a><p><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_1.jpg" alt="png"></fancybox></p><p>9 月 16 日晚间，周董在朋友圈发布了最新单曲《说好不哭》</p><p>发布后，真的让一波人哭了</p><p>一群想抢鲜听的小伙伴直接泪奔</p><p>因为 QQ 音乐直接被搞崩了</p><p>没想到干翻 QQ 音乐的不是网易云音乐</p><p>也不是虾米音乐</p><p>而是周董！</p><p>周董成成功地凭一己之力干翻了 QQ 音乐</p><p>那么听过周董新歌后的小伙伴都是怎么评价的呢？</p><p>这里，我们获取了 QQ 音乐的近 20W 条评论数据进行分析</p><p>看看其中有哪些有趣的东西</p><h1 id="一、数据获取"><a href="#一、数据获取" class="headerlink" title="一、数据获取"></a>一、数据获取</h1><h2 id="1、请求分析"><a href="#1、请求分析" class="headerlink" title="1、请求分析"></a>1、请求分析</h2><p>在 QQ 网页版直接搜索『说好不哭』<br>很容易就能找到单曲页面<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_2.jpg" alt="png"></fancybox></p><center><font size="1" color="000000" face="楷体">说好不哭</font></center><p>拉到页面最下方<br>可以看到评论的分页查看按钮<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_3.jpg" alt="png"></fancybox></p><center><font size="1" color="000000" face="楷体">分页查看</font></center><p>按下 F12 点击第二页<br>在请求流中就可以看到对应的请求<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_4.jpg" alt="png"></fancybox></p><center><font size="1" color="000000" face="楷体">评论请求</font></center><p>其中可以看到两个重要参数：&lt;fontcolor = “FF0000”&gt;pagenum 和 &lt;fontcolor = “FF0000”&gt;pagesize</p><p>将请求 copy 到 Postman 中进行测试<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_5.jpg" alt="png"></fancybox></p><center><font size="1" color="000000" face="楷体">Postman测试</font></center><p>发现可以直接获取到数据<br>连 Header 都不需要添加<br>这里尝试对请求参数进行了精简<br>最终只需要如下几个参数即可<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_6.jpg" alt="png"></fancybox></p><center><font size="1" color="000000" face="楷体">参数精简</font></center><p>从 Postman 中可以直接获取到对应的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;https://c.y.qq.com/base/fcgi-bin/fcg_global_comment_h5.fcg&quot;</span><br><span class="line"></span><br><span class="line">querystring = &#123;&quot;biztype&quot;:&quot;1&quot;,&quot;topid&quot;:&quot;237773700&quot;,&quot;cmd&quot;:&quot;8&quot;,&quot;pagenum&quot;:&quot;1&quot;,&quot;pagesize&quot;:&quot;25&quot;&#125;</span><br><span class="line"></span><br><span class="line">response = requests.request(&quot;GET&quot;, url, params=querystring)</span><br><span class="line"></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>这里是单页评论的获取<br>所有评论的获取只需递增 pagenum 即可</p><h2 id="2、数据解析"><a href="#2、数据解析" class="headerlink" title="2、数据解析"></a>2、数据解析</h2><p>返回数据中有很多暂时不需要的字段<br>这里我们只取其中的用户名、评论时间、评论内容、点赞数<br>对应如下字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;nick&quot;: &quot;丨那壹刻永遠消失\&quot;\&quot;&quot;,</span><br><span class="line">    &quot;praisenum&quot;: 1,</span><br><span class="line">    &quot;rootcommentcontent&quot;: &quot;越听越好听怎么回事！&quot;,</span><br><span class="line">    &quot;time&quot;: 1568729836,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于数据量较大 这里我们暂时将数据存放在 Excel 中<br>一来无须依赖外部数据库<br>二来可以使用 Excel 对数据进行二次处理<br>数据存储代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def file_do(list_info, file_name):</span><br><span class="line">    # 获取文件大小</span><br><span class="line">    if not os.path.exists(file_name):</span><br><span class="line">        wb = openpyxl.Workbook()</span><br><span class="line">        page = wb.active</span><br><span class="line">        page.title = &apos;jay&apos;</span><br><span class="line">        page.append([&apos;昵称&apos;,&apos;时间&apos;,&apos;点赞数&apos;,&apos;评论&apos;])</span><br><span class="line">    else:</span><br><span class="line">        wb = openpyxl.load_workbook(file_name)</span><br><span class="line">        page = wb.active</span><br><span class="line">    for info in list_info:</span><br><span class="line">        try:</span><br><span class="line">            page.append(info)</span><br><span class="line">        except Exception:</span><br><span class="line">            print(info)</span><br><span class="line">    wb.save(filename=file_name)</span><br></pre></td></tr></table></figure><h1 id="二、数据可视化"><a href="#二、数据可视化" class="headerlink" title="二、数据可视化"></a>二、数据可视化</h1><h2 id="1、各时段的评论数"><a href="#1、各时段的评论数" class="headerlink" title="1、各时段的评论数"></a>1、各时段的评论数</h2><p>首先我们对评论按小时区间进行汇总<br>由于时间粒度比较小，这里对时间粒度进行了一些处理<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_7.jpg" alt="png"></fancybox></p><center><font size="1" color="000000" face="楷体">评价人数走势图</font></center><p>周董的新曲是在 9.16 号 23 点准时发布的<br>可以看出在发布后的一个小时内（23:00-24:00）<br>评论数量达到了高峰<br>占了总评论数的一半以上<br>另外看了一眼 9.16 23 点之前的评论也很有意思<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_8.jpg" alt="png"></fancybox></p><p>一种搬好小板凳嗑着瓜子坐等的既视感</p><h2 id="2、大家都在说什么"><a href="#2、大家都在说什么" class="headerlink" title="2、大家都在说什么"></a>2、大家都在说什么</h2><p>词云生成的方法有很多<br>可以用代码生成<br>也可以用一些在线工具<br>这里我就使用了在线词云工具：wordart<br>后续可以给大家单独再普及一下<br>生成效果如下<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_9.jpg" alt="png"></fancybox></p><center><font size="1" color="000000" face="楷体">词云</font></center><p>周杰伦、杰伦字眼很明显<br>还有大量跑来『打卡』的<br>『好听』、『来了』、『哭了』、『爱了』<br>其中少不了的还有『青春』<br>另外『阿信』的出现估计给了很多人惊喜</p><h2 id="3、大家都点赞了哪些评论"><a href="#3、大家都点赞了哪些评论" class="headerlink" title="3、大家都点赞了哪些评论"></a>3、大家都点赞了哪些评论</h2><p>我们以点赞数对评论进行了排序<br>排名靠前的评论是如下一些<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_10.jpg" alt="png"></fancybox></p><center><font size="1" color="000000" face="楷体">评论排名</font></center><p>另外，QQ 音乐官方也会放出精彩评论<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_11.jpg" alt="png"></fancybox></p><center><font size="1" color="000000" face="楷体">热心网友昀恺丶</font></center><p><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_12.jpg" alt="png"></fancybox></p><center><font size="1" color="000000" face="楷体">凉城</font></center><p><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_13.jpg" alt="png"></fancybox></p><center><font size="1" color="000000" face="楷体">蜗牛..</font></center><p>对比下可以看出和我们获取到的数据是比较一致的<br>只不过官方并不是按点赞个数进行排名的<br>看得出来这些排名靠前的大都是在回忆青春<br>这些评论之所以能够得到大家的共鸣<br>也许他们的青春里都有一个周杰伦吧</p><h1 id="三、附件"><a href="#三、附件" class="headerlink" title="三、附件"></a>三、附件</h1><p><a href="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/jav.csv" target="_blank" rel="noopener">QQ音乐《说好不哭》评论抓取</a></p><h1 id="四、源码"><a href="#四、源码" class="headerlink" title="四、源码"></a>四、源码</h1><h2 id="1、评论爬取源码"><a href="#1、评论爬取源码" class="headerlink" title="1、评论爬取源码"></a>1、评论爬取源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">import requests,json,time,uuid,os,openpyxl</span><br><span class="line">import re</span><br><span class="line">from openpyxl.cell.cell import ILLEGAL_CHARACTERS_RE</span><br><span class="line"></span><br><span class="line">info_list = []</span><br><span class="line"></span><br><span class="line">def get_comment_info():</span><br><span class="line">    global info_list</span><br><span class="line">    pagenum = 1</span><br><span class="line">    while(True):</span><br><span class="line">        print(pagenum)</span><br><span class="line">        url = &quot;https://c.y.qq.com/base/fcgi-bin/fcg_global_comment_h5.fcg&quot;</span><br><span class="line"></span><br><span class="line">        querystring = &#123;&quot;biztype&quot;:&quot;1&quot;,&quot;topid&quot;:&quot;237773700&quot;,&quot;cmd&quot;:&quot;8&quot;,&quot;pagenum&quot;:pagenum,&quot;pagesize&quot;:&quot;25&quot;&#125;</span><br><span class="line"></span><br><span class="line">        response = requests.request(&quot;GET&quot;, url, params=querystring)</span><br><span class="line"></span><br><span class="line">        resp = json.loads(response.text)</span><br><span class="line"></span><br><span class="line">        commentlist = resp.get(&apos;comment&apos;).get(&apos;commentlist&apos;)</span><br><span class="line"></span><br><span class="line">        if not commentlist or len(commentlist) == 0:</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        for comment in commentlist:</span><br><span class="line">            info = []</span><br><span class="line">            one_name = comment.get(&apos;nick&apos;)</span><br><span class="line">            # 将 UNIX 时间戳转化为普通时间格式</span><br><span class="line">            if comment.get(&apos;time&apos;) &lt; 1568735760:</span><br><span class="line">                return</span><br><span class="line">            time_local = time.localtime(comment.get(&apos;time&apos;))</span><br><span class="line">            one_time = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time_local)</span><br><span class="line">            one_praisenum = comment.get(&apos;praisenum&apos;)</span><br><span class="line">            one_comment = comment.get(&apos;rootcommentcontent&apos;)</span><br><span class="line">            ILLEGAL_CHARACTERS_RE.sub(r&apos;&apos;, one_comment)</span><br><span class="line">            ILLEGAL_CHARACTERS_RE.sub(r&apos;&apos;, one_name)</span><br><span class="line">            info = [one_name, one_time, one_praisenum, one_comment]</span><br><span class="line">            # print(info)</span><br><span class="line">            info_list.append(info)</span><br><span class="line">        pagenum += 1</span><br><span class="line">            # print(comment.get(&apos;nick&apos;))</span><br><span class="line">            # print(comment.get(&apos;rootcommentcontent&apos;))</span><br><span class="line">            # print(comment.get(&apos;time&apos;))</span><br><span class="line">            # print(comment.get(&apos;praisenum&apos;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def file_do(file_name):</span><br><span class="line">    # 获取文件大小</span><br><span class="line">    if not os.path.exists(file_name):</span><br><span class="line">        wb = openpyxl.Workbook()</span><br><span class="line">        page = wb.active</span><br><span class="line">        page.title = &apos;jay&apos;</span><br><span class="line">        page.append([&apos;昵称&apos;,&apos;时间&apos;,&apos;点赞数&apos;,&apos;评论&apos;])</span><br><span class="line">    else:</span><br><span class="line">        wb = openpyxl.load_workbook(file_name)</span><br><span class="line">        page = wb.active</span><br><span class="line">    for info in info_list:</span><br><span class="line">        try:</span><br><span class="line">            page.append(info)</span><br><span class="line">        except Exception:</span><br><span class="line">            print(info)</span><br><span class="line">            pass</span><br><span class="line">        continue</span><br><span class="line">    wb.save(filename=file_name)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    file_name = str(uuid.uuid1()) + &apos;.xlsx&apos;</span><br><span class="line">    get_comment_info()</span><br><span class="line">    file_do(file_name)</span><br><span class="line">    print(&apos;data has saved in &#123;&#125;&apos;.format(file_name))</span><br></pre></td></tr></table></figure><h2 id="2、生成HTML图表源码"><a href="#2、生成HTML图表源码" class="headerlink" title="2、生成HTML图表源码"></a>2、生成HTML图表源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># 导入Style类，用于定义样式风格</span><br><span class="line">from pyecharts import Style</span><br><span class="line">import json</span><br><span class="line"># 导入Geo组件，用于生成柱状图</span><br><span class="line">from pyecharts import Bar</span><br><span class="line"># 导入Counter类，用于统计值出现的次数</span><br><span class="line">from collections import Counter</span><br><span class="line"></span><br><span class="line">import fileinput,re</span><br><span class="line"></span><br><span class="line"># 设置全局主题风格</span><br><span class="line">from pyecharts import configure</span><br><span class="line">configure(global_theme=&apos;wonderland&apos;)</span><br><span class="line"></span><br><span class="line"># 数据可视化</span><br><span class="line">dates = []</span><br><span class="line">comment_text = &quot;&quot;</span><br><span class="line"></span><br><span class="line">def render():</span><br><span class="line">    global comment_text</span><br><span class="line">    with open(&apos;jay.csv&apos;, mode=&apos;r&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">        rows = f.readlines()</span><br><span class="line">        for row in rows[1:]:</span><br><span class="line">            if row.count(&apos;,&apos;) != 3:</span><br><span class="line">                continue</span><br><span class="line">            elements = row.split(&apos;,&apos;)</span><br><span class="line">            user = elements[0]</span><br><span class="line">            date = elements[1]</span><br><span class="line">            if &apos;2019&apos; not in date:</span><br><span class="line">                continue</span><br><span class="line">            like = elements[2]</span><br><span class="line">            comment = elements[3]</span><br><span class="line">            if &apos;2019-09-14&apos; in date:</span><br><span class="line">                dates.append(&apos;2019-09-14&apos;)</span><br><span class="line">            elif &apos;2019-09-15&apos; in date:</span><br><span class="line">                dates.append(&apos;2019-09-15&apos;)</span><br><span class="line">            elif &apos;2019-09-16 0&apos; in date or &apos;2019-09-16 1&apos; in date or &apos;2019-09-16 20&apos; in date or &apos;2019-09-16 21&apos; in date:</span><br><span class="line">                dates.append(&apos;2019-09-16 0-21&apos;)</span><br><span class="line">            elif &apos;2019-09-18&apos; in date:</span><br><span class="line">                continue</span><br><span class="line">            else:</span><br><span class="line">                dates.append(date)</span><br><span class="line">            comment_text += comment</span><br><span class="line"></span><br><span class="line">    with open(&quot;comment_text.txt&quot;,&quot;w&quot;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">        f.write(comment_text)</span><br><span class="line"></span><br><span class="line">    date_data = Counter(dates).most_common()</span><br><span class="line">    # 按日期进行排序</span><br><span class="line">    date_data = sorted(date_data)</span><br><span class="line">    # print(data)</span><br><span class="line"></span><br><span class="line">    # 根据评分数据生成柱状图</span><br><span class="line">    bar = Bar(&apos;评价人数走势图&apos;, &apos;数据来源：QQ音乐网页版&apos;,</span><br><span class="line">              title_pos=&apos;center&apos;, width=800, height=600)</span><br><span class="line">    attr, value = bar.cast(date_data)</span><br><span class="line">    bar.add(&apos;&apos;, attr, value, is_visualmap=False, visual_range=[0, 3500], visual_text_color=&apos;#fff&apos;, is_more_utils=True,</span><br><span class="line">            xaxis_interval=0, xaxis_rotate=30,is_label_show=True,xaxis_label_textsize=8, label_text_size=8)</span><br><span class="line"></span><br><span class="line">    bar.render(</span><br><span class="line">        &apos;picture\评价人数走势图.html&apos;)</span><br><span class="line"></span><br><span class="line">render()</span><br></pre></td></tr></table></figure><p>最后，一起来听一下这首歌吧~</p><blockquote><p><a href="https://y.qq.com/n/yqq/song/001qvvgF38HVc4.html" target="_blank" rel="noopener">土豪通道</a><br><a href="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/music/Jack-cry.mp3" target="_blank" rel="noopener">平民通道</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font size=&quot;5&quot; color=&quot;FF0000&quot; face=&quot;楷体&quot;&gt;用Python来分析一波周董新曲《说好不哭》为何如此火爆！&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.yinuxy.com/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.yinuxy.com/tags/Python/"/>
    
      <category term="爬虫" scheme="https://blog.yinuxy.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="数据分析" scheme="https://blog.yinuxy.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Windows(10)环境下搭建JSP开发环境</title>
    <link href="https://blog.yinuxy.com/2019/09/04/Lessons/JSP_init/"/>
    <id>https://blog.yinuxy.com/2019/09/04/Lessons/JSP_init/</id>
    <published>2019-09-04T00:30:00.000Z</published>
    <updated>2019-12-03T11:19:16.624Z</updated>
    
    <content type="html"><![CDATA[<p>JSP是Java Server Page的缩写，是由Sun Microsystems公司主导创建的一种动态网页技术标准。JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成HTML、XML或其他格式文档的Web网页，然后返回给请求者。JSP技术以Java语言作为脚本语言，为用户的HTTP请求提供服务，并能与服务器上的其它Java程序共同处理复杂的业务需求。目前，JSP已经成为开发动态网站的主流技术。</p><a id="more"></a><h1 id="安装配置JSP运行环境"><a href="#安装配置JSP运行环境" class="headerlink" title="安装配置JSP运行环境"></a>安装配置JSP运行环境</h1><h2 id="一、-安装配置JDK"><a href="#一、-安装配置JDK" class="headerlink" title="一、  安装配置JDK"></a>一、  安装配置JDK</h2><p>进入<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">JDK官网</a>选择Java SE Development Kit 8u172，根据自己的电脑选择32位或者64位进行下载。<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_1.png" alt="image.png"></fancybox><br>具体配置教程参考<a href="https://blog.csdn.net/write6/article/details/79136388" target="_blank" rel="noopener">《JDK 安装 Java环境变量配置 详细教程》</a></p><h2 id="二、-安装配置Tomcat"><a href="#二、-安装配置Tomcat" class="headerlink" title="二、  安装配置Tomcat"></a>二、  安装配置Tomcat</h2><p>1、进入<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">Tomcat官网</a>安装下载,这里演示安装下载的名称是“apache-tomcat-9.0.24.exe”。<br>2、下载完毕后，就可以在需要编译和运行Java程序的计算机安装Tomcat服务器，具体步骤如下：<br>（1）   双击“apache-tomcat-9.0.24.exe”文件开始安装。在弹出的安装向导对话框中，单击“Next”按钮，将弹出如下图所示的“许可协议”对话框。<fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_2.png" alt="image.png"></fancybox><br>一直next就行</p><p>（2）   这里采用默认的组件安装，如果不懂就按默认的设置。<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_3.png" alt="image.png"></fancybox></p><p>（3）   这里是Tomcat默认的端口号，不喜欢这个可以自己设置成别的，但是千万别与系统端口号重复！<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_4.png" alt="image.png"></fancybox><br>（4）接下来就一直next就行，路径默认就行。</p><h2 id="三、-Tomcat环境变量Catalina-Home配置"><a href="#三、-Tomcat环境变量Catalina-Home配置" class="headerlink" title="三、 Tomcat环境变量Catalina_Home配置"></a>三、 Tomcat环境变量Catalina_Home配置</h2><p>1、CATALINA_HOME是TOMCAT安装路径的别名，目的是为了方便使用TOMCAT</p><p>2、计算机&gt;属性&gt;环境变量, 新建环境变量。变量名为CATALINA_HOME ,变量值tomcat的解压目录，我电脑上的为：“D:\Function\Apache Software Foundation\Tomcat 9.0”，注意后面不用多加“\”或者“;”<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_5.png" alt="image.png"></fancybox></p><p>3、在环境变量Path中，新增加“%CATALINA_HOME%\bin\”<br>4、打开你放置刚才下载的Tomcat的bin目录，找到“startup.bat”文件双击，然后就会弹出一个DOS窗口显示Tomcat启动的进程状态。<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_6.png" alt="image.png"></fancybox></p><p><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_7.png" alt="image.png"></fancybox></p><p>5、测试Tomcat是否配置成功：打开浏览器，输入在地址栏中输入：“<a href="http://localhost:8080”" target="_blank" rel="noopener">http://localhost:8080”</a> 运行结果如下图所示即为配置成功！（因为Tomcat已经在运行再次打开会报错）<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_8.png" alt="image.png"></fancybox><br>6、关闭tomcat:进入命令行cmd，输入shutdown.bat</p><h2 id="四、Eclipse的安装配置"><a href="#四、Eclipse的安装配置" class="headerlink" title="四、Eclipse的安装配置"></a>四、Eclipse的安装配置</h2><p>1、进入<a href="https://www.eclipse.org/" target="_blank" rel="noopener">eclipse官网</a>下载eclipse-inst-win64.exe<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_9.png" alt="image.png"></fancybox></p><p>根据自己的系统版本选择镜像下载<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_10.png" alt="image.png"></fancybox><br>选择国内镜像下载</p><p>2、运行eclipse-inst-win64.exe<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_11.png" alt="image.png"></fancybox></p><p>选择第一个<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_12.png" alt="image.png"></fancybox><br>选择Java目录和eclipse安装目录，然后点击install</p><p>3、安装完成后打开eclipse<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_13.png" alt="image.png"></fancybox><br>如果新建项目中没有Web选项，这时候就需要我们自己去添加web插件</p><p>4、添加Web插件：依次点击【Help】-&gt;【Install New Software】，在【work with】下拉框中选择自己的eclipse版本<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_14.png" alt="image.png"></fancybox><br>在下面的下拉框中勾选 Web, XML, Java EE and OSGi Enterprise Development；</p><p>然后点击next，耐心等待下载<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_15.png" alt="image.png"></fancybox><br>在这一步的时候点击同意，然后点击finish</p><p>安装这几个插件，耐心等待……..安装完成之后，会自动弹出对话框让你重启eclipse，重启下就行，此时，就可以新建web项目了<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_16.png" alt="image.png"></fancybox></p><h2 id="五、新建jsp文件"><a href="#五、新建jsp文件" class="headerlink" title="五、新建jsp文件"></a>五、新建jsp文件</h2><p>1、新建jsp文件：依次点击【File】-&gt;【New】-&gt;【Project】；在弹出的列表中点击Web，选择 【Dynamic Web Project】<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_17.png" alt="image.png"></fancybox></p><p>然后点击【Next】输入项目名，然后点击【Finish】<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_18.png" alt="image.png"></fancybox></p><p>然后打开创建的项目，选择【WebContent】右键新建【JSP File】<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_19.png" alt="image.png"></fancybox></p><p>新建的文件报错<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_20.png" alt="image.png"></fancybox></p><p>右键点击项目—&gt;【Build Path】—&gt;【Configure Build Path】<br>点击【libraries】-&gt;【Add Library】-&gt;【Server Runtime】-&gt;【Next】-&gt;【Finish】-&gt;【Apply and Close】<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_21.png" alt="image.png"></fancybox></p><p>接下来更改编码：导航栏点击【Windows】-&gt;【Preference】-&gt;【JSP File】 Encoding选择“UTF-8”，然后点击应用并关闭<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_22.png" alt="image.png"></fancybox></p><p>接下来添加Tomcat：点击【Server】，再点击蓝色字体，在弹出的列表框中点击【Apache】，选择你安装的Tomcat，这里我安装的是【Tomcat v9.0.24】，然后点击next<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_23.png" alt="image.png"></fancybox></p><p>在这里需要选择安装的Tomcat的文件路径，填好后点击Next<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_24.png" alt="image.png"></fancybox></p><p>点击创建的项目名即可添加到配置中，然后点击Finish<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_25.png" alt="image.png"></fancybox></p><p>接下来就可以创建一个简单的JSP实例来测试拉；<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_26.png" alt="image.png"></fancybox></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; contentType=&quot;text/html; charset=UTF-8&quot;%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">//计算1-100之间的和,并输出 到客户端浏览器中 </span><br><span class="line">int sum=0;</span><br><span class="line">for(int i=1;i&lt;=100;i++)</span><br><span class="line">sum+=i;</span><br><span class="line">out.print(&quot;1-100的和为：&quot;+sum+&quot;\n&quot;);</span><br><span class="line"> %&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;title&gt;My JSP &apos;GreetingJsp.jsp&apos; starting page&lt;/title&gt;</span><br><span class="line">    </span><br><span class="line">&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;    </span><br><span class="line">&lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;description&quot; content=&quot;This is my page&quot;&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;</span><br><span class="line">--&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;br&gt;这是我的第一个JSP页面 &lt;br&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">     &lt;td&gt;7&lt;/td&gt;</span><br><span class="line">     &lt;td&gt;8&lt;/td&gt;</span><br><span class="line">     &lt;td&gt;9&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">     &lt;td&gt;4&lt;/td&gt;</span><br><span class="line">     &lt;td&gt;5&lt;/td&gt;</span><br><span class="line">     &lt;td&gt;6&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">     &lt;td&gt;1&lt;/td&gt;</span><br><span class="line">     &lt;td&gt;2&lt;/td&gt;</span><br><span class="line">     &lt;td&gt;3&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>右键【Run As】-&gt;【Run on Server】<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_27.png" alt="image.png"></fancybox><br>运行成功！一个简单的JSP页面就生成啦</p><p>复制蓝色背景内的链接，打开浏览器即可预览啦<br><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/jspone/output_28.png" alt="image.png"></fancybox></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSP是Java Server Page的缩写，是由Sun Microsystems公司主导创建的一种动态网页技术标准。JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成HTML、XML或其他格式文档的Web网页，然后返回给请求者。JSP技术以Java语言作为脚本语言，为用户的HTTP请求提供服务，并能与服务器上的其它Java程序共同处理复杂的业务需求。目前，JSP已经成为开发动态网站的主流技术。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JSP" scheme="https://blog.yinuxy.com/categories/JSP/"/>
    
    
      <category term="JSP" scheme="https://blog.yinuxy.com/tags/JSP/"/>
    
      <category term="JSP实用教程" scheme="https://blog.yinuxy.com/tags/JSP%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib - Pyplot 教程</title>
    <link href="https://blog.yinuxy.com/2019/08/10/Lessons/matplotlib_Pyplot/"/>
    <id>https://blog.yinuxy.com/2019/08/10/Lessons/matplotlib_Pyplot/</id>
    <published>2019-08-10T00:30:00.000Z</published>
    <updated>2019-12-03T11:19:27.116Z</updated>
    
    <content type="html"><![CDATA[<p>提供类似MATLAB的绘图框架。<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibPyplot/fengmian.png" alt="png"></p><a id="more"></a><h1 id="Pyplot-教程"><a href="#Pyplot-教程" class="headerlink" title="Pyplot 教程"></a>Pyplot 教程</h1><p>关于pylot接口的介绍。</p><h2 id="pyplot-简介"><a href="#pyplot-简介" class="headerlink" title="pyplot 简介"></a>pyplot 简介</h2><p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">matplotlib.pyplot</a> 是命令样式函数的集合，使matplotlib像MATLAB一样工作。 每个pyplot函数对图形进行一些更改：例如，创建图形，在图形中创建绘图区域，在绘图区域中绘制一些线条，用标签装饰图形等。</p><p>在<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">matplotlib.pyplot</a>中，各种状态在函数调用中保留，以便跟踪当前图形和绘图区域等内容，并且绘图函数指向当前轴（请注意“轴”在此处以及在大多数位置 文档是指<a href="https://matplotlib.org/tutorials/introductory/usage.html#figure-parts" target="_blank" rel="noopener">图形的轴部分</a>，而不是多个轴的严格数学术语。</p><p>注意: pyplot API通常不如面向对象的API灵活。您在此处看到的大多数函数调用也可以作为Axes对象中的方法调用。 我们建议您浏览教程和示例以了解其工作原理。</p><p>使用pyplot生成可视化非常快速：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">plt.ylabel(<span class="string">'some numbers'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>&lt;Figure size 640x480 with 1 Axes&gt;</code></pre><p>您可能想知道为什么x轴的范围是0-3，y轴的范围是1-4。如果为<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot" target="_blank" rel="noopener">plot()</a>命令提供单个列表或数组，则matplotlib假定它是一系列y值，并自动为您生成x值。由于python范围以0开头，因此默认的x向量与y具有相同的长度，但从0开始。因此x数据为 [0,1,2,3]。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>])</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x1de069a2a20&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibPyplot/output_3_1.png" alt="png"></p><h2 id="格式化绘图的样式"><a href="#格式化绘图的样式" class="headerlink" title="格式化绘图的样式"></a>格式化绘图的样式</h2><p>对于每对x，y对的参数，有一个可选的第三个参数，它是指示绘图的颜色和线型的格式字符串。格式字符串的字母和符号来自MATLAB，您可以将颜色字符串与线型字符串连接起来。默认格式字符串为“b-”，为蓝色实线。例如，要用红色圆圈绘制上述内容，您将发出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#plt.plot(x,y,format_string,**kwargs) </span></span><br><span class="line"><span class="comment">#x轴数据，y轴数据，format_string控制曲线的格式字串 </span></span><br><span class="line"><span class="comment">#format_string 由颜色字符，风格字符，和标记字符 </span></span><br><span class="line"></span><br><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>], <span class="string">'ro'</span>)</span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">20</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibPyplot/output_5_0.png" alt="png"></p><p>有关线型和格式字符串的完整列表，请参阅 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot" target="_blank" rel="noopener">plot()</a> 文档。 上例中的 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.axis.html#matplotlib.pyplot.axis" target="_blank" rel="noopener">axis()</a> 命令采用 [xmin, xmax, ymin, ymax] 列表并指定轴的视口。</p><p>如果matplotlib仅限于使用列表，那么数字处理将毫无用处。通常，您将使用numpy数组。实际上，所有序列都在内部转换为numpy数组。 下面的示例说明了使用数组在一个命令中绘制具有不同格式样式的多行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔200ms均匀采样一次</span></span><br><span class="line">t = np.arange(<span class="number">0.</span>, <span class="number">5.</span>, <span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 红色的破折号，蓝色的正方形和绿色的三角形</span></span><br><span class="line">plt.plot(t, t, <span class="string">'r--'</span>, t, t**<span class="number">2</span>, <span class="string">'bs'</span>, t, t**<span class="number">3</span>, <span class="string">'g^'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibPyplot/output_7_0.png" alt="png"></p><h2 id="使用关键字字符串绘图"><a href="#使用关键字字符串绘图" class="headerlink" title="使用关键字字符串绘图"></a>使用关键字字符串绘图</h2><p>在某些情况下，您可以使用允许您使用字符串访问特定变量的格式的数据。例如，使用 <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.recarray.html#numpy.recarray" target="_blank" rel="noopener">numpy.recarray</a> 或<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html#pandas.DataFrame" target="_blank" rel="noopener">pandas.DataFrame</a>。</p><p>Matplotlib允许您使用data关键字参数提供此类对象。如果提供，那么您可以生成包含与这些变量对应的字符串的图。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, *, data=None, **kwargs)</span><br></pre></td></tr></table></figure><p>x，y：表示的是大小为(n,)的数组，也就是我们即将绘制散点图的数据点<br>s:是一个实数或者是一个数组大小为(n,)，这个是一个可选的参数。<br>c:表示的是颜色，也是一个可选项。默认是蓝色’b’,表示的是标记的颜色，或者可以是一个表示颜色的字符，或者是一个长度为n的表示颜色的序列等等，感觉还没用到过现在不解释了。但是c不可以是一个单独的RGB数字，也不可以是一个RGBA的序列。可以是他们的2维数组（只有一行）。<br>marker:表示的是标记的样式，默认的是’o’。<br>cmap:Colormap实体或者是一个colormap的名字，cmap仅仅当c是一个浮点数数组的时候才使用。如果没有申明就是image.cmap<br>norm:Normalize实体来将数据亮度转化到0-1之间，也是只有c是一个浮点数的数组的时候才使用。如果没有申明，就是默认为colors.Normalize。<br>vmin,vmax:实数，当norm存在的时候忽略。用来进行亮度数据的归一化。<br>alpha：实数，0-1之间。<br>linewidths:也就是标记点的长度。    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'a'</span>: np.arange(<span class="number">50</span>),</span><br><span class="line">        <span class="string">'c'</span>: np.random.randint(<span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>),</span><br><span class="line">        <span class="string">'d'</span>: np.random.randn(<span class="number">50</span>)&#125;</span><br><span class="line">data[<span class="string">'b'</span>] = data[<span class="string">'a'</span>] + <span class="number">10</span> * np.random.randn(<span class="number">50</span>)</span><br><span class="line">data[<span class="string">'d'</span>] = np.abs(data[<span class="string">'d'</span>]) * <span class="number">100</span></span><br><span class="line"></span><br><span class="line">plt.scatter(<span class="string">'a'</span>, <span class="string">'b'</span>, c=<span class="string">'c'</span>, s=<span class="string">'d'</span>, data=data)</span><br><span class="line">plt.xlabel(<span class="string">'entry a'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'entry b'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibPyplot/output_10_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'a'</span>: np.arange(<span class="number">50</span>),</span><br><span class="line">        <span class="string">'c'</span>: np.random.randint(<span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>),</span><br><span class="line">        <span class="string">'d'</span>: np.random.randn(<span class="number">50</span>)&#125;</span><br><span class="line">print(data)</span><br><span class="line">data[<span class="string">'b'</span>] = data[<span class="string">'a'</span>] + <span class="number">10</span> * np.random.randn(<span class="number">50</span>)</span><br><span class="line">data[<span class="string">'d'</span>] = np.abs(data[<span class="string">'d'</span>]) * <span class="number">100</span></span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><pre><code>{&apos;a&apos;: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), &apos;c&apos;: array([47,  5, 29, 21, 15, 12, 29, 23, 10, 25, 26, 45, 32, 30, 37, 27, 43,        9, 26, 45, 48, 14, 23, 30, 22,  0,  5, 47, 21, 26, 35,  7,  2, 19,       24, 41, 26,  9, 20, 16, 15, 29, 23,  4, 21, 12, 23, 30, 41, 19]), &apos;d&apos;: array([ 0.91474741,  1.4102975 , -0.09708013, -1.47629846, -1.57769092,       -0.46290149,  1.23430367,  0.38467709, -0.01272562, -1.44240598,       -0.21927709, -0.30498565, -0.11862153, -1.24972745, -1.32424128,       -1.5610827 ,  1.26963903,  0.62084676, -1.0549506 ,  0.37044246,       -0.39299613,  0.42897231, -0.33461671, -0.86706857, -0.76486767,       -1.3074562 , -0.33973554, -1.08680383,  0.27878669,  1.0599157 ,       -0.38176051,  0.79680669, -0.6874751 ,  1.38240815, -0.1344723 ,        0.7627456 ,  0.36115735,  0.83799247,  0.02523584,  0.81839594,       -0.77025921, -0.06682006,  0.06934268,  0.36251595, -0.99875799,        1.23386736, -0.32016664,  0.45225071,  0.55994446,  0.47643056])}{&apos;a&apos;: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), &apos;c&apos;: array([47,  5, 29, 21, 15, 12, 29, 23, 10, 25, 26, 45, 32, 30, 37, 27, 43,        9, 26, 45, 48, 14, 23, 30, 22,  0,  5, 47, 21, 26, 35,  7,  2, 19,       24, 41, 26,  9, 20, 16, 15, 29, 23,  4, 21, 12, 23, 30, 41, 19]), &apos;d&apos;: array([ 91.4747409 , 141.02975036,   9.70801323, 147.6298458 ,       157.76909222,  46.29014854, 123.43036704,  38.46770907,         1.27256168, 144.24059782,  21.92770893,  30.49856537,        11.86215303, 124.972745  , 132.42412769, 156.10827022,       126.96390267,  62.0846764 , 105.49506   ,  37.0442464 ,        39.29961326,  42.89723069,  33.46167088,  86.70685708,        76.48676738, 130.74561997,  33.97355351, 108.68038257,        27.87866927, 105.9915699 ,  38.17605117,  79.68066907,        68.74750955, 138.2408153 ,  13.44723023,  76.27455996,        36.1157352 ,  83.79924741,   2.52358383,  81.83959391,        77.02592105,   6.68200567,   6.93426756,  36.25159505,        99.87579944, 123.38673588,  32.01666378,  45.22507109,        55.99444581,  47.6430561 ]), &apos;b&apos;: array([  4.62276015,   7.74528096,  -4.77823695, -11.7847356 ,        18.05816585,  -8.1731315 ,   4.98414606,  18.1539417 ,        11.06732176,  15.32465307,   5.923213  ,   6.77520583,        -8.72986134,  19.414693  ,  22.05933889,  10.92443259,        16.1005237 ,  28.55305548,   7.16710341,  19.82975597,        35.25631478,  13.32137703,   9.26598849,  14.25528353,        17.70779422,  18.62234998,  41.83152657,  26.02409203,        23.25997035,  20.38161932,   2.84095495,  36.00225335,        46.69340509,  22.75167791,  34.33249818,  25.09595488,        41.37140253,  16.54690243,  32.4532621 ,  31.12442736,        40.99257063,  49.49197597,  55.91868808,  55.13338215,        33.1365961 ,  48.95821962,  25.50538193,  58.72572039,        49.63841177,  41.7925894 ])}</code></pre><h2 id="用分类变量绘图"><a href="#用分类变量绘图" class="headerlink" title="用分类变量绘图"></a>用分类变量绘图</h2><p>也可以使用分类变量创建绘图。Matplotlib允许您将分类变量直接传递给许多绘图函数。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'group_a'</span>, <span class="string">'group_b'</span>, <span class="string">'group_c'</span>]</span><br><span class="line">values = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示figure 的大小为宽、长（单位为inch）</span></span><br><span class="line">plt.figure(<span class="number">1</span>, figsize=(<span class="number">18</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.subplot(ABC)表示第A行,B图形的总数量，C第几个图形</span></span><br><span class="line">plt.subplot(<span class="number">131</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直方图</span></span><br><span class="line">plt.bar(names, values)</span><br><span class="line">plt.subplot(<span class="number">132</span>)</span><br><span class="line"><span class="comment">#散点图</span></span><br><span class="line">plt.scatter(names, values)</span><br><span class="line">plt.subplot(<span class="number">133</span>)</span><br><span class="line"><span class="comment">#折线图</span></span><br><span class="line">plt.plot(names, values)</span><br><span class="line">plt.suptitle(<span class="string">'Categorical Plotting'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibPyplot/output_13_0.png" alt="png"></p><h2 id="控制线的属性"><a href="#控制线的属性" class="headerlink" title="控制线的属性"></a>控制线的属性</h2><p>线可以设置许多属性：linewidth，dash style，antialiased等; 请参阅 <a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D" target="_blank" rel="noopener">matplotlib.lines.Line2D</a>。 有几种方法可以设置线属性。</p><p>使用关键字args：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y, linewidth=2.0)</span><br></pre></td></tr></table></figure><p>使用Line2D实例的setter方法。 plot返回Line2D对象列表; 例如，line1，line2 = plot（x1，y1，x2，y2）。 在下面的代码中，我们假设我们只有一行，因此返回的列表的长度为1.我们使用tuple解压缩为line，以获取该列表的第一个元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">line, = plt.plot(x, y, &apos;-&apos;)</span><br><span class="line">line.set_antialiased(False) # turn off antialising</span><br></pre></td></tr></table></figure><p>使用 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.setp.html#matplotlib.pyplot.setp" target="_blank" rel="noopener">setp()</a> 命令。 下面的示例使用MATLAB样式命令在行列表上设置多个属性。setp透明地使用对象列表或单个对象。您可以使用python关键字参数或MATLAB样式的字符串/值对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lines = plt.plot(x1, y1, x2, y2)</span><br><span class="line"># use keyword args</span><br><span class="line">plt.setp(lines, color=&apos;r&apos;, linewidth=2.0)</span><br><span class="line"># or MATLAB style string value pairs</span><br><span class="line">plt.setp(lines, &apos;color&apos;, &apos;r&apos;, &apos;linewidth&apos;, 2.0)</span><br></pre></td></tr></table></figure><p>以下是可用的<a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D" target="_blank" rel="noopener">Line2D</a>属性。</p><table align="center">    <thead>        <tr>            <th>属性</th>            <th>值类型</th>        </tr>    </thead>    <tbody>        <tr>            <th>alpha</th>            <th>float</th>        </tr>        <tr>            <th>animated</th>            <th>[True | False]</th>        </tr>        <tr>            <th>antialiased 或 aa</th>            <th>[True | False]</th>        </tr>        <tr>            <th>clip_box</th>            <th>matplotlib.transform.Bbox实例</th>        </tr>        <tr>            <th>clip_on</th>            <th>[True | False]</th>        </tr>        <tr>            <th>clip_path</th>            <th>路径实例和变换实例(修补程序)</th>        </tr>        <tr>            <th>color 或 c</th>            <th>任何Matplotlib颜色</th>        </tr>        <tr>            <th>contains</th>            <th>the hit testing function</th>        </tr>        <tr>            <th>dash_capstyle</th>            <th>['butt' | 'round' | 'projecting']</th>        </tr>        <tr>            <th>dash_joinstyle</th>            <th>['miter' | 'round' | 'bevel']</th>        </tr>        <tr>            <th>dashes</th>            <th>以点为单位的开/关油墨顺序</th>        </tr>        <tr>            <th>data</th>            <th>(np.array xdata, np.array ydata)</th>        </tr>        <tr>            <th>figure</th>            <th>matplotlib.quire.Figure实例</th>        </tr>        <tr>            <th>label</th>            <th>任何字符串</th>        </tr>        <tr>            <th>linestyle or ls</th>            <th>[ '-' | '--' | '-.' | ':' | 'steps' | ...]</th>        </tr>        <tr>            <th>linewidth or lw</th>            <th>浮点值</th>        </tr>        <tr>            <th>lod</th>            <th>[True | False]</th>        </tr>        <tr>            <th>marker</th>            <th>[ '+' | ',' | '.' | '1' | '2' | '3' | '4' ]</th>        </tr>        <tr>            <th>markeredgecolor or mec</th>            <th>任何Matplotlib颜色</th>        </tr>        <tr>            <th>markeredgewidth or mew</th>            <th>浮点值</th>        </tr>        <tr>            <th>markerfacecolor or mfc</th>            <th>任何Matplotlib颜色</th>        </tr>        <tr>            <th>markersize or ms</th>            <th>浮点数</th>        </tr>        <tr>            <th>markevery</th>            <th>[ None | integer | (startind, stride) ]</th>        </tr>        <tr>            <th>picker</th>            <th>用于交互式选线</th>        </tr>        <tr>            <th>pickradius</th>            <th>线拾取选择半径</th>        </tr>        <tr>            <th>solid_capstyle</th>            <th>['butt' | 'round' | 'projecting']</th>        </tr>        <tr>            <th>solid_joinstyle</th>            <th>['miter' | 'round' | 'bevel']</th>        </tr>        <tr>            <th>transform</th>            <th>matplotlib.transforms.Transform实例</th>        </tr>        <tr>            <th>visible</th>            <th>[True | False]</th>        </tr>        <tr>            <th>xdata</th>            <th>np.array</th>        </tr>        <tr>            <th>ydata</th>            <th>np.array</th>        </tr>        <tr>            <th>zorder</th>            <th>任意数字</th>        </tr>    </tbody></table><p>若要获取可设置行属性的列表，请使用一行或多行作为参数调用<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.setp.html#matplotlib.pyplot.setp" target="_blank" rel="noopener">setp()</a> 函数。</p><h2 id="使用多个图形和轴"><a href="#使用多个图形和轴" class="headerlink" title="使用多个图形和轴"></a>使用多个图形和轴</h2><p>MATLAB和<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">pyplot</a>，都有当前图形和当前轴的概念。所有打印命令都适用于当前轴。函数gca() 返回当前轴(<a href="https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes" target="_blank" rel="noopener">matplotlib.axes.Axes</a>实例)，<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.gcf.html#matplotlib.pyplot.gcf" target="_blank" rel="noopener">gcf()</a> 返回当前地物(<a href="https://matplotlib.org/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure" target="_blank" rel="noopener">matplotlib.figure.Figure</a>实例)。通常情况下，你不必担心这一点，因为这一切都是在幕后处理的。下面是创建两个子图的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.exp(-t) * np.cos(<span class="number">2</span>*np.pi*t)</span><br><span class="line"></span><br><span class="line">t1 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.1</span>)</span><br><span class="line">t2 = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">plt.plot(t1, f(t1), <span class="string">'bo'</span>, t2, f(t2), <span class="string">'k'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">plt.plot(t2, np.cos(<span class="number">2</span>*np.pi*t2), <span class="string">'r--'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibPyplot/output_16_0.png" alt="png"></p><p>这里的 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.figure.html#matplotlib.pyplot.figure" target="_blank" rel="noopener">figure()</a> 命令是可选的，因为默认情况下将创建 figure(1)，就像默认情况下创建 subplot(111) 一样，如果不手动指定任何轴。<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplot.html#matplotlib.pyplot.subplot" target="_blank" rel="noopener">subplot()</a>命令指定numrows, numcols, plot_number，其中 plot_number 的范围 从1到numrows*numcols。如果 numrows * numcols &lt;10，则subplot命令中的逗号是可选的。因此 subplot(211) 与 subplot(2, 1, 1) 相同。</p><p>您可以创建任意数量的子图和轴。如果要手动放置轴，即不在矩形网格上，请使用 axes() 命令，该命令允许您将位置指定为axes([left，bottom，width，height])，其中所有值均为小数（0到1）坐标。有关手动放置轴的示例，请参阅<a href="https://matplotlib.org/gallery/subplots_axes_and_figures/axes_demo.html" target="_blank" rel="noopener">Axes Demo</a>;有关具有大量子图的示例，请参阅 <a href="https://matplotlib.org/gallery/subplots_axes_and_figures/subplot_demo.html" target="_blank" rel="noopener">Basic Subplot Demo</a>。</p><p>您可以使用具有增加的图号的多个<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.figure.html#matplotlib.pyplot.figure" target="_blank" rel="noopener">figure()</a> 调用来创建多个数字。当然，每个图形可以包含您心中所需的轴和子图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure(<span class="number">1</span>)                <span class="comment"># the first figure</span></span><br><span class="line">plt.subplot(<span class="number">211</span>)             <span class="comment"># the first subplot in the first figure</span></span><br><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">plt.subplot(<span class="number">212</span>)             <span class="comment"># the second subplot in the first figure</span></span><br><span class="line">plt.plot([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">2</span>)                <span class="comment"># a second figure</span></span><br><span class="line">plt.plot([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])          <span class="comment"># creates a subplot(111) by default</span></span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">1</span>)                <span class="comment"># figure 1 current; subplot(212) still current</span></span><br><span class="line">plt.subplot(<span class="number">211</span>)             <span class="comment"># make subplot(211) in figure1 current</span></span><br><span class="line">plt.title(<span class="string">'Easy as 1, 2, 3'</span>) <span class="comment"># subplot 211 title</span></span><br></pre></td></tr></table></figure><pre><code>Text(0.5, 1.0, &apos;Easy as 1, 2, 3&apos;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibPyplot/output_18_1.png" alt="png"></p><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibPyplot/output_18_2.png" alt="png"></p><p>您可以使用 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.clf.html#matplotlib.pyplot.clf" target="_blank" rel="noopener">clf()</a> 清除当前图形，使用 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.cla.html#matplotlib.pyplot.cla" target="_blank" rel="noopener">cla()</a> 清除当前轴。如果您发现在幕后为您维护状态（特别是当前图像，图形和轴）很烦人，请不要绝望：这只是围绕面向对象API的瘦状态包装器，您可以使用它（见<a href="https://matplotlib.org/tutorials/intermediate/artists.html" target="_blank" rel="noopener">Artist tutorial</a>）</p><p>如果你要制作大量的图像，你还需要注意一件事：在用 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.close.html#matplotlib.pyplot.close" target="_blank" rel="noopener">close()</a> 显式关闭数字之前，数字所需的内存不会完全释放。删除对图的所有引用，和/或使用窗口管理器来杀死屏幕上出现图形的窗口是不够的，因为pyplot会保持内部引用，直到调用close()。</p><h2 id="使用文本"><a href="#使用文本" class="headerlink" title="使用文本"></a>使用文本</h2><p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.text.html#matplotlib.pyplot.text" target="_blank" rel="noopener">text()</a> 命令可用于在任意位置添加文本，而<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.xlabel.html#matplotlib.pyplot.xlabel" target="_blank" rel="noopener">xlabel()</a>, <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.ylabel.html#matplotlib.pyplot.ylabel" target="_blank" rel="noopener">ylabel()</a> 和 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.title.html#matplotlib.pyplot.title" target="_blank" rel="noopener">title()</a> 用于在指定位置添加文本(有关更详细的示例，请参见Matplotlib图中的文本)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mu, sigma = <span class="number">100</span>, <span class="number">15</span></span><br><span class="line">x = mu + sigma * np.random.randn(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the histogram of the data</span></span><br><span class="line">n, bins, patches = plt.hist(x, <span class="number">50</span>, density=<span class="number">1</span>, facecolor=<span class="string">'g'</span>, alpha=<span class="number">0.75</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'Smarts'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Probability'</span>)</span><br><span class="line">plt.title(<span class="string">'Histogram of IQ'</span>)</span><br><span class="line">plt.text(<span class="number">60</span>, <span class="number">.025</span>, <span class="string">r'$\mu=100,\ \sigma=15$'</span>)</span><br><span class="line">plt.axis([<span class="number">40</span>, <span class="number">160</span>, <span class="number">0</span>, <span class="number">0.03</span>])</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibPyplot/output_20_0.png" alt="png"></p><p>所有<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.text.html#matplotlib.pyplot.text" target="_blank" rel="noopener">text()</a> 命令都返回一个<a href="https://matplotlib.org/api/text_api.html#matplotlib.text.Text" target="_blank" rel="noopener">matplotlib.text.Text</a>实例。与上面的行一样，您可以通过将关键字参数传递给文本函数或使用<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.setp.html#matplotlib.pyplot.setp" target="_blank" rel="noopener">setp()</a>来自定义属性：</p><pre><code>t = plt.xlabel(&apos;my data&apos;, fontsize=14, color=&apos;red&apos;)</code></pre><p><a href="https://matplotlib.org/tutorials/text/text_props.html" target="_blank" rel="noopener">文本属性和布局</a>中更详细地介绍了这些属性。</p><h3 id="在文本中使用数学表达式"><a href="#在文本中使用数学表达式" class="headerlink" title="在文本中使用数学表达式"></a>在文本中使用数学表达式</h3><p>matplotlib在任何文本表达式中接受TeX方程表达式。 例如，要在标题中写入表达式σi= 15，您可以编写由美元符号包围的TeX表达式：</p><pre><code>plt.title(r&apos;$\sigma_i=15$&apos;)</code></pre><p>标题字符串前面的r很重要 - 它表示该字符串是一个原始字符串，而不是将反斜杠视为python转义。matplotlib有一个内置的TeX表达式解析器和布局引擎，并提供自己的数学字体 - 有关详细信息，请参阅编写<a href="https://matplotlib.org/tutorials/text/mathtext.html" target="_blank" rel="noopener">数学表达式</a>。因此，您可以跨平台使用数学文本，而无需安装TeX。 对于安装了LaTeX和dvipng的用户，您还可以使用LaTeX格式化文本并将输出直接合并到显示图或保存的postscript中 - 请参阅使用<a href="https://matplotlib.org/tutorials/text/usetex.html" target="_blank" rel="noopener">LaTeX</a>进行文本渲染。</p><h2 id="注释文本"><a href="#注释文本" class="headerlink" title="注释文本"></a>注释文本</h2><p>上面的基本<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.text.html#matplotlib.pyplot.text" target="_blank" rel="noopener">text()</a> 命令的使用将文本放在Axes上的任意位置。文本的常见用途是注释绘图的某些功能，而<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.text.html#matplotlib.pyplot.text" target="_blank" rel="noopener">annotate()</a>方法提供帮助功能以使注释变得容易。在注释中，有两点需要考虑：由参数xy表示的注释位置和文本xytext的位置。 这两个参数都是（x，y）元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ax = plt.subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line">t = np.arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.01</span>)</span><br><span class="line">s = np.cos(<span class="number">2</span>*np.pi*t)</span><br><span class="line">line, = plt.plot(t, s, lw=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.annotate(<span class="string">'local max'</span>, xy=(<span class="number">2</span>, <span class="number">1</span>), xytext=(<span class="number">3</span>, <span class="number">1.5</span>),</span><br><span class="line">             arrowprops=dict(facecolor=<span class="string">'red'</span>, shrink=<span class="number">0.05</span>),</span><br><span class="line">             )</span><br><span class="line"></span><br><span class="line">plt.ylim(<span class="number">-2</span>, <span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibPyplot/output_22_0.png" alt="png"></p><p>在此基本示例中，xy（箭头提示）和xytext位置（文本位置）都在数据坐标中。 可以选择各种其他坐标系 - 有关详细信息，请参阅<a href="https://matplotlib.org/tutorials/text/annotations.html#annotations-tutorial" target="_blank" rel="noopener">基本注释</a>和<a href="https://matplotlib.org/tutorials/text/annotations.html#plotting-guide-annotation" target="_blank" rel="noopener">高级注释</a>。更多示例可以在<a href="https://matplotlib.org/gallery/text_labels_and_annotations/annotation_demo.html" target="_blank" rel="noopener">Annotating Plots</a>中找到。</p><h2 id="对数和其他非线性轴"><a href="#对数和其他非线性轴" class="headerlink" title="对数和其他非线性轴"></a>对数和其他非线性轴</h2><p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">matplotlib.pyplot</a> 不仅支持线性轴刻度，还支持对数和logit刻度。 如果数据跨越许多数量级，则通常使用此方法。 更改轴的比例很容易：</p><pre><code>plt.xscale(&apos;log&apos;)</code></pre><p>下面显示了具有相同数据和y轴不同比例的四个图的示例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> NullFormatter  <span class="comment"># useful for `logit` scale</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fixing random state for reproducibility</span></span><br><span class="line">np.random.seed(<span class="number">19680801</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># make up some data in the interval ]0, 1[</span></span><br><span class="line">y = np.random.normal(loc=<span class="number">0.5</span>, scale=<span class="number">0.4</span>, size=<span class="number">1000</span>)</span><br><span class="line">y = y[(y &gt; <span class="number">0</span>) &amp; (y &lt; <span class="number">1</span>)]</span><br><span class="line">y.sort()</span><br><span class="line">x = np.arange(len(y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot with various axes scales</span></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># linear</span></span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.yscale(<span class="string">'linear'</span>)</span><br><span class="line">plt.title(<span class="string">'linear'</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># log</span></span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.yscale(<span class="string">'log'</span>)</span><br><span class="line">plt.title(<span class="string">'log'</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对称 log</span></span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.plot(x, y - y.mean())</span><br><span class="line">plt.yscale(<span class="string">'symlog'</span>, linthreshy=<span class="number">0.01</span>)</span><br><span class="line">plt.title(<span class="string">'symlog'</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># logit</span></span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.yscale(<span class="string">'logit'</span>)</span><br><span class="line">plt.title(<span class="string">'logit'</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用“NullFormatter”将y轴上的小标记标签格式化为空字符串，以避免轴上有太多标签。</span></span><br><span class="line">plt.gca().yaxis.set_minor_formatter(NullFormatter())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整subplot布局，因为logit 1可能比平常占用更多的空间，这是由于像“1 - 10^&#123;-3&#125;”这样的y-tick标签造成的。</span></span><br><span class="line">plt.subplots_adjust(top=<span class="number">0.92</span>, bottom=<span class="number">0.08</span>, left=<span class="number">0.10</span>, right=<span class="number">0.95</span>, hspace=<span class="number">0.25</span>,</span><br><span class="line">                    wspace=<span class="number">0.35</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibPyplot/output_24_0.png" alt="png"></p><p>您也可以添加自己的比例，有关详细信息，请参阅<a href="https://matplotlib.org/devel/add_new_projection.html#adding-new-scales" target="_blank" rel="noopener">开发人员指南</a>以创建比例和转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      matplotlib - Pyplot 教程
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.yinuxy.com/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.yinuxy.com/tags/Python/"/>
    
      <category term="matplotlib" scheme="https://blog.yinuxy.com/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib - matplotlib 教程</title>
    <link href="https://blog.yinuxy.com/2019/08/04/Lessons/matplotlib_course/"/>
    <id>https://blog.yinuxy.com/2019/08/04/Lessons/matplotlib_course/</id>
    <published>2019-08-04T00:30:00.000Z</published>
    <updated>2019-12-03T11:19:21.965Z</updated>
    
    <content type="html"><![CDATA[<p>Matplotlib 是 Python 的绘图库。 它可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/fengmian.png" alt="png"></p><a id="more"></a><h1 id="Pyplot-教程"><a href="#Pyplot-教程" class="headerlink" title="Pyplot 教程"></a>Pyplot 教程</h1><p>关于pylot接口的介绍。</p><h1 id="matplotlib-教程"><a href="#matplotlib-教程" class="headerlink" title="matplotlib 教程"></a>matplotlib 教程</h1><p>这个图库包含了使用Matplotlib可以做的许多事情的示例。可以点击任何图像，以查看完整的图像和源代码。</p><p>有关更短的示例，请参见<a href="https://matplotlib.org/gallery/index.html" target="_blank" rel="noopener">示例页</a>。你还可以在我们的<a href="https://matplotlib.org/contents.html" target="_blank" rel="noopener">用户指南</a>中找到<a href="https://matplotlib.org/resources/index.html" target="_blank" rel="noopener">外部资源</a>和<a href="https://matplotlib.org/faq/index.html" target="_blank" rel="noopener">常见问题解答</a>。</p><h1 id="matplotlib-入门"><a href="#matplotlib-入门" class="headerlink" title="matplotlib 入门"></a>matplotlib 入门</h1><p>这些教程介绍了使用Matplotlib创建可视化效果的基础知识，以及有效使用该包的一些最佳实践。</p><h2 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h2><p>本教程介绍一些基本的使用模式和最佳实践，以帮助您开始使用Matplotlib。</p><h3 id="一般概念"><a href="#一般概念" class="headerlink" title="一般概念"></a>一般概念</h3><p>matplotlib有一个广泛的代码库，对于许多新用户来说，这个代码库可能会让人望而生畏。然而，大多数Matplotlib可以用相当简单的概念框架和几个要点的知识来理解。</p><p>打印需要在一系列级别上执行操作，从最一般的级别(例如“轮廓此二维阵列”)到最具体的级别(例如“将此屏幕像素涂成红色”)。绘图软件包的目的是通过所有必要的控制，帮助您尽可能轻松地可视化您的数据-也就是说，在大多数情况下使用相对较高级别的命令，并且在需要时仍然能够使用低级别命令。</p><p>因此，matplotlib中的所有内容都是按照层次结构组织的。层次结构的顶部是matplotlib“状态机环境”，它是由<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">matplotlib.pylot</a>模块提供的。在这个级别上，使用简单的函数来添加打印元素(线、图像、文本等)。到当前地物中的当前轴。</p><p>注意：Pyplot的状态机环境的行为类似于MATLAB，并且对于具有MATLAB经验的用户来说应该是最熟悉的。</p><p>层次结构中的下一级是面向对象的接口的第一级，其中pyplot仅用于少数功能，例如图形创建，并且用户显式创建并跟踪图形和轴对象。 在此级别，用户使用pyplot来创建图形，并且通过这些图形，可以创建一个或多个轴对象。 然后，这些轴对象用于大多数绘图操作。</p><p>对于更多的控制 - 这对于在GUI应用程序中嵌入matplotlib图表这一点至关重要 - 可以完全删除pyplot级别，从而留下纯粹面向对象的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入matplotlib模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h2 id="一个图的一部分"><a href="#一个图的一部分" class="headerlink" title="一个图的一部分"></a>一个图的一部分</h2><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/" alt></p><h2 id="Figure"><a href="#Figure" class="headerlink" title="Figure"></a>Figure</h2><p>该图<strong>记录了所有<a href="https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes" target="_blank" rel="noopener">子轴</a>，一些 “特殊” 的艺术家（标题，图形图例等）和画布</strong>。（不要过于担心画布，它是至关重要的，因为它实际上是绘图的对象，以获得你绘制的图像，但作为用户它或多或少是你不可见的）。一个数字可以有任意数量的<a href="https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes" target="_blank" rel="noopener">Axes</a>，但是有用的应该至少有一个。<br>创建一个图像的最简单方法是使用pylot：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有坐标轴的空图形</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为图形添加一个标题</span></span><br><span class="line">fig.suptitle(<span class="string">'No axes on this figure'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带有2x2坐标轴网格的图形</span></span><br><span class="line">fig, ax_lst = plt.subplots(<span class="number">2</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/output_3_1.png" alt="png"></p><h1 id="Axes对象"><a href="#Axes对象" class="headerlink" title="Axes对象"></a>Axes对象</h1><p>这就是你想象中的“一幅图”，它是具有数据空间的图像区域。给定的图形可以包含许多轴，但给定的<a href="https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes" target="_blank" rel="noopener">Axes</a>对象只能在<a href="https://matplotlib.org/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure" target="_blank" rel="noopener">一个图</a>中。 Axes包含两个（或3D的三个）<a href="https://matplotlib.org/api/axis_api.html#matplotlib.axis.Axis" target="_blank" rel="noopener">Axis</a>对象（注意Axes和Axis之间的差异），它们负责数据限制（数据限制也可以通过 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.set_xlim.html#matplotlib.axes.Axes.set_xlim" target="_blank" rel="noopener">set_xlim()</a> 和 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.set_ylim.html#matplotlib.axes.Axes.set_ylim" target="_blank" rel="noopener">set_ylim()</a> 来设置Axes方法）。每个Axes都有一个标题（通过 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.set_title.html#matplotlib.axes.Axes.set_title" target="_blank" rel="noopener">set_title()</a> 设置），一个x标签（通过 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.set_xlabel.html#matplotlib.axes.Axes.set_xlabel" target="_blank" rel="noopener">set_xlabel()</a> 设置）和一个通过 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.set_ylabel.html#matplotlib.axes.Axes.set_ylabel" target="_blank" rel="noopener">set_ylabel()</a> 设置的y标签。</p><p>Axis 类及其成员函数是使用 OO 接口的主要入口点。</p><h2 id="Axis对象"><a href="#Axis对象" class="headerlink" title="Axis对象"></a>Axis对象</h2><p>这些是类似数字的对象。它们负责设置图形限制并生成刻度线（轴上的标记）和ticklabels（标记刻度线的字符串）。刻度线的位置由<a href="https://matplotlib.org/api/ticker_api.html#matplotlib.ticker.Locator" target="_blank" rel="noopener">Locator</a>对象确定，ticklabel字符串由<a href="https://matplotlib.org/api/ticker_api.html#matplotlib.ticker.Formatter" target="_blank" rel="noopener">Formatter</a>格式化。正确的定位器和格式化器的组合可以非常精确地控制刻度位置和标签。</p><h2 id="Artist对象"><a href="#Artist对象" class="headerlink" title="Artist对象"></a>Artist对象</h2><p>基本上你在图上看到的一切都是艺术家（Artist）对象（甚至是图，轴和轴对象）。这包括Text对象，Line2D对象，集合对象，Patch对象……（现在你明白了）。渲染图形时，所有艺术家都被绘制到画布（canvas）上。大多数艺术家（Artist）都与轴有关; 这样的艺术家（Artist）不能被多个轴共享，也不能从一个轴移动到另一个轴。</p><h2 id="绘制函数的输入类型"><a href="#绘制函数的输入类型" class="headerlink" title="绘制函数的输入类型"></a>绘制函数的输入类型</h2><p>所有绘图函数都需要np.array或np.ma.masked_array对象作为输入类型。如果是 “类数组（array-like）” 对象（如<a href="http://www.pypandas.cn/" target="_blank" rel="noopener">pandas</a>数据对象和np.matrix）可能会或可能不会按预期工作。最好在绘图之前将它们转换为np.array对象。</p><p>例如，要转换<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html#pandas.DataFrame" target="_blank" rel="noopener">pandas.DataFrame</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = pd.DataFrame(np.random.rand(<span class="number">4</span>,<span class="number">5</span>), columns = list(<span class="string">'abcde'</span>))</span><br><span class="line">a_asndarray = a.values</span><br></pre></td></tr></table></figure><p>以及转换np.matrix</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = np.matrix([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">b_asarray = np.asarray(b)</span><br></pre></td></tr></table></figure><h2 id="Matplotlib，pyplot和pylab：它们之间有什么关系？"><a href="#Matplotlib，pyplot和pylab：它们之间有什么关系？" class="headerlink" title="Matplotlib，pyplot和pylab：它们之间有什么关系？"></a>Matplotlib，pyplot和pylab：它们之间有什么关系？</h2><p>Matplotlib是整个包; <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">matplotlib.pyplot</a> 是 matplotlib中的一个模块; 和pylab是一个与 matplotlib 一起安装的模块。</p><p>Pyplot为底层面向对象的绘图库提供状态机接口。 状态机隐式地自动创建图形和轴以实现所需的图形。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建图形和轴,实现绘图</span></span><br><span class="line">plt.plot(x, x, label=<span class="string">'linear'</span>)</span><br><span class="line">plt.plot(x, x**<span class="number">2</span>, label=<span class="string">'quadratic'</span>)</span><br><span class="line">plt.plot(x, x**<span class="number">3</span>, label=<span class="string">'cubic'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#x/y轴标签</span></span><br><span class="line">plt.xlabel(<span class="string">'x label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y label'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#表名</span></span><br><span class="line">plt.title(<span class="string">"Simple Plot"</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/output_9_0.png" alt="png"></p><p>第一次调用 plt.plot 将自动创建必要的图形和轴以实现所需的绘图。随后对plt.plot的调用会重新使用当前轴，并且每次都会添加另一行。设置标题，图例和轴标签还会自动使用当前轴并设置标题，创建图例并分别标记轴。</p><p>pylab是一个便利模块，它在单个名称空间中批量导入 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">matplotlib.pyplot</a>（用于绘图）和<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">numpy</a>一样（用于数学和使用数组）。不过不推荐使用pylab，并且由于命名空间污染而强烈建议不要使用它。请改用pyplot。</p><p>对于非交互式绘图，建议使用pyplot创建图形，然后使用OO界面进行绘图。</p><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p>查看此文档和示例时，您将找到不同的代码样式和使用模式。这些风格完全没有问题，各有利弊。几乎所有示例都可以转换为另一种样式并实现相同的结果。唯一需要注意的是避免为自己的代码混合了别的代码风格，尽量保持风格的统一。</p><p>注意：matplotlib的开发人员必须遵循特定的编程风格和指导原则。请参见<a href="https://matplotlib.org/devel/index.html#developers-guide-index" target="_blank" rel="noopener">Matplotlib开发人员手册</a>。</p><p>在不同的风格中，有两种是官方支持的。因此，这些是使用matplotlib的首选方法。</p><p>对于pyplot样式，脚本顶部的通常导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>然后调用一次，例如，np.arange，np.zeros，np.pi，plt.figure，plt.plot，plt.show等。使用pyplot接口创建图像，然后使用对象方法：<br>然后使用对象方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.2</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/output_14_1.png" alt="png"></p><p>那么，为什么所有都是额外的类型而不是MATLAB样式(依赖于全局状态和平面名称空间)呢？对于像这个例子这样非常简单的事情，唯一的好处是学术性的：更冗长的风格更明确，更清楚地说明事物从何而来，以及正在发生的事情。对于更复杂的应用程序，这种明确性和明确性变得越来越有价值，而更丰富和更完整的面向对象接口可能会使程序更易于编写和维护。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_plotter</span><span class="params">(ax, data1, data2, param_dict)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用来制作图表的辅助函数</span></span><br><span class="line"><span class="string">    参数</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    ax:Axes</span></span><br><span class="line"><span class="string">        要画的坐标轴</span></span><br><span class="line"><span class="string">    data1:数组</span></span><br><span class="line"><span class="string">        x数据</span></span><br><span class="line"><span class="string">    data2:数组</span></span><br><span class="line"><span class="string">        y数据</span></span><br><span class="line"><span class="string">    param_dict: dict类型</span></span><br><span class="line"><span class="string">        要传递给ax.plot的kwargs字典</span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    list:</span></span><br><span class="line"><span class="string">        list of artists added</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    out = ax.plot(data1, data2, **param_dict)</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment"># which you would then use as:</span></span><br><span class="line">plt.figure(figsize = (<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">data1, data2, data3, data4 = np.random.randn(<span class="number">4</span>, <span class="number">100</span>)</span><br><span class="line">fig, ax = plt.subplots(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">my_plotter(ax, data1, data2, &#123;<span class="string">'marker'</span>: <span class="string">'x'</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/output_16_2.png" alt="png"></p><p>或者如果你想有两个小子图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建带有1x2坐标轴网格的图形</span></span><br><span class="line">fig, (ax1, ax2) = plt.subplots(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_plotter(ax1, data1, data2, &#123;<span class="string">'marker'</span>: <span class="string">'x'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_plotter(ax2, data3, data4, &#123;<span class="string">'marker'</span>: <span class="string">'o'</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/output_18_1.png" alt="png"></p><p>同样，对于这些简单的例子来说，这种风格看起来有点过头了，但是一旦图形变得稍微复杂一些，就会有回报。</p><h2 id="后端-Backends"><a href="#后端-Backends" class="headerlink" title="后端(Backends)"></a>后端(Backends)</h2><h3 id="什么是后端？"><a href="#什么是后端？" class="headerlink" title="什么是后端？"></a>什么是后端？</h3><p>网站和邮件列表中的许多文档都提到了“后端（Backends）”，许多新用户对这个术语感到困惑。matplotlib针对许多不同的用例和输出格式。有些人在python shell中以交互方式使用matplotlib，并在键入命令时弹出绘图窗口。有些人运行Jupyter笔记本并绘制内联图以进行快速数据分析。其他人将matplotlib嵌入到图形用户界面（如wxpython或pygtk）中以构建丰富的应用程序。有些人在批处理脚本中使用matplotlib从数值模拟生成postscript图像，还有一些人运行Web应用程序服务器来动态提供图形。</p><p>为了支持所有这些用例，matplotlib可以针对不同的输出，并且这些功能中的每一个都称为后端（Backends）; “前端（frontend）”是面向用户的代码，即绘图代码，而“后端（Backends）”完成幕后的所有艰苦工作以制作图形。 有两种类型的后端：用户界面后端（用于pygtk，wxpython，tkinter，qt4或macosx;也称为“交互式后端”）和硬拷贝后端来制作图像文件（PNG，SVG，PDF，PS; 也被称为“非交互式后端”）。</p><p>配置后端有四种方法。如果它们彼此冲突，将使用以下列表中最后提到的方法，例如，调用 <a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use" target="_blank" rel="noopener">use()</a> 将覆盖 matplotlibrc 中的设置。</p><pre><code>matplotlibrc文件中的后端参数（请参阅[使用样式表和rcParams自定义Matplotlib](https://matplotlib.org/tutorials/introductory/customizing.html)）：</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">backend : WXAgg   #使用带有反纹理(agg)呈现的wxpython</span><br></pre></td></tr></table></figure><pre><code>在Unix系统上，为当前shell或单个脚本设置[MPLBACKEND](https://matplotlib.org/faq/environment_variables_faq.html#envvar-MPLBACKEND)环境变量：</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; export MPLBACKEND=module://my_backend</span><br><span class="line">&gt; python simple_plot.py</span><br><span class="line"></span><br><span class="line">&gt; MPLBACKEND=&quot;module://my_backend&quot; python simple_plot.py</span><br></pre></td></tr></table></figure><p>在Windows上，只有前者是可用的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; set MPLBACKEND=module://my_backend</span><br><span class="line">&gt; python simple_plot.py</span><br></pre></td></tr></table></figure><p>设置此环境变量将覆盖任何 matplotlibrc 中的后端参数，即使当前工作目录中存在matplotlibrc也是如此。 因此，全局设置<a href="https://matplotlib.org/faq/environment_variables_faq.html#envvar-MPLBACKEND" target="_blank" rel="noopener">MPLBACKEND</a> ，例如 在.bashrc 或 .profile 中，不鼓励它，因为它可能导致反常的行为。<br>如果您的脚本依赖于特定的后端，则可以使用 <a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use" target="_blank" rel="noopener">use()</a> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下生成postscript输出</span></span><br><span class="line">matplotlib.use(<span class="string">'PS'</span>)</span><br></pre></td></tr></table></figure><p>如果使用 <a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use" target="_blank" rel="noopener">use()</a> 函数，则必须在输入 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">matplotlib.pyplot</a> 之前完成此操作。导入 pyplot 后调用 <a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use" target="_blank" rel="noopener">use()</a> 将不起作用。如果用户希望使用不同的后端，则使用 <a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use" target="_blank" rel="noopener">use()</a> 将需要更改代码。因此，除非绝对必要，否则应避免显式调用 <a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use" target="_blank" rel="noopener">use()</a>。</p><p>注意：后端名称规范不区分大小写；例如，‘GTK3Agg’ 和 ‘gtk3agg’ 是等效的。</p><p>通过典型的方式安装matplotlib，例如：从二进制安装程序或Linux发行包安装的话，可以设置好一个默认的后端，允许交互式工作和从脚本绘图，输出到屏幕和/或文件，所以至少一开始的时候你不需要使用上面给出的任何方法。</p><p>但是，如果您想编写图形用户界面或Web应用程序服务器（<a href="https://matplotlib.org/faq/howto_faq.html#howto-webapp" target="_blank" rel="noopener">Web应用程序服务器中的Matplotlib</a>），或者需要更好地了解正在发生的事情，请继续阅读。为了使图形用户界面可以更加自定义，matplotlib将画布（绘图所在的位置）中的渲染器（实际绘制的东西）的概念分开。用户界面的规范渲染器是Agg，它使用 <a href="http://antigrain.com/" target="_blank" rel="noopener">Anti-Grain Geometry</a> C++库来制作图形的光栅（像素）图像。除macosx之外的所有用户界面都可以与agg渲染一起使用，例如WXAgg，GTK3Agg，QT4Agg，QT5Agg，TkAgg。此外，一些用户界面支持其他渲染引擎。 例如，使用GTK + 3，您还可以选择Cairo渲染（后端GTK3Cairo）。</p><p>对于渲染引擎，还可以区分<a href="https://en.wikipedia.org/wiki/Vector_graphics" target="_blank" rel="noopener">矢量</a>(vector)或<a href="https://en.wikipedia.org/wiki/Raster_graphics" target="_blank" rel="noopener">光栅</a>(raster)渲染器。矢量图形语言发出绘图命令，例如“从此点到此点绘制线”，因此无标度，并且栅格后端生成线的像素表示，其精度取决于DPI设置。</p><p>下面是matplotlib渲染器的摘要(每个渲染器都有一个同名的后端；它们是非交互式后端，能够写入文件)：</p><table><thead><tr><th align="left">渲染格式</th><th align="left">文件类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">AGG</td><td align="left">png</td><td align="center">raster graphics – 使用反纹理几何（Anti-Grain Geometry）引擎的高质量图像。</td></tr><tr><td align="left">PS</td><td align="left">ps eps</td><td align="center">vector graphics – Postscript output</td></tr><tr><td align="left">PDF</td><td align="left">pdf</td><td align="center">vector graphics – Portable Document Format</td></tr><tr><td align="left">SVG</td><td align="left">svg</td><td align="center">vector graphics – Scalable Vector Graphics</td></tr><tr><td align="left">Cairo</td><td align="left">png ps pdf svg</td><td align="center">raster graphics 和 vector graphics – 使用 Cairo图形库(Cairo graphics)库</td></tr></tbody></table><p>以下是支持的用户界面和渲染器组合; 这些是交互式后端，能够显示到屏幕并使用上表中的适当渲染器写入文件：</p><table><thead><tr><th align="left">渲染格式</th><th align="center">文件类型</th></tr></thead><tbody><tr><td align="left">Qt5Agg</td><td align="center">在Qt5画布中进行Agg渲染(需要PyQt5)。可以在IPython中使用 %matplotlib qt5 激活此后端。</td></tr><tr><td align="left">ipympl</td><td align="center">嵌入在Jupyter小部件中的Agg渲染。（需要ipympl）。这个后端可以在带有％matplotlib ipympl 的Jupyter笔记本中启用。</td></tr><tr><td align="left">GTK3Agg</td><td align="center">Agg渲染到GTK 3.x画布（需要PyGObject，pycairo或cairocffi）。 可以使用％matplotlib gtk3 在 IPython中激活此后端。</td></tr><tr><td align="left">macosx</td><td align="center">将AGG渲染到OSX中的Cocoa画布中。可以在IPython中使用 %matplotlib OSX 激活此后端。</td></tr><tr><td align="left">TkAgg</td><td align="center">Agg渲染到Tk画布（需要TkInter）。可以使用 ％matplotlib tk 在IPython中激活此后端。</td></tr><tr><td align="left">nbAgg</td><td align="center">在经典的Jupyter笔记本中嵌入一个交互式界面。 可以通过％matplotlib 笔记本 在Jupyter笔记本中启用此后端。</td></tr><tr><td align="left">WebAgg</td><td align="center">show() 将启动一个带有交互式图形的 tornado 服务。</td></tr><tr><td align="left">GTK3Cairo</td><td align="center">在GTK 3.x画布上呈现cairo(需要PyGObject 和 pycairo 或 cairocffi )。</td></tr><tr><td align="left">Qt4Agg</td><td align="center">Agg渲染到 Qt4 画布（需要 PyQt4 或pyside）。可以使用 ％matplotlib qt4 在IPython中激活此后端。</td></tr><tr><td align="left">WXAgg</td><td align="center">Agg渲染到 wxWidgets 画布（需要wxPython 4）。可以使用 ％matplotlib wx 在IPython中激活此后端。</td></tr></tbody></table><h3 id="ipympl"><a href="#ipympl" class="headerlink" title="ipympl"></a>ipympl</h3><p>Jupyter小部件生态系统的移动速度太快，无法直接在Matplotlib中支持。安装ipympl</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install ipympl</span><br><span class="line">jupyter nbextension enable --py --sys-prefix ipympl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">conda install ipympl -c conda-forge</span><br></pre></td></tr></table></figure><p>请参阅 <a href="https://github.com/matplotlib/jupyter-matplotlib" target="_blank" rel="noopener">jupyter-matplotlib</a> 了解更多细节。</p><h3 id="GTK-和-Cairo"><a href="#GTK-和-Cairo" class="headerlink" title="GTK 和 Cairo"></a>GTK 和 Cairo</h3><p>GTK3 后端 (包括 GTK3Agg 和 GTK3Cairo) 依赖于 Cairo (pycairo&gt;=1.11.0 或 cairocffi).</p><h3 id="如何选择PyQt4或PySide？"><a href="#如何选择PyQt4或PySide？" class="headerlink" title="如何选择PyQt4或PySide？"></a>如何选择PyQt4或PySide？</h3><p>QT_API环境变量可以设置为 pyqt 或 pyside，分别使用 PyQt4 或 PySide。</p><p>由于要使用的绑定的默认值是PyQt4，matplotlib 首先尝试导入它，如果导入失败，它会尝试导入 PySide。</p><h3 id="什么是交互模式？"><a href="#什么是交互模式？" class="headerlink" title="什么是交互模式？"></a>什么是交互模式？</h3><p>使用交互式后端（请参阅<a href="https://www.matplotlib.org.cn/tutorials/introductory/usage.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%90%8E%E7%AB%AF%EF%BC%9F" target="_blank" rel="noopener">什么是后端？</a>）允许但本身并不需要或确保绘制到屏幕上。是否以及何时绘制到屏幕，以及在屏幕上绘制绘图后是否继续脚本或shell会话取决于调用的函数和方法，以及确定matplotlib是否处于“交互模式”的状态变量”。默认的布尔值由matplotlibrc文件设置，并且可以像任何其他配置参数一样进行自定义（请参阅<a href="https://matplotlib.org/tutorials/introductory/customizing.html" target="_blank" rel="noopener">使用样式表和rcParams自定义Matplotlib</a>）。它也可以通过<a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.interactive" target="_blank" rel="noopener">matplotlib.interactive()</a> 设置，并且可以通过<a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.is_interactive" target="_blank" rel="noopener">matplotlib.is_interactive()</a> 查询其值。无论是在脚本还是在shell中，在绘图命令流的中间打开和关闭交互模式很少需要并且可能令人困惑，因此在下文中我们将假设所有绘图都是以交互模式打开或关闭。</p><p>注意：与交互性相关的主要更改，特别是<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.show.html#matplotlib.pyplot.show" target="_blank" rel="noopener">show()</a>的角色和行为，在向matplotlib 1.0版的过渡中进行了更改，并在1.0.1中修复了错误。这里我们描述主要交互式后端的1.0.1版行为，但MacOSX除外。</p><p>交互模式也可以通过matplotlib.pyplot.ion()打开，并通过matplotlib.pyplot.ioff()关闭。</p><p>注意：交互模式在ipython和普通的python shell中使用合适的后端，但它在IDLE IDE中不起作用。如果默认后端不支持交互性，则通过“<a href="https://matplotlib.org/tutorials/introductory/usage.html#id4" target="_blank" rel="noopener">可以使用什么是后端？</a>”这个话题中讨论的任何方法显式激活交互式后端。</p><h3 id="交互例子"><a href="#交互例子" class="headerlink" title="交互例子"></a>交互例子</h3><p>从普通的python提示符，或者在没有选项的情况下调用ipython之后，试试这个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.ion()</span><br><span class="line">plt.plot([<span class="number">1.6</span>, <span class="number">2.7</span>])</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x20712cf1828&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/output_25_1.png" alt="png"></p><p>假设您运行的是1.0.1或更高版本，并且默认情况下安装并选择了交互式后端，您应该看到一个图，并且您的终端提示也应该是活动的; 您可以键入其他命令，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.title(<span class="string">"interactive test"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"index"</span>)</span><br></pre></td></tr></table></figure><pre><code>Text(0.5, 0, &apos;index&apos;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/output_27_1.png" alt="png"></p><p>然后你会看到每一行后都要更新绘图。从版本1.5开始，通过其他方式修改绘图也应该自动更新大多数后端的显示。获取对<a href="https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes" target="_blank" rel="noopener">Axes</a>实例的引用，并调用该实例的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ax = plt.gca()</span><br><span class="line">ax.plot([<span class="number">3.1</span>, <span class="number">2.2</span>])</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x20712a740f0&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/output_29_1.png" alt="png"></p><p>如果你使用的是某些后端（如macosx）或旧版本的matplotlib，则可能无法立即将新行添加到绘图中。在这种情况下，您需要显式调用<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.draw.html#matplotlib.pyplot.draw" target="_blank" rel="noopener">draw()</a> 以更新绘图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.draw()</span><br></pre></td></tr></table></figure><pre><code>&lt;Figure size 432x288 with 0 Axes&gt;</code></pre><h3 id="非交互式示例"><a href="#非交互式示例" class="headerlink" title="非交互式示例"></a>非交互式示例</h3><p>像上一个示例中一样开始一个新会话，但现在关闭交互模式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.ioff()</span><br><span class="line">plt.plot([<span class="number">1.6</span>, <span class="number">2.7</span>])</span><br></pre></td></tr></table></figure><pre><code>[&lt;matplotlib.lines.Line2D at 0x20712a9afd0&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/output_33_1.png" alt="png"></p><p>什么都没发生 - 或者至少没有任何东西出现在屏幕上（除非你使用macosx后端，这是异常的）。要显示绘图，您需要执行以下操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>现在你看到图像，但你的终端命令行没有响应; show() 命令会阻止其他命令的输入，直到您手动终止绘图窗口。</p><p>被迫使用阻塞功能？这有什么用，假设您需要一个脚本，将文件内容绘制到屏幕上。您想查看该图，然后结束脚本。如果没有一些阻塞命令（如show()），脚本会闪现图像，然后立即结束，屏幕上不显示任何内容。</p><p>此外，非交互模式会将所有图形延迟到调用show()；这比每次在脚本中添加新功能时重新绘制打印更有效。</p><p>在版本1.0之前，show()通常不能在单个脚本中调用多次(尽管有时可以不受限制)；对于版本1.0.1及更高版本，此限制已解除，因此可以编写如下脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.ioff()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    plt.plot(np.random.rand(<span class="number">10</span>))</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/output_37_0.png" alt="png"></p><p>这就形成了三个阴谋，一次一个。即。第一个地块关闭后，将显示第二个地块。</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>在交互模式下，pyplot功能会自动绘制到屏幕上。</p><p>交互式绘制时，如果除了pyplot函数之外还使用对象方法调用，则只要想要刷新绘图，就调用<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.draw.html#matplotlib.pyplot.draw" target="_blank" rel="noopener">draw()</a> 。</p><p>在要生成一个或多个图形的脚本中使用非交互模式，并在结束或生成一组新图形之前显示它们。在这种情况下，使用<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.show.html#matplotlib.pyplot.show" target="_blank" rel="noopener">show()</a>显示图形并阻止执行，直到您手动销毁它们。</p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>无论是以交互模式探索数据还是以编程方式保存大量绘图，渲染性能都可能成为您管道中的一个痛苦瓶颈。Matplotlib提供了几种方法来大大减少渲染时间，但代价是绘图外观略有变化（达到可设置的容差）。可用于缩短渲染时间的方法取决于正在创建的绘图类型。</p><h3 id="线段简化"><a href="#线段简化" class="headerlink" title="线段简化"></a>线段简化</h3><p>对于具有直线段的打印(例如，典型的直线打印、多边形轮廓等)，渲染性能可以由matplotLibrc文件中的path.Simplify和path.Simplify_Threshold参数控制(有关matplotlib文件的详细信息，请参见<a href="https://matplotlib.org/tutorials/introductory/customizing.html" target="_blank" rel="noopener">使用样式表和rcParams自定义Matplotlib</a>)。Simplify参数是一个布尔值，用于指示是否简化了直线段。path.Simplify_Threshold参数控制简化线段的程度；阈值越高，渲染速度越快。</p><p>以下脚本将首先显示数据而不进行任何简化，然后简化显示相同的数据。 尝试与它们互动：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置并创建要绘图的数据</span></span><br><span class="line">y = np.random.rand(<span class="number">100000</span>)</span><br><span class="line">y[<span class="number">50000</span>:] *= <span class="number">2</span></span><br><span class="line">y[np.logspace(<span class="number">1</span>, np.log10(<span class="number">50000</span>), <span class="number">400</span>).astype(int)] = <span class="number">-1</span></span><br><span class="line">mpl.rcParams[<span class="string">'path.simplify'</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">'path.simplify_threshold'</span>] = <span class="number">0.0</span></span><br><span class="line">plt.plot(y)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">'path.simplify_threshold'</span>] = <span class="number">1.0</span></span><br><span class="line">plt.plot(y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/output_40_0.png" alt="png"></p><p>Matplotlib目前默认为1/9的保守简化阈值。如果要更改默认设置以使用其他值，可以更改matplotlibrc文件。或者，您可以为交互式绘图（具有最大简化）创建新样式，并为出版质量绘图创建另一种样式（最小化简化）并根据需要激活它们。有关如何执行这些操作的说明，请参阅<a href="https://matplotlib.org/tutorials/introductory/customizing.html" target="_blank" rel="noopener">使用样式表和rcParams自定义Matplotlib</a>。</p><p>简化通过将线段迭代地合并为单个矢量直到下一个线段与矢量的垂直距离（在显示坐标空间中测量）大于 path.simplify_threshold 参数来工作。</p><p>注意：与版本细分如何简化相关的更改在版本2.1中进行。 2.1之前的这些参数仍将改善渲染时间，但2.1版及更高版本的某些类型数据的渲染时间将大大改善。</p><h3 id="标记简化"><a href="#标记简化" class="headerlink" title="标记简化"></a>标记简化</h3><p>标记也可以简化，尽管不如线段强大。标记简化仅适用于<a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D" target="_blank" rel="noopener">Line2D</a>对象（通过市场营销属性）。无论在哪里传递<a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D" target="_blank" rel="noopener">Line2D</a>构造参数，例如<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot" target="_blank" rel="noopener">matplotlib.pyplot.plot()</a> 和 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot" target="_blank" rel="noopener">matplotlib.axes.Axes.plot()</a>，都可以使用markevery参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y, markevery=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/output_42_1.png" alt="png"></p><p>市场营销论证允许天真的子采样，或尝试均匀间隔（沿x轴）采样。 有关更多信息，请参阅Markevery演示。</p><h3 id="将线分割成较小的块"><a href="#将线分割成较小的块" class="headerlink" title="将线分割成较小的块"></a>将线分割成较小的块</h3><p>如果您正在使用Agg后端（请参阅<a href="https://www.matplotlib.org.cn/tutorials/introductory/usage.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%90%8E%E7%AB%AF%EF%BC%9F" target="_blank" rel="noopener">什么是后端？</a>），那么您可以使用 agg.path.chunksize rc参数。这允许您指定块大小，并且任何具有大于该多个顶点的行将被分割成多行，每行不超过 agg.path.chunksize 许多顶点。（除非agg.path.chunksize为零，在这种情况下没有分块。）对于某种类型的数据，将线条分成合理的大小可以大大减少渲染时间。</p><p>以下脚本将首先显示没有任何块大小限制的数据，然后显示块大小为10,000的相同数据。当数字很大时，可以最好地看到差异，尝试最大化GUI然后与它们进行交互：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line">mpl.rcParams[<span class="string">'path.simplify_threshold'</span>] = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Setup, and create the data to plot</span></span><br><span class="line">y = np.random.rand(<span class="number">100000</span>)</span><br><span class="line">y[<span class="number">50000</span>:] *= <span class="number">2</span></span><br><span class="line">y[np.logspace(<span class="number">1</span>,np.log10(<span class="number">50000</span>), <span class="number">400</span>).astype(int)] = <span class="number">-1</span></span><br><span class="line">mpl.rcParams[<span class="string">'path.simplify'</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">'agg.path.chunksize'</span>] = <span class="number">0</span></span><br><span class="line">plt.plot(y)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">'agg.path.chunksize'</span>] = <span class="number">10000</span></span><br><span class="line">plt.plot(y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/output_44_0.png" alt="png"></p><h3 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h3><p>轴的默认图例行为尝试查找覆盖最少数据点的位置（loc =’best’）。 如果有大量数据点，这可能是非常昂贵的计算。 在这种情况下，您可能希望提供特定位置。</p><h3 id="使用快速的风格"><a href="#使用快速的风格" class="headerlink" title="使用快速的风格"></a>使用快速的风格</h3><p>快速样式可用于自动将简化和分块参数设置为合理的设置，以加快绘制大量数据的速度。它可以通过运行简单地使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.style <span class="keyword">as</span> mplstyle</span><br><span class="line">mplstyle.use(<span class="string">'fast'</span>)</span><br></pre></td></tr></table></figure><p>它的重量非常轻，因此它可以很好地与其他风格配合使用，只需确保最后应用快速样式，以便其他样式不会覆盖设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mplstyle.use([<span class="string">'dark_background'</span>, <span class="string">'ggplot'</span>, <span class="string">'fast'</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Matplotlib 是 Python 的绘图库。 它可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。&lt;br&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/matplotlibCourse/fengmian.png&quot; alt=&quot;png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.yinuxy.com/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.yinuxy.com/tags/Python/"/>
    
      <category term="matplotlib" scheme="https://blog.yinuxy.com/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Seaborn中文教程（转）</title>
    <link href="https://blog.yinuxy.com/2019/07/25/Lessons/seaborn/"/>
    <id>https://blog.yinuxy.com/2019/07/25/Lessons/seaborn/</id>
    <published>2019-07-25T00:30:00.000Z</published>
    <updated>2019-12-03T11:19:32.587Z</updated>
    
    <content type="html"><![CDATA[<p>Seaborn是基于matplotlib的图形可视化python包。它提供了一种高度交互式界面，便于用户能够做出各种有吸引力的统计图表。<br>Seaborn是在matplotlib的基础上进行了更高级的API封装，从而使得作图更加容易，在大多数情况下使用seaborn能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。应该把Seaborn视为matplotlib的补充，而不是替代物。同时它能高度兼容numpy与pandas数据结构以及scipy与statsmodels等统计模式。</p><a id="more"></a><h1 id="章节概要"><a href="#章节概要" class="headerlink" title="章节概要"></a>章节概要</h1><ol><li>Seaborn介绍：</li><li>安装Seaborn</li><li>加载库和数据文件</li><li>Seaborn的绘图功能</li><li>用Matplotlib定制</li><li>Pandas的作用</li><li>Seaborn 主题</li><li>调色盘</li><li>图形重叠</li><li>融合数据</li><li>迷你画廊 </li></ol><h2 id="安装Seaborn"><a href="#安装Seaborn" class="headerlink" title="安装Seaborn"></a>安装Seaborn</h2><p>首先确定你的电脑已安装以下应用 </p><ul><li>Python 2.7+ or Python 3 </li><li>Pandas </li><li>Matplotlib </li><li>Seaborn </li><li>Jupyter Notebook(可选)</li></ul><p>打开Jupyter Notebook, 过几秒钟会弹出网页窗口Home。<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/assets@master/1.png" alt="image.png"><br>点击右侧的New，新建一个Notebook，弹出一个新的网页窗口，点击上方可命名文件。<br><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/assets@master/2.png" alt="image.png"></p><h2 id="Seaborn介绍："><a href="#Seaborn介绍：" class="headerlink" title="Seaborn介绍："></a>Seaborn介绍：</h2><p>Seaborn属于Matplotlib的一个高级接口，为我们进行数据的可视化分析提供了极大的方便。 </p><h2 id="加载库和数据文件"><a href="#加载库和数据文件" class="headerlink" title="加载库和数据文件"></a>加载库和数据文件</h2><p>加载pandas、matplotlib、seaborn。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载pandas</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载matplotlib</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#在notebook中显示数据点</span></span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载seaborn</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sb</span><br></pre></td></tr></table></figure><p>这里提供了一个数据文件，下载链接为<br><a href="https://elitedatascience.com/wp-content/uploads/2017/04/Pokemon.csv" target="_blank" rel="noopener">Pokemon.csv</a></p><p>用pandas读取数据文件，并显示前五行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用pandas读取Pokemon.csv</span></span><br><span class="line">df = pd.read_csv(<span class="string">"f:/Pokemon.csv"</span>, encoding = <span class="string">"unicode_escape"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取前五行，编译后的结果为一个列表。</span></span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>#</th>      <th>Name</th>      <th>Type 1</th>      <th>Type 2</th>      <th>Total</th>      <th>HP</th>      <th>Attack</th>      <th>Defense</th>      <th>Sp. Atk</th>      <th>Sp. Def</th>      <th>Speed</th>      <th>Stage</th>      <th>Legendary</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>Bulbasaur</td>      <td>Grass</td>      <td>Poison</td>      <td>318</td>      <td>45</td>      <td>49</td>      <td>49</td>      <td>65</td>      <td>65</td>      <td>45</td>      <td>1</td>      <td>False</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>Ivysaur</td>      <td>Grass</td>      <td>Poison</td>      <td>405</td>      <td>60</td>      <td>62</td>      <td>63</td>      <td>80</td>      <td>80</td>      <td>60</td>      <td>2</td>      <td>False</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>Venusaur</td>      <td>Grass</td>      <td>Poison</td>      <td>525</td>      <td>80</td>      <td>82</td>      <td>83</td>      <td>100</td>      <td>100</td>      <td>80</td>      <td>3</td>      <td>False</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>Charmander</td>      <td>Fire</td>      <td>NaN</td>      <td>309</td>      <td>39</td>      <td>52</td>      <td>43</td>      <td>60</td>      <td>50</td>      <td>65</td>      <td>1</td>      <td>False</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>Charmeleon</td>      <td>Fire</td>      <td>NaN</td>      <td>405</td>      <td>58</td>      <td>64</td>      <td>58</td>      <td>80</td>      <td>65</td>      <td>80</td>      <td>2</td>      <td>False</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#绘制散点图</span></span><br><span class="line">sb.lmplot(x = <span class="string">'Attack'</span>, y = <span class="string">'Defense'</span>, data = df)</span><br></pre></td></tr></table></figure><pre><code>D:\Function\Anaconda3\lib\site-packages\scipy\stats\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval&lt;seaborn.axisgrid.FacetGrid at 0x2ea94d27c50&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_8_2.png" alt="png"></p><h2 id="Seaborn的绘图功能"><a href="#Seaborn的绘图功能" class="headerlink" title="Seaborn的绘图功能"></a>Seaborn的绘图功能</h2><p>Seaborn最大的优点之一在于其种类繁多的绘图功能，下面我们利用lmplot()函数，用一行代码来绘制散点图。我们希望x轴显示Attack数据，y轴显示Defense数据，则可以编写代码。 </p><p>事实上seaborn并没有专门用来绘制散点图的功能，实际上我们用它来拟合和绘制回归线。<br>幸运的是，我们可以通过设置函数的参数来得到我们想要的散点图。用fit_reg = False 移去回归线，用hug参数来用不同颜色显示Pokemon进化阶段的信息。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#移去回归线，用不同颜色来表示pokemon的进化阶段，即刻得到散点图：</span></span><br><span class="line"></span><br><span class="line">sb.lmplot(x = <span class="string">'Attack'</span>, y = <span class="string">'Defense'</span>, data = df,</span><br><span class="line">         fit_reg = <span class="literal">False</span>,</span><br><span class="line">         hue = <span class="string">'Stage'</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x2ea950e4278&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_11_1.png" alt="png"></p><p>从散点图可以看出，所有的数据点都分布在数轴的正半轴，然而散点图的数轴从负数开始的，我们可以对它进行改进。</p><h2 id="用Matplotlib定制"><a href="#用Matplotlib定制" class="headerlink" title="用Matplotlib定制"></a>用Matplotlib定制</h2><p>虽然Seaborn是Matplotlib的一个高级接口，但是我们有时候也需要用到Matplotlib。其中包括设置数轴的范围。我们利用Matplotlib的ylim()和xlim()函数来设置数轴的范围。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置数轴范围</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.gca().set(xlim = (<span class="number">0</span>, <span class="literal">None</span>), ylim = (<span class="number">0</span>, <span class="literal">None</span>),</span><br><span class="line">             xlabel=<span class="string">'Attack'</span>, ylabel=<span class="string">'Defense'</span>)</span><br></pre></td></tr></table></figure><pre><code>[(0, 1.0), Text(0, 0.5, &apos;Defense&apos;), (0, 1.0), Text(0.5, 0, &apos;Attack&apos;)]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_14_1.png" alt="png"></p><h2 id="Pandas的作用"><a href="#Pandas的作用" class="headerlink" title="Pandas的作用"></a>Pandas的作用</h2><p>尽管这是一个Seaborn教程，pandas依然在实际应用中起到了十分重要的作用。下面我们根据Pokemon的攻击数据来绘制箱形图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sb.boxplot(data = df)</span><br><span class="line"><span class="comment">#得到的箱形图：</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea950c99b0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_16_1.png" alt="png"></p><p>很好，这是一个良好的开端，但是我们可以移除不需要的几列数据。</p><pre><code>移除掉Total，因为我们有独立的统计数据。移除掉Stage跟Legendary，因为它们不是攻击统计数据。我们可以创建一个新的数据集stats_df，满足我们上述的要求。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建新数据集</span></span><br><span class="line">stats_df = df.drop([<span class="string">'Total'</span>, <span class="string">'Stage'</span>, <span class="string">'Legendary'</span>], axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Boxplot</span></span><br><span class="line">sb.boxplot(data = stats_df)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea962be358&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_18_1.png" alt="png"></p><p>得到了一个改进了的箱形图。</p><h2 id="Seaborn-主题"><a href="#Seaborn-主题" class="headerlink" title="Seaborn 主题"></a>Seaborn 主题</h2><p>Seaborn的另一个好处就是其恰到好处、开箱即用的风格主题。其默认的主题为“darkgrid”<br>下一步，我们把主题改为“whitegrid”来创建一个小提琴图</p><pre><code>小提琴图常常作为箱形图的替代小提琴图通过小提琴的厚度展示了数据的分布，而不仅仅是总结数据。根据Pokemon的主要类型，我们可以将Attack数据的分布可视化。 </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置主题</span></span><br><span class="line">sb.set_style(<span class="string">'whitegrid'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#violin plot</span></span><br><span class="line">sb.violinplot(x = <span class="string">'Type 1'</span>, y = <span class="string">'Attack'</span>, data = df)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea96343828&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_21_1.png" alt="png"></p><p>可以得到小提琴图，x轴显示的是Pokemon的Type1，y轴显示的是不同Pokemon的攻击数值。 </p><h2 id="调色盘"><a href="#调色盘" class="headerlink" title="调色盘"></a>调色盘</h2><p>Seaborn可以根据我们的需求，来设置颜色。我们可以创建一个python命令列表，用颜色的十六进制数值来设置。数值可以在<a href="https://bulbapedia.bulbagarden.net/wiki/Category:Type_color_templates" target="_blank" rel="noopener">Bulbapedia</a>中寻找。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建颜色列表</span></span><br><span class="line">pkmn_type_colors = [<span class="string">'#78C850'</span>,</span><br><span class="line">                    <span class="string">'#F08030'</span>,</span><br><span class="line">                    <span class="string">'#6890F0'</span>,</span><br><span class="line">                    <span class="string">'#A8B820'</span>,</span><br><span class="line">                    <span class="string">'#A8A878'</span>,</span><br><span class="line">                    <span class="string">'#A040A0'</span>,</span><br><span class="line">                    <span class="string">'#F8D030'</span>,</span><br><span class="line">                    <span class="string">'#E0C068'</span>,</span><br><span class="line">                    <span class="string">'#EE99AC'</span>,</span><br><span class="line">                    <span class="string">'#C03028'</span>,</span><br><span class="line">                    <span class="string">'#F85888'</span>,</span><br><span class="line">                    <span class="string">'#B8A038'</span>,</span><br><span class="line">                    <span class="string">'#705898'</span>,</span><br><span class="line">                    <span class="string">'#98D8D8'</span>,</span><br><span class="line">                    <span class="string">'#7038F8'</span></span><br><span class="line">                   ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入小提琴图中</span></span><br><span class="line">sb.violinplot(x = <span class="string">'Type 1'</span>, y = <span class="string">'Attack'</span>, data = df,</span><br><span class="line">             palette = pkmn_type_colors)</span><br></pre></td></tr></table></figure><pre><code>D:\Function\Anaconda3\lib\site-packages\scipy\stats\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea94d24470&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_24_2.png" alt="png"></p><p>为了能够让数据文件中的151个Pokemon都能够在图中简单展示，我们可以用群集图 swarm plot达到这一目的。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sb.swarmplot(x = <span class="string">'Type 1'</span>, y = <span class="string">'Attack'</span>, data = df,</span><br><span class="line">            palette = pkmn_type_colors)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea96d5bda0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_26_1.png" alt="png"></p><h2 id="图形重叠"><a href="#图形重叠" class="headerlink" title="图形重叠"></a>图形重叠</h2><p>我们已经绘制出了小提琴图和群集图，Seaborn允许我们将这两张图整合在一张图上，步骤如下：</p><pre><code>首先，我们用Matplotlib设置图形比例。然后，我们绘制小提琴图，用inner = None将小提琴中间的木杆移去。接着，我们绘制群集图，并将数据点的颜色变为黑色。最后，我们可以用Matplotlib设置一个标题。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置图形比例</span></span><br><span class="line">plt.figure(figsize = (<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建violinplot</span></span><br><span class="line">sb.violinplot(x = <span class="string">'Type 1'</span>, y = <span class="string">'Attack'</span>, data = df,</span><br><span class="line">              inner = <span class="literal">None</span>,</span><br><span class="line">             palette = pkmn_type_colors)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建swarmplot</span></span><br><span class="line">sb.swarmplot(x = <span class="string">'Type 1'</span>, y = <span class="string">'Attack'</span>, data = df,</span><br><span class="line">             color = <span class="string">'k'</span>,</span><br><span class="line">            palette = pkmn_type_colors)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置标题</span></span><br><span class="line">plt.title(<span class="string">'Attack by Type'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#其中alpha为透明度。 编译后可以得到如下图形。</span></span><br></pre></td></tr></table></figure><pre><code>Text(0.5, 1.0, &apos;Attack by Type&apos;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_28_1.png" alt="png"></p><p>现在我们可以清晰的看到不同Pokemon的攻击值了。那么我们怎么看其他的数值呢？</p><h2 id="融合数据"><a href="#融合数据" class="headerlink" title="融合数据"></a>融合数据</h2><p>为了展现其他的数据，我们当然可以重复以上的步骤，绘制多张图。但是我们同样也可以在一张图上表示所有的数据，这时候pandas就派上用场了。<br>我们可以利用pandas的melt()函数来将一些数据进行融合，这样就可以在不同Pokemon之间直接进行比对，melt()需要导入3个参数，分别为：</p><pre><code>需要融合的数据列表需要保留的ID变量，其他变量将会被Pandas融合。融合而成的新变量的名字。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据融合</span></span><br><span class="line">melted_df = pd.melt(stats_df,</span><br><span class="line">                   id_vars = [<span class="string">'Name'</span>, <span class="string">'Type 1'</span>, <span class="string">'Type 2'</span>],</span><br><span class="line">                   var_name = <span class="string">'Stat'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#前五行</span></span><br><span class="line">melted_df.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Name</th>      <th>Type 1</th>      <th>Type 2</th>      <th>Stat</th>      <th>value</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Bulbasaur</td>      <td>Grass</td>      <td>Poison</td>      <td>#</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>Ivysaur</td>      <td>Grass</td>      <td>Poison</td>      <td>#</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>Venusaur</td>      <td>Grass</td>      <td>Poison</td>      <td>#</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>Charmander</td>      <td>Fire</td>      <td>NaN</td>      <td>#</td>      <td>4</td>    </tr>    <tr>      <th>4</th>      <td>Charmeleon</td>      <td>Fire</td>      <td>NaN</td>      <td>#</td>      <td>5</td>    </tr>  </tbody></table></div><p>我们为已经融合的数据列表melted_df绘制群集图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据融合</span></span><br><span class="line">melted_df = pd.melt(stats_df,</span><br><span class="line">                   id_vars = [<span class="string">'Name'</span>, <span class="string">'Type 1'</span>, <span class="string">'Type 2'</span>],</span><br><span class="line">                   var_name = <span class="string">'Stat'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#前五行</span></span><br><span class="line">melted_df.head()</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制群集图</span></span><br><span class="line">sb.swarmplot(x = <span class="string">'Stat'</span>, y = <span class="string">'value'</span>, data = melted_df,</span><br><span class="line">            hue = <span class="string">'Type 1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#就可以得到如下的群集图。x轴为Stat中融合的六个变量，y轴为Stat的值，不同颜色代表不同的Pokemon Type 1。</span></span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea9887da58&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_33_1.png" alt="png"></p><p>这张图表有一些细节需要完善：</p><pre><code>扩大图表。使用split = True 来分隔色调。使用我们自定义的颜色。调整y轴的范围将图例放在右侧。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#扩大图表</span></span><br><span class="line">plt.figure(figsize = (<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制群集图，使用split = True 来分割，使用自定义的颜色</span></span><br><span class="line">sb.swarmplot(x = <span class="string">'Stat'</span>, y = <span class="string">'value'</span>, data = melted_df,</span><br><span class="line">            hue = <span class="string">"Type 1"</span>,</span><br><span class="line">            split = <span class="literal">True</span>,</span><br><span class="line">            palette = pkmn_type_colors)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调整Y轴的范围</span></span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">260</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将图例放在右侧</span></span><br><span class="line">plt.legend(bbox_to_anchor = (<span class="number">1</span>,<span class="number">1</span>), loc = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>D:\Function\Anaconda3\lib\site-packages\seaborn\categorical.py:2974: UserWarning: The `split` parameter has been renamed to `dodge`.  warnings.warn(msg, UserWarning)&lt;matplotlib.legend.Legend at 0x2ea98a7f0b8&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_35_2.png" alt="png"></p><p>即可得到一个已经细节完善后的图表。 </p><h2 id="迷你画廊"><a href="#迷你画廊" class="headerlink" title="迷你画廊"></a>迷你画廊</h2><h3 id="Heatmap"><a href="#Heatmap" class="headerlink" title="Heatmap"></a>Heatmap</h3><p>Heatmap可以帮助可视化矩阵状的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算相关性</span></span><br><span class="line">corr = stats_df.corr()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Hteatmap</span></span><br><span class="line">sb.heatmap(corr)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea98dac4e0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_38_1.png" alt="png"></p><h3 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h3><p>Histogram能够绘制变量的数值分布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#绘制直方图</span></span><br><span class="line">sb.distplot(df.Attack)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea988d2da0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_40_1.png" alt="png"></p><h3 id="Bar-Plot"><a href="#Bar-Plot" class="headerlink" title="Bar Plot"></a>Bar Plot</h3><p>条形图可以帮助分类变量的可视化。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#绘制条形图abs</span></span><br><span class="line">sb.countplot(x = <span class="string">'Type 1'</span>, data = df, palette = pkmn_type_colors)</span><br><span class="line"></span><br><span class="line"><span class="comment">#倾斜x轴的标签</span></span><br><span class="line">plt.xticks(rotation = <span class="number">-45</span>)</span><br></pre></td></tr></table></figure><pre><code>(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14]), &lt;a list of 15 Text xticklabel objects&gt;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_42_1.png" alt="png"></p><h3 id="Factor-plots"><a href="#Factor-plots" class="headerlink" title="Factor plots"></a>Factor plots</h3><p>Factor plots能够根据类别分离图表。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分离图表</span></span><br><span class="line">g = sb.factorplot(x = <span class="string">'Type 1'</span>,</span><br><span class="line">                  y = <span class="string">'Attack'</span>,</span><br><span class="line">                  data = df,</span><br><span class="line">                  hue = <span class="string">'Stage'</span>,  <span class="comment">#用不同的颜色表示Stage</span></span><br><span class="line">                  col = <span class="string">'Stage'</span>,  <span class="comment">#根据Stage来分离图表</span></span><br><span class="line">                  kind = <span class="string">'swarm'</span>, <span class="comment">#创建群集图</span></span><br><span class="line">                 )</span><br><span class="line"></span><br><span class="line"><span class="comment">#倾斜x轴的标签</span></span><br><span class="line">plt.xticks(rotation = <span class="number">-45</span>)</span><br></pre></td></tr></table></figure><pre><code>D:\Function\Anaconda3\lib\site-packages\seaborn\categorical.py:3666: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`&apos;point&apos;`) has changed `&apos;strip&apos;` in `catplot`.  warnings.warn(msg)(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14]), &lt;a list of 15 Text xticklabel objects&gt;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_44_2.png" alt="png"></p><p>可以得到根据Stage分离的三个图表，分别用不同颜色的点表示不同的Pokemon。 </p><h3 id="Density-Plot"><a href="#Density-Plot" class="headerlink" title="Density Plot"></a>Density Plot</h3><p>密度图显示的是两个变量之间的分布。<br>曲线越密集的地方说明两个变量的关系越近，越稀疏的地方说明关系越远。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建密度图</span></span><br><span class="line">sb.kdeplot(df.Attack, df.Defense)</span><br></pre></td></tr></table></figure><pre><code>D:\Function\Anaconda3\lib\site-packages\scipy\stats\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea9a8d6f60&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_47_2.png" alt="png"></p><h3 id="Joint-Distribution-Plot"><a href="#Joint-Distribution-Plot" class="headerlink" title="Joint Distribution Plot"></a>Joint Distribution Plot</h3><p>联合分布图将散点图和直方图的信息结合起来，提供双变量分布的详细信息。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建联合分布图</span></span><br><span class="line">sb.jointplot(x = <span class="string">'Attack'</span>, y = <span class="string">'Defense'</span>, data = df)</span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.JointGrid at 0x2ea9ab74da0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/seaborn/output_49_1.png" alt="png"></p><p>这里只是介绍了Seaborn常用的绘图功能，还有更强大的功能<a href="http://seaborn.pydata.org/examples/anscombes_quartet.html" target="_blank" rel="noopener">Example gallery</a>需要我们去学习，去探索。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Seaborn是基于matplotlib的图形可视化python包。它提供了一种高度交互式界面，便于用户能够做出各种有吸引力的统计图表。&lt;br&gt;Seaborn是在matplotlib的基础上进行了更高级的API封装，从而使得作图更加容易，在大多数情况下使用seaborn能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。应该把Seaborn视为matplotlib的补充，而不是替代物。同时它能高度兼容numpy与pandas数据结构以及scipy与statsmodels等统计模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.yinuxy.com/categories/Python/"/>
    
    
      <category term="Python" scheme="https://blog.yinuxy.com/tags/Python/"/>
    
      <category term="seaborn" scheme="https://blog.yinuxy.com/tags/seaborn/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习日记（二）</title>
    <link href="https://blog.yinuxy.com/2019/07/21/Study/SQL_learndiary2/"/>
    <id>https://blog.yinuxy.com/2019/07/21/Study/SQL_learndiary2/</id>
    <published>2019-07-21T00:30:00.000Z</published>
    <updated>2019-12-03T11:20:32.484Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.raincent.com/uploadfile/2015/1206/20151206103021361.jpg" alt></p><a id="more"></a><h2 id="章节导航"><a href="#章节导航" class="headerlink" title="章节导航"></a>章节导航</h2><hr><ol><li>SQL语句的多表查询方式</li><li>创建和管理DLL</li><li>数据处理 DML</li><li>约束</li></ol><h2 id="SQL语句的多表查询方式"><a href="#SQL语句的多表查询方式" class="headerlink" title="SQL语句的多表查询方式"></a>SQL语句的多表查询方式</h2><p>例如：按照 department_id 查询 employees(员工表)和 departments(部门表)的信息。</p><ul><li>方式一( 通用型):<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ... FROM ... WHERE</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.last_name, e.department_id, d.department_name</span><br><span class="line">FROM employees e, departments d</span><br><span class="line">WHERE e.`department_id` = d.`department_id`;</span><br></pre></td></tr></table></figure><ul><li>方式二：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ... FROM ... NATURAL JOIN ...</span><br></pre></td></tr></table></figure></li></ul><p>有局限性：会自动连接两个表中相同的列(可能有多个:department_id 和manager_id)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,department_id,department_name</span><br><span class="line">FROM employees</span><br><span class="line">NATURAL JOIN departments</span><br></pre></td></tr></table></figure><p>方式三：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ... JOIN ... USING ...</span><br></pre></td></tr></table></figure><p>有局限性：好于方式二，但若多表的连接列列名不同，此法不合适</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,department_id,department_name</span><br><span class="line">FROM employees</span><br><span class="line">JOIN departments</span><br><span class="line">USING(department_id)</span><br></pre></td></tr></table></figure><p>方式四：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ... FROM ... JOIN ... ON ...</span><br></pre></td></tr></table></figure><p>常用方式，较方式一，更易实现外联接(左、右、满)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,e.department_id,department_name</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN departments d</span><br><span class="line">ON e.department_id = d.department_id</span><br></pre></td></tr></table></figure><ol><li>内连接<ol><li></li></ol> –等值连接<br> –不等值连接<ol start="2"><li></li></ol> –非自连接<br> –自连接</li><li>外连接<br> –左外连接、右外连接、满外连接</li></ol><h2 id="创建和管理DLL"><a href="#创建和管理DLL" class="headerlink" title="创建和管理DLL"></a>创建和管理DLL</h2><p>  CRAETE TABLE /TRUNCATE TABLE /ALTER TABLE /REANME…TO/DROP TABLE ..操<br>作完以后，自动 commit;所以，rollback 对其操作，没有效果</p><ol><li><p>创建表</p><ol><li><p>直接创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table emp1(</span><br><span class="line">name varchar2(20),</span><br><span class="line">salary number(8,2)default 1000,</span><br><span class="line">id number(4),</span><br><span class="line">hire_date date</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>通过子查询的方式创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table emp2</span><br><span class="line">as</span><br><span class="line">select last_name name,employee_id id,hire_date</span><br><span class="line">from employees;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table emp2</span><br><span class="line">as</span><br><span class="line">select last_name name,employee_id id,hire_date</span><br><span class="line">from employees</span><br><span class="line">where department_id = 80;/where 1=2;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>修改表</p><ol><li><p>增加新的列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp1</span><br><span class="line">add(birthday date)</span><br></pre></td></tr></table></figure></li><li><p>修改现有的列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp1</span><br><span class="line">modify(name varchar2(25) default &apos;abc&apos;)</span><br></pre></td></tr></table></figure></li><li><p>重命名现有的列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp1</span><br><span class="line">rename column salary to sal;</span><br></pre></td></tr></table></figure></li><li><p>删除现有的列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp1</span><br><span class="line">drop column birthday;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>清空表中的数据(与 与 delete from table_name </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table emp2;</span><br></pre></td></tr></table></figure></li><li><p>重命名表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename emp2 to emp3;</span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table emp3;</span><br></pre></td></tr></table></figure></li></ol><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><ol><li><p>增</p><ol><li><p>增添一条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into [表名](,,,,,)</span><br><span class="line">values(,,,,,)</span><br></pre></td></tr></table></figure></li><li><p>从其它表中拷贝数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into [表名]</span><br><span class="line">select .... from [另一个表]</span><br><span class="line">where ....</span><br></pre></td></tr></table></figure></li></ol></li><li><p>改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update [表名]</span><br><span class="line">set .....</span><br><span class="line">where ....</span><br></pre></td></tr></table></figure></li><li><p>删</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from [表名]</span><br><span class="line">where ....</span><br></pre></td></tr></table></figure></li><li><p>查(最常用的数据库操作)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select ....</span><br><span class="line">from …</span><br><span class="line">where ….</span><br><span class="line">group by …</span><br><span class="line">having …</span><br><span class="line">order by ….</span><br></pre></td></tr></table></figure></li></ol><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>对创建的表的列属性、字段进行的限制。诸如:not null/unique/primary<br>key/foreign key/check</p><ol><li><p>如何定义约束— 在创建表的同时，添加对应属性的约束</p><ol><li><p>表级约束 &amp; 列级约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">create table emp1(</span><br><span class="line">employee_id number(8),</span><br><span class="line">salary number(8),</span><br><span class="line"></span><br><span class="line">-- 列级约束</span><br><span class="line">hire_date date not null,</span><br><span class="line">dept_id number(8),</span><br><span class="line">email varchar2(8) constraint emp1_email_uk unique,</span><br><span class="line">name varchar2(8) constaint emp1_name_uu not null,</span><br><span class="line">first_name varchar2(8),</span><br><span class="line"></span><br><span class="line">-- 表级约束</span><br><span class="line">constraint emp1_emp_id_pk primary key(employee_id),</span><br><span class="line">constraint emp1_fir_name_uk unique(first_name),</span><br><span class="line">constraint  emp1_dept_id_fk  foreign  key(dept_id)  references departments(department_id) ON DELETE CASCADE</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>只有 not null 时只能使用列级约束，其他的约束两种方式皆可    </p></li></ol></li><li><p>添加和删除表的约束– 在创建表以后，只能添加和删除，不能修改</p><ol><li><p>添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp1</span><br><span class="line">add constaint emp1_sal_ck check(salary &gt; 0)</span><br></pre></td></tr></table></figure><ol><li>对于 not null 来说，不用 add ，需要 modify ：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp1</span><br><span class="line">modify (salary not null)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp1</span><br><span class="line">drop constaint emp1_sal_ck</span><br></pre></td></tr></table></figure></li><li><p>使某一个约束失效：此约束还存在于表中，只是不起作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp1</span><br><span class="line">disable constraint emp1_email_uk;</span><br></pre></td></tr></table></figure></li><li><p>使某一个约束激活：激活以后，此约束具有约束力</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp1</span><br><span class="line">enable constraint emp1_email_uk;</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.raincent.com/uploadfile/2015/1206/20151206103021361.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://blog.yinuxy.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://blog.yinuxy.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL" scheme="https://blog.yinuxy.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习日记（一）</title>
    <link href="https://blog.yinuxy.com/2019/07/18/Study/SQL_learndiary1/"/>
    <id>https://blog.yinuxy.com/2019/07/18/Study/SQL_learndiary1/</id>
    <published>2019-07-18T00:30:00.000Z</published>
    <updated>2019-12-03T11:20:27.063Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.raincent.com/uploadfile/2015/1206/20151206103021361.jpg" alt></p><a id="more"></a><h2 id="数据库的好处"><a href="#数据库的好处" class="headerlink" title="数据库的好处"></a>数据库的好处</h2><pre><code>1.持久化数据到本地2.可以实现结构化查询，方便管理</code></pre><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><p>1、DB：数据库，保存一组有组织的数据的容器<br>2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据<br>3、SQL:结构化查询语言，用于和DBMS通信的语言</p><h2 id="数据库存储数据的特点"><a href="#数据库存储数据的特点" class="headerlink" title="数据库存储数据的特点"></a>数据库存储数据的特点</h2><p>1、将数据放到表中，表再放到库中<br>2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。<br>3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。<br>4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”<br>5、表中的数据是按行存储的，每一行类似于java中的“对象”。</p><h2 id="MySQL服务的启动和停止"><a href="#MySQL服务的启动和停止" class="headerlink" title="MySQL服务的启动和停止"></a>MySQL服务的启动和停止</h2><p>方式一：计算机——右击管理——服务<br>方式二：通过管理员身份运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net start 服务名（启动服务）</span><br><span class="line">net stop 服务名（停止服务）</span><br></pre></td></tr></table></figure><h2 id="MySQL服务的登录和退出"><a href="#MySQL服务的登录和退出" class="headerlink" title="MySQL服务的登录和退出"></a>MySQL服务的登录和退出</h2><p>方式一：通过mysql自带的客户端<br>只限于root用户</p><p>方式二：通过windows自带的客户端<br>登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql 【-h主机名 -P端口号 】-u用户名 -p密码</span><br></pre></td></tr></table></figure><p>退出：<br>exit或ctrl+C</p><h2 id="MySQL的常见命令"><a href="#MySQL的常见命令" class="headerlink" title="MySQL的常见命令"></a>MySQL的常见命令</h2><p>1.查看当前所有的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>2.打开指定的库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 库名</span><br></pre></td></tr></table></figure><p>3.查看当前库的所有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p>4.查看其它库的所有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables from 库名;</span><br></pre></td></tr></table></figure><p>5.创建表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line"></span><br><span class="line">列名 列类型,</span><br><span class="line">列名 列类型，</span><br><span class="line">。。。</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>6.查看表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure><p>7.查看服务器的版本<br>方式一：登录到mysql服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select version();</span><br></pre></td></tr></table></figure><p>方式二：没有登录到mysql服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br><span class="line">或</span><br><span class="line">mysql --V</span><br></pre></td></tr></table></figure><h2 id="MySQL的语法规范"><a href="#MySQL的语法规范" class="headerlink" title="MySQL的语法规范"></a>MySQL的语法规范</h2><p>1.不区分大小写,但建议关键字大写，表名、列名小写<br>2.每条命令最好用分号结尾<br>3.每条命令根据需要，可以进行缩进 或换行<br>4.注释<br>   单行注释：#注释文字<br>   单行注释：– 注释文字<br>   多行注释：/* 注释文字  */</p><h2 id="SQL的语言分类"><a href="#SQL的语言分类" class="headerlink" title="SQL的语言分类"></a>SQL的语言分类</h2><p>DQL（Data Query Language）：数据查询语言<br>    select<br>DML(Data Manipulate Language):数据操作语言<br>    insert 、update、delete<br>DDL（Data Define Languge）：数据定义语言<br>    create、drop、alter<br>TCL（Transaction Control Language）：事务控制语言<br>    commit、rollback</p><h2 id="SQL的常见命令"><a href="#SQL的常见命令" class="headerlink" title="SQL的常见命令"></a>SQL的常见命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">show databases； 查看所有的数据库</span><br><span class="line">use 库名； 打开指定 的库</span><br><span class="line">show tables ; 显示库中的所有表</span><br><span class="line">show tables from 库名;显示指定库中的所有表</span><br><span class="line">create table 表名(</span><br><span class="line">字段名 字段类型,</span><br><span class="line">字段名 字段类型</span><br><span class="line">); 创建表</span><br><span class="line"></span><br><span class="line">desc 表名; 查看指定表的结构</span><br><span class="line">select * from 表名;显示表中的所有数据</span><br></pre></td></tr></table></figure><h2 id="SQL实例"><a href="#SQL实例" class="headerlink" title="SQL实例"></a>SQL实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-- select department_name from departments</span><br><span class="line"></span><br><span class="line">-- select * from departments where department_name = &apos;Con&apos;</span><br><span class="line"></span><br><span class="line">-- select * from departments where department_name = &apos;Con&apos; or location_id = 1700</span><br><span class="line"></span><br><span class="line">-- select distinct location_id from departments;</span><br><span class="line"></span><br><span class="line">-- select department_id from departments where location_id in (1700)</span><br><span class="line"></span><br><span class="line">-- select department_id from departments where department_name like &apos;%Con%&apos;</span><br><span class="line"></span><br><span class="line">-- select count(depart) from departments;</span><br><span class="line"></span><br><span class="line">-- insert into departments(department_id, department_name, manager_id, location_id) values(290, &apos;Xrh&apos;, 117, 1100)</span><br><span class="line"></span><br><span class="line">-- update departments set manager_id = 512 where department_name = &apos;Gov&apos;</span><br><span class="line"></span><br><span class="line">-- DELETE from departments where department_id = 290;</span><br><span class="line"></span><br><span class="line">-- CREATE table person(</span><br><span class="line">-- username varchar(10),</span><br><span class="line">-- usergender varchar(6),</span><br><span class="line">-- userage int(4),</span><br><span class="line">-- primary key(username)</span><br><span class="line">-- );</span><br><span class="line"></span><br><span class="line">-- drop table person;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.raincent.com/uploadfile/2015/1206/20151206103021361.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://blog.yinuxy.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://blog.yinuxy.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL" scheme="https://blog.yinuxy.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>windows环境下搭建spark开发环境(IDEA)</title>
    <link href="https://blog.yinuxy.com/2019/07/14/Lessons/spark_init/"/>
    <id>https://blog.yinuxy.com/2019/07/14/Lessons/spark_init/</id>
    <published>2019-07-14T00:30:00.000Z</published>
    <updated>2019-12-03T11:19:38.134Z</updated>
    
    <content type="html"><![CDATA[<p>“大数据”（Big Data）指一般的软件工具难以捕捉、管理和分析的大容量数据。“大数据”之“大”，并不仅仅在于“容量之大”，更大的意义在于：通过对海量数据的交换、整合和分析，发现新的知识，创造新的价值，带来“大知识”、“大科技”、“大利润”和“大发展”。“大数据”能帮助企业找到一个个难题的答案，给企业带来前所未有的商业价值与机会。大数据同时也给企业的IT系统提出了巨大的挑战。通过不同行业的“大数据”应用状况，我们能够看到企业如何使用大数据和云计算技术，解决他们的难题，灵活、快速、高效地响应瞬息万变的市场需求。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>本文重点介绍在如何Windows 10下开发spark应用程序的依赖环境的搭建。</p><h1 id="本章概要"><a href="#本章概要" class="headerlink" title="本章概要"></a>本章概要</h1><hr><ol><li>版本说明</li><li>环境配置<ul><li>jdk配置</li><li>scala安装配置</li><li>spark安装配置</li><li>hadoop安装配置</li><li>Intellij IDEA下载与配置</li></ul></li></ol><h1 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h1><hr><ol><li>jdk:1.8</li><li>scala:2.12.0</li><li>spark:2.4.3</li><li>hadoop:2.7.7</li></ol><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><hr><h2 id="jdk配置"><a href="#jdk配置" class="headerlink" title="jdk配置"></a>jdk配置</h2><ol><li>下载：登录<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Oracle官网</a>，接受协议，注册登录，选择对应版本。因为我的本机是64位Windows，所以需要下载64位（Windows x64）JDK安装包。 <center><fancybox>![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/jdkdownload.png)</fancybox></center></li><li>Windows下安装JDK非常方便，双击安装程序后，直接单击下一步即可，默认安装到<code>C:\Program Files\Java</code>目录下。其间会安装JRE，默认一下步即可。</li><li>设置环境变量 :右键单击桌面上的“此电脑”图标，在弹出的右键快捷菜单中选择最后一个“属性”选项；在弹出的系统窗口中，单击左侧“高级系统设置”选项，弹出“系统属性”对话框，如下图。 <center><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/jdkpath.png" alt></fancybox></center>然后单击中间的“高级”选项卡，再单击下方的“环境变量(N)…”按钮。在弹出的环境变量对话框中，首先单击下方的“新建（W）…”按钮，然后在弹出的新建环境变量中输入对应的值。 <center><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/jdkpath1.png" alt></fancybox></center>在环境变量中找到“Path”添加jdk和jre下bin的地址，如下图：<center><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/jdkpath2.png" alt></fancybox></center>新建<code>CLASS_PATH</code>，如下图：<center><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/jdkpath3.png" alt></fancybox></center>检验配置是否成功，在cmd中运行java -version出现以下结果则说明jdk安装配置成功。<center><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/jdkpath4.png" alt></fancybox></center></li></ol><h2 id="scala安装配置"><a href="#scala安装配置" class="headerlink" title="scala安装配置"></a>scala安装配置</h2><ol><li>下载：通过<a href="http://spark.apache.org/downloads.html" target="_blank" rel="noopener">Spark官网下载</a>页面 可知“Note: Starting version 2.0, Spark is built with Scala 2.11 by default.”，下载Spark2.4.3对应的 <code>Scala 2.12.x</code>。登录<a href="http://www.scala-lang.org/" target="_blank" rel="noopener">Scala官网</a>，单击download按钮，然后再“Other Releases”标题下找到“Last 2.12.x maintenance release - Scala 2.12.0”链接。进入<a href="http://www.scala-lang.org/download/2.12.0.html" target="_blank" rel="noopener">downloan</a>页面，下拉找到如下图内容，下载msi格式的安装包即可。<center><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/scaladownload.png" alt></fancybox></center></li><li>安装: 默认安装到<code>C:\Program Files (x86)\scala</code>目录下<center><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/sparkinstall.png" alt></fancybox></center></li><li>环境变量：与设置Java环境变量类型， <code>SCALA_HOME=C:\Program Files (x86)\scala</code> <code>Path</code>环境变量在最后追加;设置成功后在<code>win+R</code>输入<code>cmd</code>后打开命令行输入<code>scala -version</code>可以看到安装的版本<code>%SCALA_HOME%\bin</code>；<center><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/scalainstalled.png" alt></fancybox></center></li></ol><h2 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h2><ol><li>Maven的安装与配置可以参考：《<a href="https://blog.csdn.net/chengyuqiang/article/details/72082149" target="_blank" rel="noopener">Hadoop基础教程-第4章 HDFS的Java API（4.1 Maven入门）</a>》<code>Intellij IDEA</code>上自带Maven，本文不再详细介绍<h2 id="Intellij-IDEA下载与配置"><a href="#Intellij-IDEA下载与配置" class="headerlink" title="Intellij IDEA下载与配置"></a>Intellij IDEA下载与配置</h2></li><li>下载与安装：登录<a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">官网</a>，按照自己的需求下载（<code>ultimate</code>，旗舰版）或者（<code>Community</code>，社区版）。<code>Ultimate</code>版本是商业软件，需要付费，<code>Community</code> 版为免费版，足够平时日常开发需要。比如这里直接下载<code>Community</code><center><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/Intellij%20IDEA.png" alt></fancybox></center></li><li>启动，安装完成后，单击<code>IntelliJ IDEA</code>图标即可启动<code>IntelliJ IDEA</code>. 由于是第一次安装，所以不需要导入配置。默认选项即可。<center><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/ideaconfig.png" alt></fancybox></center></li><li>选择“Evaluate for free”进入免费版<center><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea3.png" alt></fancybox></center>可以根据自身的习惯选择风格，并点击左下角“<code>Skip Remaining and Set Default”</code><center><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/Idea4.png" alt></fancybox></center></li><li>安装<code>scala</code>插件：点击左下角：<code>Configure-&gt;Plugins</code> 搜索并安装scala<center><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea5.png" alt></fancybox></center><center><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea6.png" alt></fancybox></center>安装完成后重启IDEA，然后开始配置全局scala SDK<fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea7.png" alt></fancybox></li><li>配置JDK： 首先打开<code>Project Structure</code>，如下图然后我们添加上文安装的JDK，配置完成后点击OK，如下图：<fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea8.png" alt></fancybox></li><li>配置JDK 配置全局scala SDK：选中“<code>Global Libraries</code>”，点击“+”号，在弹出的菜单中选中“Scala SDK”，如下图：<fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea9.png" alt></fancybox>在弹出的“<code>Select JAR&#39;s for the new Scala SDK</code>”中选择与本机scala版本一致的Version，在这里由于我的scala版本是2.12.0 所以我选择的是2.12.0版本<fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea10.png" alt></fancybox>点击右下角OK完成配置<h2 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h2></li><li>单击“<code>Create New Project</code>”<fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea11.png" alt></fancybox>选择maven<fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea12.png" alt></fancybox>点击<code>Next</code>，填写<code>GroupID</code>和<code>ArtifactID</code><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea13.png" alt></fancybox>点击Next，如下图：<fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea14.png" alt></fancybox>点击Finish，如下图：(在此步骤可以更改Content root 和 Module file location 的路径)<fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea15.png" alt></fancybox>创建完后右下角如果出现提示：<fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea16.png" alt></fancybox>请点击<code>Enable Auto-Import</code></li><li>创建完后将scala框架添加到项目(若不设置有可能无法创建 scala class)：在IDEA启动后进入的界面中，可以看到界面左侧的项目界面，已经有一个名称为simpleSpark的工程。请在该工程名称上右键单击，在弹出的菜单中，选择<code>Add Framework Surport</code>，在左侧有一排可勾选项，找到scala，勾选即可（我的这里没有找到，但是也能运行，为了确保无误，借用<a href="https://blog.csdn.net/haijiege/article/details/80775792" target="_blank" rel="noopener">haijiege</a>的图）<fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea17.png" alt></fancybox></li><li>将项目文件设置为source root ，选中scala–&gt;右键<code>快捷菜单</code>–&gt;<code>Mark Directory as</code> –&gt;<code>Sources root</code><fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea18.png" alt></fancybox>    </li></ol><h2 id="编辑代码"><a href="#编辑代码" class="headerlink" title="编辑代码"></a>编辑代码</h2><ol><li>pom.xml<br>Spark2.4.3 Maven库请参见 <a href="https://mvnrepository.com/artifact/org.apache.spark/spark-core_2.12/2.4.3" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.apache.spark/spark-core_2.12/2.4.3</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;groupId&gt;Test.pack&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;SparkTest&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">    &lt;inceptionYear&gt;2008&lt;/inceptionYear&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;spark.version&gt;2.4.3&lt;/spark.version&gt;</span><br><span class="line">        &lt;scala.version&gt;2.12.0&lt;/scala.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line"></span><br><span class="line">    &lt;pluginRepositories&gt;</span><br><span class="line">        &lt;pluginRepository&gt;</span><br><span class="line">            &lt;id&gt;scala-tools.org&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Scala-Tools Maven2 Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://scala-tools.org/repo-releases&lt;/url&gt;</span><br><span class="line">        &lt;/pluginRepository&gt;</span><br><span class="line">    &lt;/pluginRepositories&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-core --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spark-core_2.12&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.4.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.4&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.specs&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;specs&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.5&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.2-beta-5&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;classifier&gt;dist&lt;/classifier&gt;</span><br><span class="line">                    &lt;appendAssemblyId&gt;true&lt;/appendAssemblyId&gt;</span><br><span class="line">                    &lt;descriptorRefs&gt;</span><br><span class="line">                        &lt;descriptor&gt;jar-with-dependencies&lt;/descriptor&gt;</span><br><span class="line">                    &lt;/descriptorRefs&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class="line">                        &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;single&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><ol><li><p>保存pom.xml文件后，如果Intellij IDEA右下角出现如下提示，请单击“<code>Enable Auto-Import</code>” <fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea16.png" alt></fancybox></p></li><li><p>WordCount.scala :新建<code>Scala Class</code>类<code>WordCount.scala</code>，Scala源文件后缀名是.scala。通过右键刚刚设置为<code>sources root</code>的scala文件夹，就有了<code>new</code>-&gt;<code>scala class</code>的选项。新建一个<code>scala class</code>，并且命名<code>WordCount</code>，选择object类型。打开建好的<code>WordCount.scala</code>文件，清空！然后黏贴以下代码：</p></li></ol><h1 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h1><hr><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h3><p><a href="http://fff" target="_blank" rel="noopener">sampleDataSet</a></p><h3 id="程序文件"><a href="#程序文件" class="headerlink" title="程序文件"></a>程序文件</h3><p><a href="http://fff" target="_blank" rel="noopener">WordCount</a></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在源文件代码中右键单击–&gt;Run “<code>WordCount</code>”<fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea19.png" alt></fancybox></p><p>运行结果如下（输出的信息较多请上下翻一下就能找到）<fancybox><img src="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/idea20.png" alt></fancybox></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“大数据”（Big Data）指一般的软件工具难以捕捉、管理和分析的大容量数据。“大数据”之“大”，并不仅仅在于“容量之大”，更大的意义在于：通过对海量数据的交换、整合和分析，发现新的知识，创造新的价值，带来“大知识”、“大科技”、“大利润”和“大发展”。“大数据”能帮助企业找到一个个难题的答案，给企业带来前所未有的商业价值与机会。大数据同时也给企业的IT系统提出了巨大的挑战。通过不同行业的“大数据”应用状况，我们能够看到企业如何使用大数据和云计算技术，解决他们的难题，灵活、快速、高效地响应瞬息万变的市场需求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="https://blog.yinuxy.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="https://blog.yinuxy.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://blog.yinuxy.com/tags/spark/"/>
    
  </entry>
  
</feed>
