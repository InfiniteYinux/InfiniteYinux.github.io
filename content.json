{"meta":{"title":"Yinux's Blog","subtitle":"Welcome to Yinux's Blog","description":"不怕念起  就怕觉迟  理可顿悟  事须渐修","author":"Yinux","url":"https://www.codingpy.cn","root":"/"},"pages":[{"title":"404 Not Found","date":"2019-09-26T11:44:30.104Z","updated":"2019-07-14T02:58:13.373Z","comments":true,"path":"404.html","permalink":"https://www.codingpy.cn/404.html","excerpt":"","text":"404 Not Found***很抱歉，您访问的页面不存在*** ***可能是输入地址有误或该地址已被删除***"},{"title":"所有文章","date":"2019-07-14T03:04:00.716Z","updated":"2019-07-14T03:04:00.716Z","comments":true,"path":"archive/index.html","permalink":"https://www.codingpy.cn/archive/index.html","excerpt":"","text":""},{"title":"","date":"2019-09-20T13:44:34.350Z","updated":"2019-09-20T13:44:34.350Z","comments":true,"path":"about/index.html","permalink":"https://www.codingpy.cn/about/index.html","excerpt":"","text":"Yinux'S Blog | ABOUT document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; 您的浏览器不支持audio标签，无法播放音乐！ 江湖名称：Yinux 常驻之地：中国 | 湖北 | 武汉 初度之辰：1999 兴趣爱好：算法 | 前端 | 爬虫 技能 | Skill C/C++ 90% JAVA 45% PYTHON 90% HTML/CSS/JS 55% R 45% ALGORITHM 50% 简介 | Introduction ● 学历：在校本科信息工程大三学生； ● 现况：大数据方向-数据分析学徒； ● 目标：大数据分析师 or 算法工程师； ● 博客：记录学习，记录生活； ● 兴趣： 旅行 学习 交友 ● 其他：虽然很菜，但是在努力学习中！ 联系我 | Contact me Copyright © 2019 Yinux's Blog. All rights reserved. if ('addEventListener' in window) { window.addEventListener('load', function () { document.body.className = document.body.className.replace(/\\bis-loading\\b/, ''); }); document.body.className += (navigator.userAgent.match(/(MSIE|rv:11\\.0)/) ? ' is-ie' : ''); } uniform mat4 uProjection; uniform mat4 uModelview; uniform vec3 uResolution; uniform vec3 uOffset; uniform vec3 uDOF; //x:focus distance, y:focus radius, z:max radius uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start attribute vec3 aPosition; attribute vec3 aEuler; attribute vec2 aMisc; //x:size, y:fade varying vec3 pposition; varying float psize; varying float palpha; varying float pdist; //varying mat3 rotMat; varying vec3 normX; varying vec3 normY; varying vec3 normZ; varying vec3 normal; varying float diffuse; varying float specular; varying float rstop; varying float distancefade; void main(void) { // Projection is based on vertical angle vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0); gl_Position = uProjection * pos; gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5; pposition = pos.xyz; psize = aMisc.x; pdist = length(pos.xyz); palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z); vec3 elrsn = sin(aEuler); vec3 elrcs = cos(aEuler); mat3 rotx = mat3( 1.0, 0.0, 0.0, 0.0, elrcs.x, elrsn.x, 0.0, -elrsn.x, elrcs.x ); mat3 roty = mat3( elrcs.y, 0.0, -elrsn.y, 0.0, 1.0, 0.0, elrsn.y, 0.0, elrcs.y ); mat3 rotz = mat3( elrcs.z, elrsn.z, 0.0, -elrsn.z, elrcs.z, 0.0, 0.0, 0.0, 1.0 ); mat3 rotmat = rotx * roty * rotz; normal = rotmat[2]; mat3 trrotm = mat3( rotmat[0][0], rotmat[1][0], rotmat[2][0], rotmat[0][1], rotmat[1][1], rotmat[2][1], rotmat[0][2], rotmat[1][2], rotmat[2][2] ); normX = trrotm[0]; normY = trrotm[1]; normZ = trrotm[2]; const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237); float tmpdfs = dot(lit, normal); if(tmpdfs < 0.0) { normal = -normal; tmpdfs = dot(lit, normal); } diffuse = 0.4 + tmpdfs; vec3 eyev = normalize(-pos.xyz); if(dot(eyev, normal) > 0.0) { vec3 hv = normalize(eyev + lit); specular = pow(max(dot(hv, normal), 0.0), 20.0); } else { specular = 0.0; } rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0); rstop = pow(rstop, 0.5); //-0.69315 = ln(0.5) distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y)); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform vec3 uDOF; //x:focus distance, y:focus radius, z:max radius uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start const vec3 fadeCol = vec3(0.08, 0.03, 0.06); varying vec3 pposition; varying float psize; varying float palpha; varying float pdist; //varying mat3 rotMat; varying vec3 normX; varying vec3 normY; varying vec3 normZ; varying vec3 normal; varying float diffuse; varying float specular; varying float rstop; varying float distancefade; float ellipse(vec2 p, vec2 o, vec2 r) { vec2 lp = (p - o) / r; return length(lp) - 1.0; } void main(void) { vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0; vec3 d = vec3(0.0, 0.0, -1.0); float nd = normZ.z; //dot(-normZ, d); if(abs(nd) < 0.0001) discard; float np = dot(normZ, p); vec3 tp = p + d * np / nd; vec2 coord = vec2(dot(normX, tp), dot(normY, tp)); //angle = 15 degree const float flwrsn = 0.258819045102521; const float flwrcs = 0.965925826289068; mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs); vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm; float r; if(flwrp.x < 0.0) { r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5); } else { r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5); } if(r > rstop) discard; vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r); float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35)); col *= vec3(1.0, grady, grady); col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3)); col = col * diffuse + specular; col = mix(fadeCol, col, distancefade); float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0; alpha = smoothstep(0.0, 1.0, alpha) * palpha; gl_FragColor = vec4(col * 0.5, alpha); } uniform vec3 uResolution; attribute vec2 aPosition; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_Position = vec4(aPosition, 0.0, 1.0); texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5); screenCoord = aPosition.xy * vec2(uResolution.z, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform vec2 uTimes; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec3 col; float c; vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0); c = exp(-pow(length(tmpv) * 1.8, 2.0)); col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c); gl_FragColor = vec4(col * 0.5, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 col = texture2D(uSrc, texCoord); gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; uniform vec4 uBlurDir; //dir(x, y), stride(z, w) varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 col = texture2D(uSrc, texCoord); col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta); col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta); col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta); col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta); gl_FragColor = col / 5.0; } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_FragColor = texture2D(uSrc, texCoord); } uniform vec3 uResolution; attribute vec2 aPosition; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_Position = vec4(aPosition, 0.0, 1.0); texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5); screenCoord = aPosition.xy * vec2(uResolution.z, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform sampler2D uBloom; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 srccol = texture2D(uSrc, texCoord) * 2.0; vec4 bloomcol = texture2D(uBloom, texCoord); vec4 col; col = srccol + bloomcol * (vec4(1.0) + srccol); col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5); col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2) gl_FragColor = vec4(col.rgb, 1.0); gl_FragColor.a = 1.0; } L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"所有分类","date":"2019-07-14T07:04:48.616Z","updated":"2019-07-14T07:04:48.616Z","comments":true,"path":"categories/index.html","permalink":"https://www.codingpy.cn/categories/index.html","excerpt":"","text":""},{"title":"留言簿","date":"2019-09-30T16:38:32.974Z","updated":"2019-09-30T16:38:32.974Z","comments":true,"path":"comments/index.html","permalink":"https://www.codingpy.cn/comments/index.html","excerpt":"","text":"热烈庆祝中华人民共和国成立七十周年 热烈庆祝中华人民共和国成立七十周年 祝祖国母亲七十华诞生日快乐！ 采用 Gitalk 评论系统，需使用 GitHub 账号登录，请尽情灌水吧！"},{"title":"我的朋友们","date":"2019-09-20T13:41:11.780Z","updated":"2019-09-20T13:41:11.780Z","comments":true,"path":"friends/index.html","permalink":"https://www.codingpy.cn/friends/index.html","excerpt":"","text":"海内存知己，天涯若比邻！相见即是缘分，欢迎各位大佬留言互换友链！ 互换友链前请先添加本站点为友链！ 必须要有名称、头像链接、至少一个标签或者一个简介哦～ 一段时间内无法访问贵站将会被分组到【404 NOT FOUND】，请及时恢复站点！ 名字：Yinux’s Blog 头像：https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/avatar/avatar.png 主页：https://www.codingpy.cn/ 标签：Python、算法、大数据 简介：理想的生活就是生活的理想"},{"title":"","date":"2019-07-14T05:44:58.898Z","updated":"2019-07-14T05:44:58.898Z","comments":true,"path":"mylist/index.html","permalink":"https://www.codingpy.cn/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-07-14T07:25:45.967Z","updated":"2019-07-14T07:25:45.967Z","comments":true,"path":"tags/index.html","permalink":"https://www.codingpy.cn/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-09-27T03:09:50.750Z","updated":"2019-09-27T03:09:50.750Z","comments":true,"path":"box/index.html","permalink":"https://www.codingpy.cn/box/index.html","excerpt":"","text":"工具箱 | Yinux's Blog document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; 博客首页 文章归档 友情链接 吐槽留言 关于博主 邮件联系 GITHUB CSDN 博客园 知乎 #content { width: 100%; border-right: 0px } 资源导航 分流抢票 多线程秒单、稳定捡漏。 文件转换 免费，快速，在线文件转换 新浪短网址 多种后缀短网址生成 稿定抠图 免费在线抠图 FontAwesome 绝佳的图标字体库 Iconfont 阿里巴巴矢量图库 TinyPng 在线图片压缩 NameBeta 域名比价 U钙网 免费LOGO设计 PanDownload 百度网盘下载神器 必应壁纸 必应高清壁纸 第一PPT网 免费PPT模板下载 中国红客联盟 昔日的伟大组织 号码标记查询 号码标记查询与清除 Convertio 在线文件转换器 图片压缩 在线图片压缩器 工具合集 在线可视化编辑源码 HTML代码在线调试 CSS格式化 CSS横排、竖排格式化工具 CSS代码整理 CSS代码压缩、整理 JS代码整理 JS代码压缩、加密、解密 在线进制转换 进制转换 文本转ASCII码 在线文本转ASCII码 炫酷简历 HTML炫酷代码简历 娱乐游戏 圈小猫 点击圆点围住小猫 吃豆人 躲避怪物，吃掉豆子 2048 网页版2048 五子棋 网页版简易五子棋 网页钢琴 网页版电子钢琴 Mikutap 点击屏幕让miku唱歌 3D元素周期表 3D元素周期表 Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-26T16:24:22.690Z","updated":"2019-09-26T16:24:22.690Z","comments":true,"path":"box/2048/index.html","permalink":"https://www.codingpy.cn/box/2048/index.html","excerpt":"","text":"2048 | Yinux's Blog document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; document.onkeydown = function(ev){ var e = ev || event; if(e.keyCode == 40){ return false; } } 2048 使用方向键操作 New Game score:0 GAME OVER Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-26T16:20:51.820Z","updated":"2019-09-26T16:20:51.820Z","comments":true,"path":"box/ASCII/index.html","permalink":"https://www.codingpy.cn/box/ASCII/index.html","excerpt":"","text":"文本转ASCII码 | Yinux's Blog body { font-family: \"HanHei SC\", \"PingHei\", \"PingFang SC\", \"微软雅黑\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif; font-size: 13px; line-height: 1.846; color: #666666; } #footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;text-align:center}#footer address{display:inline-block;padding:2px 10px;color:rgba(0,0,0,.5);font-style:normal} #footer a{color:rgba(0,0,0,.5);cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} 文本转ASCII码 转换 请输入文本进行转换 function email2ascii() { var s = document.getElementById('html_content').value; var as = \"\"; for (var a = 0; a < s.length; a++) { as += \"&amp;#\" + s.charCodeAt(a) + \";\"; } document.getElementById('ascii_text').innerHTML = '' + as; return false; } Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-26T16:26:58.012Z","updated":"2019-09-26T16:26:58.012Z","comments":true,"path":"box/CSSFormatting/index.html","permalink":"https://www.codingpy.cn/box/CSSFormatting/index.html","excerpt":"","text":"CSS格式化工具 | Yinux's Blog * {padding: 0;margin: 0} html,body{margin:0;padding:0;font-size:14px;font-family:\"microsoft yahei\",arial;background-color:#f2f2f2;} h1{letter-spacing:3px;text-shadow:0 0 2px #999;margin:20px 0 20px 0;} input{border:0 none;} input:focus{outline: none;} #wrap {width:640px;margin:0 auto;} .toolarea {width:630px;height:500px;margin-bottom:15px;outline:none;padding:10px;border:5px solid #ccc;font-size:14px;} .btn {width:150px;height:40px;line-height:40px;color:#fff;font-size: 16px;letter-spacing:3px;border-radius: 5px;cursor: pointer;} .b1 {background-color: #5cb85c;margin-right:10px;} .b2 {background-color: #31b0d5;} #footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;text-align:center}#footer address{display:inline-block;padding:2px 10px;color:rgba(0,0,0,.5);font-style:normal} #footer a{color:rgba(0,0,0,.5);cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} CSS格式化工具 function $() { var elements = new Array(); for (var i = 0; i < arguments.length; i++) { var element = arguments[i]; if (typeof element == 'string') element = document.getElementById(element); if (arguments.length == 1) return element; elements.push(element); } return elements; } function CSSencode(code){ code = code.replace(/\\r\\n/ig,''); code = code.replace(/(\\s){2,}/ig,'$1'); code = code.replace(/\\t/ig,''); code = code.replace(/\\n\\}/ig,'\\}'); code = code.replace(/\\n\\{\\s*/ig,'\\{'); code = code.replace(/(\\S)\\s*\\}/ig,'$1\\}'); code = code.replace(/(\\S)\\s*\\{/ig,'$1\\{'); code = code.replace(/\\{\\s*(\\S)/ig,'\\{$1'); return code; } function CSSdecode(code){ code = code.replace(/(\\s){2,}/ig,'$1'); code = code.replace(/(\\S)\\s*\\{/ig,'$1 {'); code = code.replace(/\\*\\/(.[^\\}\\{]*)}/ig,'\\*\\/\\n$1}'); code = code.replace(/\\/\\*/ig,'\\n\\/\\*'); code = code.replace(/;\\s*(\\S)/ig,';\\n\\t$1'); code = code.replace(/\\}\\s*(\\S)/ig,'\\}\\n$1'); code = code.replace(/\\n\\s*\\}/ig,'\\n\\}'); code = code.replace(/\\{\\s*(\\S)/ig,'\\{\\n\\t$1'); code = code.replace(/(\\S)\\s*\\*\\//ig,'$1\\*\\/'); code = code.replace(/\\*\\/\\s*([^\\}\\{]\\S)/ig,'\\*\\/\\n\\t$1'); code = code.replace(/(\\S)\\}/ig,'$1\\n\\}'); code = code.replace(/(\\n){2,}/ig,'\\n'); code = code.replace(/:/ig,':'); code = code.replace(/ /ig,' '); return code; } Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-26T16:29:49.841Z","updated":"2019-09-26T16:29:49.841Z","comments":true,"path":"box/JSFinishing/index.html","permalink":"https://www.codingpy.cn/box/JSFinishing/index.html","excerpt":"","text":"JS代码整理 | Yinux's Blog /*正文样式*/ body { font-family: \"HanHei SC\", \"PingHei\", \"PingFang SC\", \"微软雅黑\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif; font-size: 13px; line-height: 1.846; color: #666666; } #footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;text-align:center}#footer address{display:inline-block;padding:2px 10px;color:rgba(0,0,0,.5);font-style:normal} #footer a{color:rgba(0,0,0,.5);cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} 工具准备就绪 加密层数: 0 层 | 处理时间: 0 毫秒 普通压缩 加密压缩 制表符缩进 2个空格缩进 4个空格缩进 8个空格缩进 复制内容 一键压缩 一键解密 /* 压缩：选择压缩类型，将代码压缩为更小体积 */ /* 解密：解密多种编码加密后的代码 */ /* 只需要粘贴js代码即可，无需&lt;script&gt;标签 */ /* 以下是演示代码 */ $.ajax({ type: \"GET\", url: \"url.php\", dataType: \"json\", cache: false, success: function (data) { alert(data); } }); 工具简介 ▶ 专门解码解密 eval(function(p,a,c,k,e,r){})、eval(function(p,a,c,k,e,d){}) 、eval(function(h,b,j,f,g,i){}) 等多种编码加密的代码。 ▶ 注：加密前请备份原 JS代码，加密后请测试JS代码能否正常使用。★ 代码在线运行测试工具 ★ var clipboard = new ClipboardJS('#copycode'); clipboard.on('success', function (e) { e.clearSelection(); layer.msg('复制成功'); }); clipboard.on('error', function (e) { e.clearSelection(); layer.msg('复制失败'); }); Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-26T16:31:57.499Z","updated":"2019-09-26T16:31:57.499Z","comments":true,"path":"box/PacMan/index.html","permalink":"https://www.codingpy.cn/box/PacMan/index.html","excerpt":"","text":"吃豆人 | Yinux's Blog body{background-color: #000} *{padding:0;margin:0;} .wrapper{ width: 960px; margin:0 auto; line-height:36px; text-align:center; color:#999; } canvas{display:block;background: #000;} .mod-botton{ height: 32px; padding: 15px 0; text-align: center; } #footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;text-align:center}#footer address{display:inline-block;padding:2px 10px;color:rgba(255, 255, 255, 0.5);font-style:normal} #footer a{color:rgba(255, 255, 255, 0.5);cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; 不支持画布 【按空格键开始、暂停或继续游戏，方向键移动吃豆人】 Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-26T16:35:36.704Z","updated":"2019-09-26T16:35:36.704Z","comments":true,"path":"box/VisualEditing/index.html","permalink":"https://www.codingpy.cn/box/VisualEditing/index.html","excerpt":"","text":"在线可视化 | TRHX'S BLOG body{min-height:150px;padding-top:90px;background: #f6f6f6;}.container{width:98%;padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}.CodeMirror{min-height:150px}#textareaCode{min-height:150px}#iframeResult{border:0!important;min-width:100px;width:100%;min-height:150px;background-color:#fff}@media screen and (max-width:768px){#textareaCode{height:300px}.CodeMirror{height:300px}#iframeResult{display: block;overflow: hidden;height:300px}.form-inline{padding:6px 0 2px 0}}.logo h1{background-image:url(https://www.mom1.cn/wp-content/uploads/2017/06/SFGFGD.png);background-repeat:no-repeat;text-indent:-9999px;width:160px;height:39px;margin-top:10px;display:block}#footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;background:rgba(0,0,0,.3);text-align:center}#footer address{display:inline-block;padding:2px 10px;color:#FFF;font-style:normal} #footer a{color:#FFF;cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} TRHX'S BLOG HTML源代码： 点击运行 我的第一个 HTML 页面 body 元素的内容会显示在浏览器中。 title 元素的内容会显示在浏览器的标题栏中。 运行结果： var mixedMode = {name: \"htmlmixed\",scriptTypes: [{matches: /\\/x-handlebars-template|\\/x-mustache/i,mode: null}, {matches: /(text|application)\\/(x-)?vb(a|script)/i,mode: \"vbscript\"}]}; var editor = CodeMirror.fromTextArea(document.getElementById(\"textareaCode\"), {mode: mixedMode,selectionPointer: true,lineNumbers: false,matchBrackets: true,indentUnit: 4,indentWithTabs: true}); window.addEventListener(\"resize\", autodivheight); var x = 0; function autodivheight(){ var winHeight=0; if (window.innerHeight) { winHeight = window.innerHeight; } else if ((document.body) && (document.body.clientHeight)) { winHeight = document.body.clientHeight; } //通过深入Document内部对body进行检测，获取浏览器窗口高度 if (document.documentElement && document.documentElement.clientHeight) { winHeight = document.documentElement.clientHeight; } height = winHeight*0.3 editor.setSize('100%', height); document.getElementById(\"iframeResult\").style.height= height + \"px\"; } function submitTryit() { var text = editor.getValue(); var patternHtml = /]*>((.|[\\n\\r])*)/im var patternHead = /]*>((.|[\\n\\r])*)/im var array_matches_head = patternHead.exec(text); var patternBody = /]*>((.|[\\n\\r])*)/im; var array_matches_body = patternBody.exec(text); var basepath_flag = 0; var basepath = ''; if(basepath_flag) { basepath = ''; } if(array_matches_head) { texttext = text.replace('', '' + basepath ); } else if (patternHtml) { texttext = text.replace('', '' + basepath + ''); } else if (array_matches_body) { texttext = text.replace('', '' + basepath ); } else { text = basepath + text; } var ifr = document.createElement(\"iframe\"); ifr.setAttribute(\"frameborder\", \"0\"); ifr.setAttribute(\"id\", \"iframeResult\"); document.getElementById(\"iframewrapper\").innerHTML = \"\"; document.getElementById(\"iframewrapper\").appendChild(ifr); var ifrw = (ifr.contentWindow) ? ifr.contentWindow : (ifr.contentDocument.document) ? ifr.contentDocument.document : ifr.contentDocument; ifrw.document.open(); ifrw.document.write(text); ifrw.document.close(); autodivheight(); } submitTryit(); autodivheight(); Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-26T16:22:53.580Z","updated":"2019-09-26T16:22:53.580Z","comments":true,"path":"box/cat/index.html","permalink":"https://www.codingpy.cn/box/cat/index.html","excerpt":"","text":"圈小猫 | Yinux's Blog body {background-color: #eeeeee} #catch-the-cat {width: 100%;text-align: center;} #footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;text-align:center}#footer address{display:inline-block;padding:2px 10px;color:rgba(0,0,0,.5);font-style:normal} #footer a{color:rgba(0,0,0,.5);cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; 游戏：《圈小猫》 window.game = new CatchTheCatGame({ w: 11, h: 11, r: 20, backgroundColor: 0xffffff, parent: 'catch-the-cat', statusBarAlign: 'center', credit: 'www.codingpy.cn' }); Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-26T16:31:04.696Z","updated":"2019-09-26T16:31:04.696Z","comments":true,"path":"box/mikutap/index.html","permalink":"https://www.codingpy.cn/box/mikutap/index.html","excerpt":"","text":"Mikutap | Yinux's Blog Mikutap十分抱歉您的浏览器并不支持本页面需要的特性 【开始】 【关于】 ※请打开声音并享受。 点击 &amp; 拖动或者按任意键! 背景音乐: 开启 × 声音来源 Hatsune Miku 作者 daniwell (twitter) 灵感来源 Patatap(令人赞叹的网页!) ▣全屏显示 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-26T16:32:49.153Z","updated":"2019-09-26T16:32:49.153Z","comments":true,"path":"box/piano/index.html","permalink":"https://www.codingpy.cn/box/piano/index.html","excerpt":"","text":"网页版钢琴 | Yinux's Blog 网页版钢琴 qaz sx dc rfv gb hn jm ik, w e t y u 弹奏方法 使用鼠标左键点击钢琴键，或者键入钢琴键上输入的键盘字母。 Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-27T02:51:31.009Z","updated":"2019-09-26T16:33:26.151Z","comments":true,"path":"box/resume/index.html","permalink":"https://www.codingpy.cn/box/resume/index.html","excerpt":"","text":"个人简历 | Yinux's Blog L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-26T16:25:10.047Z","updated":"2019-09-26T16:25:10.047Z","comments":true,"path":"box/CSSFinishing/index.html","permalink":"https://www.codingpy.cn/box/CSSFinishing/index.html","excerpt":"","text":"CSS代码整理 | Yinux's Blog body { font-family: \"HanHei SC\", \"PingHei\", \"PingFang SC\", \"微软雅黑\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif; font-size: 13px; line-height: 1.846; color: #666666; } #footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;text-align:center}#footer address{display:inline-block;padding:2px 10px;color:rgba(0,0,0,.5);font-style:normal} #footer a{color:rgba(0,0,0,.5);cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} 缩进: 4空格 2空格 Tab空格 ☑ 一键压缩 /* 选择缩进和括号，将自动整理代码 */ /* 点击一键压缩，将代码最小化，加快加载速度 */ body { font-family: \"HanHei SC\",\"PingHei\",\"PingFang SC\",\"微软雅黑\",\"Helvetica Neue\",\"Helvetica\",\"Arial\",sans-serif; font-size: 13px; line-height: 1.846; color: #666666; background-color: #ffffff; } 1 2 3 4 5 6 7 8 9 10 11 12 13&nbsp; 14 15 16 17 18 &nbsp; &nbsp; 打开大括号: 大括号同行 大括号独行 自动分号 function clear_code() { if (editor.getValue() == '') { layer.alert('是不是忘记填写内容了'); return false; } var txt = editor.getValue(); $.post(\"https://api.yum6.cn/css_format/\", { code: txt, method: 'ys' }, function (result) { layer.msg('压缩完成'); editor.setValue(result.content); }); } Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-26T16:28:20.551Z","updated":"2019-09-26T16:28:20.551Z","comments":true,"path":"box/gobang/index.html","permalink":"https://www.codingpy.cn/box/gobang/index.html","excerpt":"","text":"五子棋 | Yinux's Blog canvas { display: block; margin: 60px auto; box-shadow: -2px -2px 2px #efefef, 5px 5px 5px #b9b9b9; cursor: pointer; } .btn-wrap { display: flex; flex-direction: row; justify-content: center; } .btn-wrap div { margin: 0 10px; } div>span { display: inline-block; padding: 10px 20px; color: #fff; background-color: #6496ED; border-radius: 5px; cursor: pointer; } div.unable span { background: #D6D6D4; color: #adacaa; } #result-wrap { text-align: center; margin:50px 0 0 0; } #footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;text-align:center}#footer address{display:inline-block;padding:2px 10px;color:rgba(0,0,0,.5);font-style:normal} #footer a{color:rgba(0,0,0,.5);cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; 人机五子棋对弈 重新开始 悔棋 撤销悔棋 var over = false; var me = true; //我 var _nowi = 0, _nowj = 0; //记录自己下棋的坐标 var _compi = 0, _compj = 0; //记录计算机当前下棋的坐标 var _myWin = [], _compWin = []; //记录我，计算机赢的情况 var backAble = false, returnAble = false; var resultTxt = document.getElementById('result-wrap'); var chressBord = []; //棋盘 for (var i = 0; i < 15; i++) { chressBord[i] = []; for (var j = 0; j < 15; j++) { chressBord[i][j] = 0; } } //赢法的统计数组 var myWin = []; var computerWin = []; //赢法数组 var wins = []; for (var i = 0; i < 15; i++) { wins[i] = []; for (var j = 0; j < 15; j++) { wins[i][j] = []; } } var count = 0; //赢法总数 //横线赢法 for (var i = 0; i < 15; i++) { for (var j = 0; j < 11; j++) { for (var k = 0; k < 5; k++) { wins[i][j + k][count] = true; } count++; } } //竖线赢法 for (var i = 0; i < 15; i++) { for (var j = 0; j < 11; j++) { for (var k = 0; k < 5; k++) { wins[j + k][i][count] = true; } count++; } } //正斜线赢法 for (var i = 0; i < 11; i++) { for (var j = 0; j < 11; j++) { for (var k = 0; k < 5; k++) { wins[i + k][j + k][count] = true; } count++; } } //反斜线赢法 for (var i = 0; i < 11; i++) { for (var j = 14; j > 3; j--) { for (var k = 0; k < 5; k++) { wins[i + k][j - k][count] = true; } count++; } } // debugger; for (var i = 0; i < count; i++) { myWin[i] = 0; _myWin[i] = 0; computerWin[i] = 0; _compWin[i] = 0; } var chess = document.getElementById(\"chess\"); var context = chess.getContext('2d'); context.strokeStyle = '#bfbfbf'; //边框颜色 var backbtn = document.getElementById(\"goback\"); var returnbtn = document.getElementById(\"return\"); window.onload = function () { drawChessBoard(); // 画棋盘 } document.getElementById(\"restart\").onclick = function () { window.location.reload(); } // 我，下棋 chess.onclick = function (e) { if (over) { return; } if (!me) { return; } // 悔棋功能可用 backbtn.className = backbtn.className.replace(new RegExp(\"(\\\\s|^)unable(\\\\s|$)\"), \" \"); var x = e.offsetX; var y = e.offsetY; var i = Math.floor(x / 30); var j = Math.floor(y / 30); _nowi = i; _nowj = j; if (chressBord[i][j] == 0) { oneStep(i, j, me); chressBord[i][j] = 1; //我，已占位置 for (var k = 0; k < count; k++) { // 将可能赢的情况都加1 if (wins[i][j][k]) { // debugger; myWin[k]++; _compWin[k] = computerWin[k]; computerWin[k] = 6; //这个位置对方不可能赢了 if (myWin[k] == 5) { // window.alert('你赢了'); resultTxt.innerHTML = '恭喜，你赢了！'; over = true; } } } if (!over) { me = !me; computerAI(); } } } // 悔棋 backbtn.onclick = function (e) { if (!backAble) { return; } over = false; me = true; // resultTxt.innerHTML = 'emmmm，悔棋中'; // 撤销悔棋功能可用 returnbtn.className = returnbtn.className.replace(new RegExp(\"(\\\\s|^)unable(\\\\s|$)\"), \" \"); // 我，悔棋 chressBord[_nowi][_nowj] = 0; //我，已占位置 还原 minusStep(_nowi, _nowj); //销毁棋子 for (var k = 0; k < count; k++) { // 将可能赢的情况都减1 if (wins[_nowi][_nowj][k]) { myWin[k]--; computerWin[k] = _compWin[k]; //这个位置对方可能赢 } }// 计算机相应的悔棋 chressBord[_compi][_compj] = 0; //计算机，已占位置 还原 minusStep(_compi, _compj); //销毁棋子 for (var k = 0; k < count; k++) { // 将可能赢的情况都减1 if (wins[_compi][_compj][k]) { computerWin[k]--; myWin[k] = _myWin[i]; //这个位置对方可能赢 } } resultTxt.innerHTML = '--人机五子棋--'; returnAble = true; backAble = false; } // 撤销悔棋 returnbtn.onclick = function (e) { if (!returnAble) { return; } // 我，撤销悔棋 chressBord[_nowi][_nowj] = 1; //我，已占位置 oneStep(_nowi, _nowj, me); for (var k = 0; k < count; k++) { if (wins[_nowi][_nowj][k]) { myWin[k]++; _compWin[k] = computerWin[k]; computerWin[k] = 6; //这个位置对方不可能赢 } if (myWin[k] == 5) { resultTxt.innerHTML = '恭喜，你赢了！'; over = true; } }// 计算机撤销相应的悔棋 chressBord[_compi][_compj] = 2; //计算机，已占位置 oneStep(_compi, _compj, false); for (var k = 0; k < count; k++) { // 将可能赢的情况都减1 if (wins[_compi][_compj][k]) { computerWin[k]++; _myWin[k] = myWin[k]; myWin[k] = 6; //这个位置对方不可能赢 } if (computerWin[k] == 5) { resultTxt.innerHTML = '很遗憾，计算机赢了，继续加油哦！'; over = true; } } returnbtn.className += ' ' + 'unable'; returnAble = false; backAble = true; } // 计算机下棋 var computerAI = function () { var myScore = []; var computerScore = []; var max = 0; var u = 0, v = 0; for (var i = 0; i < 15; i++) { myScore[i] = []; computerScore[i] = []; for (var j = 0; j < 15; j++) { myScore[i][j] = 0; computerScore[i][j] = 0; } } for (var i = 0; i < 15; i++) { for (var j = 0; j < 15; j++) { if (chressBord[i][j] == 0) { for (var k = 0; k < count; k++) { if (wins[i][j][k]) { if (myWin[k] == 1) { myScore[i][j] += 200; } else if (myWin[k] == 2) { myScore[i][j] += 400; } else if (myWin[k] == 3) { myScore[i][j] += 2000; } else if (myWin[k] == 4) { myScore[i][j] += 10000; } if (computerWin[k] == 1) { computerScore[i][j] += 220; } else if (computerWin[k] == 2) { computerScore[i][j] += 420; } else if (computerWin[k] == 3) { computerScore[i][j] += 2100; } else if (computerWin[k] == 4) { computerScore[i][j] += 20000; } } } if (myScore[i][j] > max) { max = myScore[i][j]; u = i; v = j; } else if (myScore[i][j] == max) { if (computerScore[i][j] > computerScore[u][v]) { u = i; v = j; } } if (computerScore[i][j] > max) { max = computerScore[i][j]; u = i; v = j; } else if (computerScore[i][j] == max) { if (myScore[i][j] > myScore[u][v]) { u = i; v = j; } } } } } _compi = u; _compj = v; oneStep(u, v, false); chressBord[u][v] = 2;//计算机占据位置 for (var k = 0; k < count; k++) { if (wins[u][v][k]) { computerWin[k]++; _myWin[k] = myWin[k]; myWin[k] = 6; //这个位置对方不可能赢了 if (computerWin[k] == 5) { resultTxt.innerHTML = '很遗憾，计算机赢了，继续加油哦！'; over = true; } } } if (!over) { me = !me; } backAble = true; returnAble = false; var hasClass = new RegExp('unable').test(' ' + returnbtn.className + ' '); if (!hasClass) { returnbtn.className += ' ' + 'unable'; } } //绘画棋盘 var drawChessBoard = function () { for (var i = 0; i < 15; i++) { context.moveTo(15 + i * 30, 15); context.lineTo(15 + i * 30, 435); context.stroke(); context.moveTo(15, 15 + i * 30); context.lineTo(435, 15 + i * 30); context.stroke(); } } //画棋子 var oneStep = function (i, j, me) { context.beginPath(); context.arc(15 + i * 30, 15 + j * 30, 13, 0, 2 * Math.PI); // 画圆 context.closePath(); //渐变 var gradient = context.createRadialGradient(15 + i * 30 + 2, 15 + j * 30 - 2, 13, 15 + i * 30 + 2, 15 + j * 30 - 2, 0); if (me) { gradient.addColorStop(0, '#0a0a0a'); gradient.addColorStop(1, '#636766'); } else { gradient.addColorStop(0, '#d1d1d1'); gradient.addColorStop(1, '#f9f9f9'); } context.fillStyle = gradient; context.fill(); } //销毁棋子 var minusStep = function (i, j) { //擦除该圆 context.clearRect((i) * 30, (j) * 30, 30, 30); // 重画该圆周围的格子 context.beginPath(); context.moveTo(15 + i * 30, j * 30); context.lineTo(15 + i * 30, j * 30 + 30); context.moveTo(i * 30, j * 30 + 15); context.lineTo((i + 1) * 30, j * 30 + 15); context.stroke(); } Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-26T16:27:24.821Z","updated":"2019-09-26T16:27:24.821Z","comments":true,"path":"box/element/index.html","permalink":"https://www.codingpy.cn/box/element/index.html","excerpt":"","text":"3D元素周期表 | Yinux's Blog html, body { height: 100%; } body { background-color: #000000; margin: 0; font-family: Helvetica, sans-serif;; overflow: hidden; } a { color: #ffffff; } #info { position: absolute; width: 100%; color: #ffffff; padding: 5px; font-family: Monospace; font-size: 13px; font-weight: bold; text-align: center; z-index: 1; } #menu { position: absolute; bottom: 20px; width: 100%; text-align: center; font-family: verdana,Tahoma,Arial,Hei,\"Microsoft Yahei\",SimHei; } .element { width: 120px; height: 160px; box-shadow: 0px 0px 12px rgba(0,255,255,0.5); border: 1px solid rgba(127,255,255,0.25); text-align: center; cursor: default; } .element:hover { box-shadow: 0px 0px 12px rgba(0,255,255,0.75); border: 1px solid rgba(127,255,255,0.75); } .element .number { position: absolute; top: 20px; right: 20px; font-size: 12px; color: rgba(127,255,255,0.75); } .element .symbol { position: absolute; top: 40px; left: 0px; right: 0px; font-size: 60px; font-weight: bold; color: rgba(255,255,255,0.75); text-shadow: 0 0 10px rgba(0,255,255,0.95); } .element .details { position: absolute; bottom: 15px; left: 0px; right: 0px; font-size: 12px; color: rgba(127,255,255,0.75); } button { color: rgba(127,255,255,0.75); background: transparent; outline: 1px solid rgba(127,255,255,0.75); border: 0px; padding: 5px 10px; cursor: pointer; } button:hover { background-color: rgba(0,255,255,0.5); } button:active { color: #000000; background-color: rgba(0,255,255,0.75); } 表面 球体 螺旋 网格 var table = [ \"H\", \"Hydrogen\", \"1.00794\", 1, 1, \"He\", \"Helium\", \"4.002602\", 18, 1, \"Li\", \"Lithium\", \"#6.941\", 1, 2, \"Be\", \"Beryllium\", \"9.012182\", 2, 2, \"B\", \"Boron\", \"#10.811\", 13, 2, \"C\", \"Carbon\", \"#12.0107\", 14, 2, \"N\", \"Nitrogen\", \"#14.0067\", 15, 2, \"O\", \"Oxygen\", \"#15.9994\", 16, 2, \"F\", \"Fluorine\", \"18.9984032\", 17, 2, \"Ne\", \"Neon\", \"#20.1797\", 18, 2, \"Na\", \"Sodium\", \"22.98976...\", 1, 3, \"Mg\", \"Magnesium\", \"#24.305\", 2, 3, \"Al\", \"Aluminium\", \"26.9815386\", 13, 3, \"Si\", \"Silicon\", \"#28.0855\", 14, 3, \"P\", \"Phosphorus\", \"30.973762\", 15, 3, \"S\", \"Sulfur\", \"#32.065\", 16, 3, \"Cl\", \"Chlorine\", \"#35.453\", 17, 3, \"Ar\", \"Argon\", \"#39.948\", 18, 3, \"K\", \"Potassium\", \"#39.948\", 1, 4, \"Ca\", \"Calcium\", \"#40.078\", 2, 4, \"Sc\", \"Scandium\", \"44.955912\", 3, 4, \"Ti\", \"Titanium\", \"#47.867\", 4, 4, \"V\", \"Vanadium\", \"#50.9415\", 5, 4, \"Cr\", \"Chromium\", \"#51.9961\", 6, 4, \"Mn\", \"Manganese\", \"54.938045\", 7, 4, \"Fe\", \"Iron\", \"#55.845\", 8, 4, \"Co\", \"Cobalt\", \"58.933195\", 9, 4, \"Ni\", \"Nickel\", \"#58.6934\", 10, 4, \"Cu\", \"Copper\", \"#63.546\", 11, 4, \"Zn\", \"Zinc\", \"#65.38\", 12, 4, \"Ga\", \"Gallium\", \"#69.723\", 13, 4, \"Ge\", \"Germanium\", \"#72.63\", 14, 4, \"As\", \"Arsenic\", \"#74.9216\", 15, 4, \"Se\", \"Selenium\", \"#78.96\", 16, 4, \"Br\", \"Bromine\", \"#79.904\", 17, 4, \"Kr\", \"Krypton\", \"#83.798\", 18, 4, \"Rb\", \"Rubidium\", \"#85.4678\", 1, 5, \"Sr\", \"Strontium\", \"#87.62\", 2, 5, \"Y\", \"Yttrium\", \"88.90585\", 3, 5, \"Zr\", \"Zirconium\", \"#91.224\", 4, 5, \"Nb\", \"Niobium\", \"92.90628\", 5, 5, \"Mo\", \"Molybdenum\", \"#95.96\", 6, 5, \"Tc\", \"Technetium\", \"(98)\", 7, 5, \"Ru\", \"Ruthenium\", \"#101.07\", 8, 5, \"Rh\", \"Rhodium\", \"#102.9055\", 9, 5, \"Pd\", \"Palladium\", \"#106.42\", 10, 5, \"Ag\", \"Silver\", \"#107.8682\", 11, 5, \"Cd\", \"Cadmium\", \"#112.411\", 12, 5, \"In\", \"Indium\", \"#114.818\", 13, 5, \"Sn\", \"Tin\", \"#118.71\", 14, 5, \"Sb\", \"Antimony\", \"#121.76\", 15, 5, \"Te\", \"Tellurium\", \"127.6\", 16, 5, \"I\", \"Iodine\", \"126.90447\", 17, 5, \"Xe\", \"Xenon\", \"#131.293\", 18, 5, \"Cs\", \"Caesium\", \"#132.9054\", 1, 6, \"Ba\", \"Barium\", \"#132.9054\", 2, 6, \"La\", \"Lanthanum\", \"138.90547\", 4, 9, \"Ce\", \"Cerium\", \"#140.116\", 5, 9, \"Pr\", \"Praseodymium\", \"140.90765\", 6, 9, \"Nd\", \"Neodymium\", \"#144.242\", 7, 9, \"Pm\", \"Promethium\", \"(145)\", 8, 9, \"Sm\", \"Samarium\", \"#150.36\", 9, 9, \"Eu\", \"Europium\", \"#151.964\", 10, 9, \"Gd\", \"Gadolinium\", \"#157.25\", 11, 9, \"Tb\", \"Terbium\", \"158.92535\", 12, 9, \"Dy\", \"Dysprosium\", \"162.5\", 13, 9, \"Ho\", \"Holmium\", \"164.93032\", 14, 9, \"Er\", \"Erbium\", \"#167.259\", 15, 9, \"Tm\", \"Thulium\", \"168.93421\", 16, 9, \"Yb\", \"Ytterbium\", \"#173.054\", 17, 9, \"Lu\", \"Lutetium\", \"#174.9668\", 18, 9, \"Hf\", \"Hafnium\", \"#178.49\", 4, 6, \"Ta\", \"Tantalum\", \"180.94788\", 5, 6, \"W\", \"Tungsten\", \"#183.84\", 6, 6, \"Re\", \"Rhenium\", \"#186.207\", 7, 6, \"Os\", \"Osmium\", \"#190.23\", 8, 6, \"Ir\", \"Iridium\", \"#192.217\", 9, 6, \"Pt\", \"Platinum\", \"#195.084\", 10, 6, \"Au\", \"Gold\", \"196.966569\", 11, 6, \"Hg\", \"Mercury\", \"#200.59\", 12, 6, \"Tl\", \"Thallium\", \"#204.3833\", 13, 6, \"Pb\", \"Lead\", \"207.2\", 14, 6, \"Bi\", \"Bismuth\", \"#208.9804\", 15, 6, \"Po\", \"Polonium\", \"(209)\", 16, 6, \"At\", \"Astatine\", \"(210)\", 17, 6, \"Rn\", \"Radon\", \"(222)\", 18, 6, \"Fr\", \"Francium\", \"(223)\", 1, 7, \"Ra\", \"Radium\", \"(226)\", 2, 7, \"Ac\", \"Actinium\", \"(227)\", 4, 10, \"Th\", \"Thorium\", \"232.03806\", 5, 10, \"Pa\", \"Protactinium\", \"#231.0588\", 6, 10, \"U\", \"Uranium\", \"238.02891\", 7, 10, \"Np\", \"Neptunium\", \"(237)\", 8, 10, \"Pu\", \"Plutonium\", \"(244)\", 9, 10, \"Am\", \"Americium\", \"(243)\", 10, 10, \"Cm\", \"Curium\", \"(247)\", 11, 10, \"Bk\", \"Berkelium\", \"(247)\", 12, 10, \"Cf\", \"Californium\", \"(251)\", 13, 10, \"Es\", \"Einstenium\", \"(252)\", 14, 10, \"Fm\", \"Fermium\", \"(257)\", 15, 10, \"Md\", \"Mendelevium\", \"(258)\", 16, 10, \"No\", \"Nobelium\", \"(259)\", 17, 10, \"Lr\", \"Lawrencium\", \"(262)\", 18, 10, \"Rf\", \"Rutherfordium\", \"(267)\", 4, 7, \"Db\", \"Dubnium\", \"(268)\", 5, 7, \"Sg\", \"Seaborgium\", \"(271)\", 6, 7, \"Bh\", \"Bohrium\", \"(272)\", 7, 7, \"Hs\", \"Hassium\", \"(270)\", 8, 7, \"Mt\", \"Meitnerium\", \"(276)\", 9, 7, \"Ds\", \"Darmstadium\", \"(281)\", 10, 7, \"Rg\", \"Roentgenium\", \"(280)\", 11, 7, \"Cn\", \"Copernicium\", \"(285)\", 12, 7, \"Uut\", \"Unutrium\", \"(284)\", 13, 7, \"Fl\", \"Flerovium\", \"(289)\", 14, 7, \"Uup\", \"Ununpentium\", \"(288)\", 15, 7, \"Lv\", \"Livermorium\", \"(293)\", 16, 7, \"Uus\", \"Ununseptium\", \"(294)\", 17, 7, \"Uuo\", \"Ununoctium\", \"(294)\", 18, 7 ]; var camera, scene, renderer; var controls; var objects = []; var targets = { table: [], sphere: [], helix: [], grid: [] }; init(); animate(); function init() { camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 10000 ); camera.position.z = 3000; scene = new THREE.Scene(); // table for ( var i = 0; i < table.length; i += 5 ) { var element = document.createElement( 'div' ); element.className = 'element'; element.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')'; var number = document.createElement( 'div' ); number.className = 'number'; number.textContent = (i/5) + 1; element.appendChild( number ); var symbol = document.createElement( 'div' ); symbol.className = 'symbol'; symbol.textContent = table[ i ]; element.appendChild( symbol ); var details = document.createElement( 'div' ); details.className = 'details'; details.innerHTML = table[ i + 1 ] + '' + table[ i + 2 ]; element.appendChild( details ); var object = new THREE.CSS3DObject( element ); object.position.x = Math.random() * 4000 - 2000; object.position.y = Math.random() * 4000 - 2000; object.position.z = Math.random() * 4000 - 2000; scene.add( object ); objects.push( object ); // var object = new THREE.Object3D(); object.position.x = ( table[ i + 3 ] * 140 ) - 1330; object.position.y = - ( table[ i + 4 ] * 180 ) + 990; targets.table.push( object ); } // sphere var vector = new THREE.Vector3(); for ( var i = 0, l = objects.length; i < l; i ++ ) { var phi = Math.acos( -1 + ( 2 * i ) / l ); var theta = Math.sqrt( l * Math.PI ) * phi; var object = new THREE.Object3D(); object.position.x = 800 * Math.cos( theta ) * Math.sin( phi ); object.position.y = 800 * Math.sin( theta ) * Math.sin( phi ); object.position.z = 800 * Math.cos( phi ); vector.copy( object.position ).multiplyScalar( 2 ); object.lookAt( vector ); targets.sphere.push( object ); } // helix var vector = new THREE.Vector3(); for ( var i = 0, l = objects.length; i < l; i ++ ) { var phi = i * 0.175 + Math.PI; var object = new THREE.Object3D(); object.position.x = 900 * Math.sin( phi ); object.position.y = - ( i * 8 ) + 450; object.position.z = 900 * Math.cos( phi ); vector.x = object.position.x * 2; vector.y = object.position.y; vector.z = object.position.z * 2; object.lookAt( vector ); targets.helix.push( object ); } // grid for ( var i = 0; i < objects.length; i ++ ) { var object = new THREE.Object3D(); object.position.x = ( ( i % 5 ) * 400 ) - 800; object.position.y = ( - ( Math.floor( i / 5 ) % 5 ) * 400 ) + 800; object.position.z = ( Math.floor( i / 25 ) ) * 1000 - 2000; targets.grid.push( object ); } // renderer = new THREE.CSS3DRenderer(); renderer.setSize( window.innerWidth, window.innerHeight ); renderer.domElement.style.position = 'absolute'; document.getElementById( 'container' ).appendChild( renderer.domElement ); // controls = new THREE.TrackballControls( camera, renderer.domElement ); controls.rotateSpeed = 0.5; controls.minDistance = 500; controls.maxDistance = 6000; controls.addEventListener( 'change', render ); var button = document.getElementById( 'table' ); button.addEventListener( 'click', function ( event ) { transform( targets.table, 2000 ); }, false ); var button = document.getElementById( 'sphere' ); button.addEventListener( 'click', function ( event ) { transform( targets.sphere, 2000 ); }, false ); var button = document.getElementById( 'helix' ); button.addEventListener( 'click', function ( event ) { transform( targets.helix, 2000 ); }, false ); var button = document.getElementById( 'grid' ); button.addEventListener( 'click', function ( event ) { transform( targets.grid, 2000 ); }, false ); transform( targets.table, 5000 ); // window.addEventListener( 'resize', onWindowResize, false ); } function transform( targets, duration ) { TWEEN.removeAll(); for ( var i = 0; i < objects.length; i ++ ) { var object = objects[ i ]; var target = targets[ i ]; new TWEEN.Tween( object.position ) .to( { x: target.position.x, y: target.position.y, z: target.position.z }, Math.random() * duration + duration ) .easing( TWEEN.Easing.Exponential.InOut ) .start(); new TWEEN.Tween( object.rotation ) .to( { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, Math.random() * duration + duration ) .easing( TWEEN.Easing.Exponential.InOut ) .start(); } new TWEEN.Tween( this ) .to( {}, duration * 2 ) .onUpdate( render ) .start(); } function onWindowResize() { camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize( window.innerWidth, window.innerHeight ); render(); } function animate() { requestAnimationFrame( animate ); TWEEN.update(); controls.update(); } function render() { renderer.render( scene, camera ); } L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-26T16:29:13.774Z","updated":"2019-09-26T16:29:13.774Z","comments":true,"path":"box/hex/index.html","permalink":"https://www.codingpy.cn/box/hex/index.html","excerpt":"","text":"在线进制转换 | Yinux's Blog /*正文样式*/ body { font-family: \"HanHei SC\", \"PingHei\", \"PingFang SC\", \"微软雅黑\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif; font-size: 13px; line-height: 1.846; color: #666666; } #footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;text-align:center}#footer address{display:inline-block;padding:2px 10px;color:rgba(0,0,0,.5);font-style:normal} #footer a{color:rgba(0,0,0,.5);cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} 在线进制转换 原始进制 2进制 4进制 8进制 10进制 16进制 32进制 2进制 3进制 4进制 5进制 6进制 7进制 8进制 9进制 10进制 11进制 12进制 13进制 14进制 15进制 16进制 17进制 18进制 19进制 20进制 21进制 22进制 23进制 24进制 25进制 26进制 27进制 28进制 29进制 30进制 31进制 32进制 33进制 34进制 35进制 36进制 转换数字 目标进制 2进制 4进制 8进制 10进制 16进制 32进制 2进制 3进制 4进制 5进制 6进制 7进制 8进制 9进制 10进制 11进制 12进制 13进制 14进制 15进制 16进制 17进制 18进制 19进制 20进制 21进制 22进制 23进制 24进制 25进制 26进制 27进制 28进制 29进制 30进制 31进制 32进制 33进制 34进制 35进制 36进制 转换结果 工具简介 支持在2~36进制之间进行任意转换，支持浮点型。 Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"","date":"2019-09-27T03:08:41.117Z","updated":"2019-09-27T03:08:41.117Z","comments":true,"path":"box/thumbnail/index.html","permalink":"https://www.codingpy.cn/box/thumbnail/index.html","excerpt":"","text":"网站缩略图生成 | Yinux's Blog document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"}],"posts":[{"title":"热烈庆祝中华人民共和国成立70周年","slug":"seventyanniversary","date":"2019-10-01T00:30:00.000Z","updated":"2019-09-30T16:46:04.702Z","comments":true,"path":"2019/10/01/seventyanniversary/","link":"","permalink":"https://www.codingpy.cn/2019/10/01/seventyanniversary/","excerpt":"热烈庆祝中华人民共和国成立七十周年","text":"热烈庆祝中华人民共和国成立七十周年 热烈庆祝中华人民共和国成立七十周年 祝祖国母亲七十华诞生日快乐！","categories":[],"tags":[],"author":{"name":"Yinux's Blog","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/avatar/avatar.png","url":"http://www.codingpy.cn"}},{"title":"Comet OJ - Contest  \\#11 eon题解","slug":"datacode_1","date":"2019-09-20T12:30:00.000Z","updated":"2019-09-22T13:37:51.402Z","comments":true,"path":"2019/09/20/datacode_1/","link":"","permalink":"https://www.codingpy.cn/2019/09/20/datacode_1/","excerpt":"在一上来动不动就用循环体我就剁手！","text":"在一上来动不动就用循环体我就剁手！ 题目描述「这次练习用的数也太大了吧，我怎么记得住。」线段树小声嘀咕着，「我用所有的手指也只能数到 10231023 。」 「这可不是数据结构会作出的发言。」链表指引着面前的少女把数写进她的本体——一棵二叉树的图样中。有光自最浅的节点倾泻而下。「接下来你应该把这个十进制数按数位拆开，重新排列出一个最大的数，然后算出这个数和原数的差。」她正要问线段树是否听懂了任务，却被线段树的发问打断了。 「上一代数据结构，他们会区间排序，能轻松地击溃那些题目，是这样吗？他们于代码的溪流中降生，在算法的庇佑下抽枝长叶，以天赐的技巧征服了我们一代至今无法涉足的外界，是这样吗？」 链表沉默半晌，转移了话题：「你还不会输出，那便直接告诉我练习的答案对 10 取模的值。」 你对这个种族的历史毫无兴趣，只想知道练习题的答案，也就是说—— 简洁题意：对于一个数 nn ，记 mm 为把 nn 的各数位重排序得到的最大的数，求 m-nm−n 对 1010 取模的值(也就是 m-nm−n 除以 10 的余数)。 举例来说，当 n=213 时， 各数位重排序有 123、132、213、231、312、321 六种可能，其中最大的数字是 321 ，所以 m=321，输出的答案即为 (m-n) = 108 对 10 取模的结果，也就是 8。 输入描述一行一个整数 n (0 &lt; n &lt; 10106 ,也就是说 n 是位数不超过 10n6 的正整数。)。 输出描述一个整数，表示答案。 样例输入 1 样例输出 1 213 8 样例解释 1此样例的解释在题目描述里。 样例输入 2 样例输出 2 71806291 9 样例解释 2答案为 98762110−71806291=26955819≡9(mod10) 。 样例输入 2 样例输出 2 12345678912345678912345 6 样例解释 3请特别注意， n 的值可能非常大，无法用 32-bits 或 64-bits 整数储存。 解题思路一看到这个题第一眼我以为就是卡数据想都没想就选了Python用了两个循环就交了，结果当然是WA了，结果卡出1900ms，后来仔细审了下题，因本题数据非常大，而且所求只与数位有关，然后结果就是最大数的最低位（即原数的数位的最小值）和原数最低位的差。这样它的时间复杂度就为O(n)。 源码Python123456num = input()num = list(num)for i in num: i = int(i)minnum = min(num)print((int(minnum) - int(num[len(num)-1]))%10) C123456789101112131415161718192021#include &lt;bits/stdc++.h&gt; using namespace std;typedef unsigned long long ull;const int N=1e7;int a[N];int main()&#123; string s; cin&gt;&gt;s; int x=s.size(); int y; y=s[x-1]-&apos;0&apos;; int minn=0x3f3f3f3f; for(int i=0;i&lt;s.size();i++) &#123; if(s[i]-&apos;0&apos;&lt;minn) minn=s[i]-&apos;0&apos;; &#125; int p=minn-y; if(p==0) cout&lt;&lt;0; else cout&lt;&lt;p+10; &#125;","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://www.codingpy.cn/categories/Algorithm/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://www.codingpy.cn/tags/数论/"},{"name":"ACM","slug":"ACM","permalink":"https://www.codingpy.cn/tags/ACM/"}],"author":{"name":"Yinux's Blog","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/avatar/avatar.png","url":"http://www.codingpy.cn"}},{"title":"用Python来分析一波周董新曲《说好不哭》为何如此火爆！","slug":"script_dontcry","date":"2019-09-20T12:30:00.000Z","updated":"2019-09-21T02:44:02.881Z","comments":true,"path":"2019/09/20/script_dontcry/","link":"","permalink":"https://www.codingpy.cn/2019/09/20/script_dontcry/","excerpt":"用Python来分析一波周董新曲《说好不哭》为何如此火爆！","text":"用Python来分析一波周董新曲《说好不哭》为何如此火爆！ 9 月 16 日晚间，周董在朋友圈发布了最新单曲《说好不哭》 发布后，真的让一波人哭了 一群想抢鲜听的小伙伴直接泪奔 因为 QQ 音乐直接被搞崩了 没想到干翻 QQ 音乐的不是网易云音乐 也不是虾米音乐 而是周董！ 周董成成功地凭一己之力干翻了 QQ 音乐 那么听过周董新歌后的小伙伴都是怎么评价的呢？ 这里，我们获取了 QQ 音乐的近 20W 条评论数据进行分析 看看其中有哪些有趣的东西 一、数据获取1、请求分析在 QQ 网页版直接搜索『说好不哭』很容易就能找到单曲页面 说好不哭 拉到页面最下方可以看到评论的分页查看按钮 分页查看 按下 F12 点击第二页在请求流中就可以看到对应的请求 评论请求 其中可以看到两个重要参数：&lt;fontcolor = “FF0000”&gt;pagenum 和 &lt;fontcolor = “FF0000”&gt;pagesize 将请求 copy 到 Postman 中进行测试 Postman测试 发现可以直接获取到数据连 Header 都不需要添加这里尝试对请求参数进行了精简最终只需要如下几个参数即可 参数精简 从 Postman 中可以直接获取到对应的代码 123456789import requestsurl = &quot;https://c.y.qq.com/base/fcgi-bin/fcg_global_comment_h5.fcg&quot;querystring = &#123;&quot;biztype&quot;:&quot;1&quot;,&quot;topid&quot;:&quot;237773700&quot;,&quot;cmd&quot;:&quot;8&quot;,&quot;pagenum&quot;:&quot;1&quot;,&quot;pagesize&quot;:&quot;25&quot;&#125;response = requests.request(&quot;GET&quot;, url, params=querystring)print(response.text) 这里是单页评论的获取所有评论的获取只需递增 pagenum 即可 2、数据解析返回数据中有很多暂时不需要的字段这里我们只取其中的用户名、评论时间、评论内容、点赞数对应如下字段 123456&#123; &quot;nick&quot;: &quot;丨那壹刻永遠消失\\&quot;\\&quot;&quot;, &quot;praisenum&quot;: 1, &quot;rootcommentcontent&quot;: &quot;越听越好听怎么回事！&quot;, &quot;time&quot;: 1568729836,&#125; 由于数据量较大 这里我们暂时将数据存放在 Excel 中一来无须依赖外部数据库二来可以使用 Excel 对数据进行二次处理数据存储代码如下： 1234567891011121314151617def file_do(list_info, file_name): # 获取文件大小 if not os.path.exists(file_name): wb = openpyxl.Workbook() page = wb.active page.title = &apos;jay&apos; page.append([&apos;昵称&apos;,&apos;时间&apos;,&apos;点赞数&apos;,&apos;评论&apos;]) else: wb = openpyxl.load_workbook(file_name) page = wb.active for info in list_info: try: page.append(info) except Exception: print(info) wb.save(filename=file_name) 二、数据可视化1、各时段的评论数首先我们对评论按小时区间进行汇总由于时间粒度比较小，这里对时间粒度进行了一些处理 评价人数走势图 周董的新曲是在 9.16 号 23 点准时发布的可以看出在发布后的一个小时内（23:00-24:00）评论数量达到了高峰占了总评论数的一半以上另外看了一眼 9.16 23 点之前的评论也很有意思 一种搬好小板凳嗑着瓜子坐等的既视感 2、大家都在说什么词云生成的方法有很多可以用代码生成也可以用一些在线工具这里我就使用了在线词云工具：wordart后续可以给大家单独再普及一下生成效果如下 词云 周杰伦、杰伦字眼很明显还有大量跑来『打卡』的『好听』、『来了』、『哭了』、『爱了』其中少不了的还有『青春』另外『阿信』的出现估计给了很多人惊喜 3、大家都点赞了哪些评论我们以点赞数对评论进行了排序排名靠前的评论是如下一些 评论排名 另外，QQ 音乐官方也会放出精彩评论 热心网友昀恺丶 凉城 蜗牛.. 对比下可以看出和我们获取到的数据是比较一致的只不过官方并不是按点赞个数进行排名的看得出来这些排名靠前的大都是在回忆青春这些评论之所以能够得到大家的共鸣也许他们的青春里都有一个周杰伦吧 三、附件QQ音乐《说好不哭》评论抓取 四、源码1、评论爬取源码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970import requests,json,time,uuid,os,openpyxlimport refrom openpyxl.cell.cell import ILLEGAL_CHARACTERS_REinfo_list = []def get_comment_info(): global info_list pagenum = 1 while(True): print(pagenum) url = &quot;https://c.y.qq.com/base/fcgi-bin/fcg_global_comment_h5.fcg&quot; querystring = &#123;&quot;biztype&quot;:&quot;1&quot;,&quot;topid&quot;:&quot;237773700&quot;,&quot;cmd&quot;:&quot;8&quot;,&quot;pagenum&quot;:pagenum,&quot;pagesize&quot;:&quot;25&quot;&#125; response = requests.request(&quot;GET&quot;, url, params=querystring) resp = json.loads(response.text) commentlist = resp.get(&apos;comment&apos;).get(&apos;commentlist&apos;) if not commentlist or len(commentlist) == 0: return for comment in commentlist: info = [] one_name = comment.get(&apos;nick&apos;) # 将 UNIX 时间戳转化为普通时间格式 if comment.get(&apos;time&apos;) &lt; 1568735760: return time_local = time.localtime(comment.get(&apos;time&apos;)) one_time = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time_local) one_praisenum = comment.get(&apos;praisenum&apos;) one_comment = comment.get(&apos;rootcommentcontent&apos;) ILLEGAL_CHARACTERS_RE.sub(r&apos;&apos;, one_comment) ILLEGAL_CHARACTERS_RE.sub(r&apos;&apos;, one_name) info = [one_name, one_time, one_praisenum, one_comment] # print(info) info_list.append(info) pagenum += 1 # print(comment.get(&apos;nick&apos;)) # print(comment.get(&apos;rootcommentcontent&apos;)) # print(comment.get(&apos;time&apos;)) # print(comment.get(&apos;praisenum&apos;))def file_do(file_name): # 获取文件大小 if not os.path.exists(file_name): wb = openpyxl.Workbook() page = wb.active page.title = &apos;jay&apos; page.append([&apos;昵称&apos;,&apos;时间&apos;,&apos;点赞数&apos;,&apos;评论&apos;]) else: wb = openpyxl.load_workbook(file_name) page = wb.active for info in info_list: try: page.append(info) except Exception: print(info) pass continue wb.save(filename=file_name)if __name__ == &quot;__main__&quot;: file_name = str(uuid.uuid1()) + &apos;.xlsx&apos; get_comment_info() file_do(file_name) print(&apos;data has saved in &#123;&#125;&apos;.format(file_name)) 2、生成HTML图表源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# 导入Style类，用于定义样式风格from pyecharts import Styleimport json# 导入Geo组件，用于生成柱状图from pyecharts import Bar# 导入Counter类，用于统计值出现的次数from collections import Counterimport fileinput,re# 设置全局主题风格from pyecharts import configureconfigure(global_theme=&apos;wonderland&apos;)# 数据可视化dates = []comment_text = &quot;&quot;def render(): global comment_text with open(&apos;jay.csv&apos;, mode=&apos;r&apos;, encoding=&apos;utf-8&apos;) as f: rows = f.readlines() for row in rows[1:]: if row.count(&apos;,&apos;) != 3: continue elements = row.split(&apos;,&apos;) user = elements[0] date = elements[1] if &apos;2019&apos; not in date: continue like = elements[2] comment = elements[3] if &apos;2019-09-14&apos; in date: dates.append(&apos;2019-09-14&apos;) elif &apos;2019-09-15&apos; in date: dates.append(&apos;2019-09-15&apos;) elif &apos;2019-09-16 0&apos; in date or &apos;2019-09-16 1&apos; in date or &apos;2019-09-16 20&apos; in date or &apos;2019-09-16 21&apos; in date: dates.append(&apos;2019-09-16 0-21&apos;) elif &apos;2019-09-18&apos; in date: continue else: dates.append(date) comment_text += comment with open(&quot;comment_text.txt&quot;,&quot;w&quot;, encoding=&apos;utf-8&apos;) as f: f.write(comment_text) date_data = Counter(dates).most_common() # 按日期进行排序 date_data = sorted(date_data) # print(data) # 根据评分数据生成柱状图 bar = Bar(&apos;评价人数走势图&apos;, &apos;数据来源：QQ音乐网页版&apos;, title_pos=&apos;center&apos;, width=800, height=600) attr, value = bar.cast(date_data) bar.add(&apos;&apos;, attr, value, is_visualmap=False, visual_range=[0, 3500], visual_text_color=&apos;#fff&apos;, is_more_utils=True, xaxis_interval=0, xaxis_rotate=30,is_label_show=True,xaxis_label_textsize=8, label_text_size=8) bar.render( &apos;picture\\评价人数走势图.html&apos;)render() 最后，一起来听一下这首歌吧~ 土豪通道平民通道","categories":[{"name":"Python","slug":"Python","permalink":"https://www.codingpy.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.codingpy.cn/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://www.codingpy.cn/tags/爬虫/"},{"name":"数据分析","slug":"数据分析","permalink":"https://www.codingpy.cn/tags/数据分析/"}],"author":{"name":"Yinux's Blog","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/avatar/avatar.png","url":"http://www.codingpy.cn"}},{"title":"Windows(10)环境下搭建JSP开发环境","slug":"JSP_init","date":"2019-09-04T00:30:00.000Z","updated":"2019-09-20T14:18:35.706Z","comments":true,"path":"2019/09/04/JSP_init/","link":"","permalink":"https://www.codingpy.cn/2019/09/04/JSP_init/","excerpt":"JSP是Java Server Page的缩写，是由Sun Microsystems公司主导创建的一种动态网页技术标准。JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成HTML、XML或其他格式文档的Web网页，然后返回给请求者。JSP技术以Java语言作为脚本语言，为用户的HTTP请求提供服务，并能与服务器上的其它Java程序共同处理复杂的业务需求。目前，JSP已经成为开发动态网站的主流技术。","text":"JSP是Java Server Page的缩写，是由Sun Microsystems公司主导创建的一种动态网页技术标准。JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成HTML、XML或其他格式文档的Web网页，然后返回给请求者。JSP技术以Java语言作为脚本语言，为用户的HTTP请求提供服务，并能与服务器上的其它Java程序共同处理复杂的业务需求。目前，JSP已经成为开发动态网站的主流技术。 安装配置JSP运行环境一、 安装配置JDK进入JDK官网选择Java SE Development Kit 8u172，根据自己的电脑选择32位或者64位进行下载。具体配置教程参考《JDK 安装 Java环境变量配置 详细教程》 二、 安装配置Tomcat1、进入Tomcat官网安装下载,这里演示安装下载的名称是“apache-tomcat-9.0.24.exe”。2、下载完毕后，就可以在需要编译和运行Java程序的计算机安装Tomcat服务器，具体步骤如下：（1） 双击“apache-tomcat-9.0.24.exe”文件开始安装。在弹出的安装向导对话框中，单击“Next”按钮，将弹出如下图所示的“许可协议”对话框。一直next就行 （2） 这里采用默认的组件安装，如果不懂就按默认的设置。 （3） 这里是Tomcat默认的端口号，不喜欢这个可以自己设置成别的，但是千万别与系统端口号重复！（4）接下来就一直next就行，路径默认就行。 三、 Tomcat环境变量Catalina_Home配置1、CATALINA_HOME是TOMCAT安装路径的别名，目的是为了方便使用TOMCAT 2、计算机&gt;属性&gt;环境变量, 新建环境变量。变量名为CATALINA_HOME ,变量值tomcat的解压目录，我电脑上的为：“D:\\Function\\Apache Software Foundation\\Tomcat 9.0”，注意后面不用多加“\\”或者“;” 3、在环境变量Path中，新增加“%CATALINA_HOME%\\bin\\”4、打开你放置刚才下载的Tomcat的bin目录，找到“startup.bat”文件双击，然后就会弹出一个DOS窗口显示Tomcat启动的进程状态。 5、测试Tomcat是否配置成功：打开浏览器，输入在地址栏中输入：“http://localhost:8080” 运行结果如下图所示即为配置成功！（因为Tomcat已经在运行再次打开会报错）6、关闭tomcat:进入命令行cmd，输入shutdown.bat 四、Eclipse的安装配置1、进入eclipse官网下载eclipse-inst-win64.exe 根据自己的系统版本选择镜像下载选择国内镜像下载 2、运行eclipse-inst-win64.exe 选择第一个选择Java目录和eclipse安装目录，然后点击install 3、安装完成后打开eclipse如果新建项目中没有Web选项，这时候就需要我们自己去添加web插件 4、添加Web插件：依次点击【Help】-&gt;【Install New Software】，在【work with】下拉框中选择自己的eclipse版本在下面的下拉框中勾选 Web, XML, Java EE and OSGi Enterprise Development； 然后点击next，耐心等待下载在这一步的时候点击同意，然后点击finish 安装这几个插件，耐心等待……..安装完成之后，会自动弹出对话框让你重启eclipse，重启下就行，此时，就可以新建web项目了 五、新建jsp文件1、新建jsp文件：依次点击【File】-&gt;【New】-&gt;【Project】；在弹出的列表中点击Web，选择 【Dynamic Web Project】 然后点击【Next】输入项目名，然后点击【Finish】 然后打开创建的项目，选择【WebContent】右键新建【JSP File】 新建的文件报错 右键点击项目—&gt;【Build Path】—&gt;【Configure Build Path】点击【libraries】-&gt;【Add Library】-&gt;【Server Runtime】-&gt;【Next】-&gt;【Finish】-&gt;【Apply and Close】 接下来更改编码：导航栏点击【Windows】-&gt;【Preference】-&gt;【JSP File】 Encoding选择“UTF-8”，然后点击应用并关闭 接下来添加Tomcat：点击【Server】，再点击蓝色字体，在弹出的列表框中点击【Apache】，选择你安装的Tomcat，这里我安装的是【Tomcat v9.0.24】，然后点击next 在这里需要选择安装的Tomcat的文件路径，填好后点击Next 点击创建的项目名即可添加到配置中，然后点击Finish 接下来就可以创建一个简单的JSP实例来测试拉； 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; contentType=&quot;text/html; charset=UTF-8&quot;%&gt;&lt;%String path = request.getContextPath();String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;%&gt; &lt;% //计算1-100之间的和,并输出 到客户端浏览器中 int sum=0; for(int i=1;i&lt;=100;i++) sum+=i; out.print(&quot;1-100的和为：&quot;+sum+&quot;\\n&quot;); %&gt; &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;&lt;html&gt; &lt;head&gt; &lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt; &lt;title&gt;My JSP &apos;GreetingJsp.jsp&apos; starting page&lt;/title&gt; &lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt; &lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt; &lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt; &lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&gt; &lt;meta http-equiv=&quot;description&quot; content=&quot;This is my page&quot;&gt; &lt;!-- &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt; --&gt; &lt;/head&gt; &lt;body&gt; &lt;br&gt;这是我的第一个JSP页面 &lt;br&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;7&lt;/td&gt; &lt;td&gt;8&lt;/td&gt; &lt;td&gt;9&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;5&lt;/td&gt; &lt;td&gt;6&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;3&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt; 右键【Run As】-&gt;【Run on Server】运行成功！一个简单的JSP页面就生成啦 复制蓝色背景内的链接，打开浏览器即可预览啦","categories":[{"name":"JSP","slug":"JSP","permalink":"https://www.codingpy.cn/categories/JSP/"}],"tags":[{"name":"JSP","slug":"JSP","permalink":"https://www.codingpy.cn/tags/JSP/"},{"name":"JSP实用教程","slug":"JSP实用教程","permalink":"https://www.codingpy.cn/tags/JSP实用教程/"}],"author":{"name":"Yinux's Blog","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/avatar/avatar.png","url":"http://www.codingpy.cn"}},{"title":"matplotlib - Pyplot 教程","slug":"matplotlib_Pyplot","date":"2019-08-10T00:30:00.000Z","updated":"2019-09-24T05:58:45.415Z","comments":true,"path":"2019/08/10/matplotlib_Pyplot/","link":"","permalink":"https://www.codingpy.cn/2019/08/10/matplotlib_Pyplot/","excerpt":"提供类似MATLAB的绘图框架。","text":"提供类似MATLAB的绘图框架。 Pyplot 教程关于pylot接口的介绍。 pyplot 简介matplotlib.pyplot 是命令样式函数的集合，使matplotlib像MATLAB一样工作。 每个pyplot函数对图形进行一些更改：例如，创建图形，在图形中创建绘图区域，在绘图区域中绘制一些线条，用标签装饰图形等。 在matplotlib.pyplot中，各种状态在函数调用中保留，以便跟踪当前图形和绘图区域等内容，并且绘图函数指向当前轴（请注意“轴”在此处以及在大多数位置 文档是指图形的轴部分，而不是多个轴的严格数学术语。 注意: pyplot API通常不如面向对象的API灵活。您在此处看到的大多数函数调用也可以作为Axes对象中的方法调用。 我们建议您浏览教程和示例以了解其工作原理。 使用pyplot生成可视化非常快速： 1234import matplotlib.pyplot as pltplt.plot([1, 2, 3, 4])plt.ylabel('some numbers')plt.show() &lt;Figure size 640x480 with 1 Axes&gt;您可能想知道为什么x轴的范围是0-3，y轴的范围是1-4。如果为plot()命令提供单个列表或数组，则matplotlib假定它是一系列y值，并自动为您生成x值。由于python范围以0开头，因此默认的x向量与y具有相同的长度，但从0开始。因此x数据为 [0,1,2,3]。 1plt.plot([1, 2, 3, 4], [1, 4, 9, 16]) [&lt;matplotlib.lines.Line2D at 0x1de069a2a20&gt;] 格式化绘图的样式对于每对x，y对的参数，有一个可选的第三个参数，它是指示绘图的颜色和线型的格式字符串。格式字符串的字母和符号来自MATLAB，您可以将颜色字符串与线型字符串连接起来。默认格式字符串为“b-”，为蓝色实线。例如，要用红色圆圈绘制上述内容，您将发出： 1234567#plt.plot(x,y,format_string,**kwargs) #x轴数据，y轴数据，format_string控制曲线的格式字串 #format_string 由颜色字符，风格字符，和标记字符 plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'ro')plt.axis([0, 6, 0, 20])plt.show() 有关线型和格式字符串的完整列表，请参阅 plot() 文档。 上例中的 axis() 命令采用 [xmin, xmax, ymin, ymax] 列表并指定轴的视口。 如果matplotlib仅限于使用列表，那么数字处理将毫无用处。通常，您将使用numpy数组。实际上，所有序列都在内部转换为numpy数组。 下面的示例说明了使用数组在一个命令中绘制具有不同格式样式的多行。 12345678import numpy as np# 每隔200ms均匀采样一次t = np.arange(0., 5., 0.2)# 红色的破折号，蓝色的正方形和绿色的三角形plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')plt.show() 使用关键字字符串绘图在某些情况下，您可以使用允许您使用字符串访问特定变量的格式的数据。例如，使用 numpy.recarray 或pandas.DataFrame。 Matplotlib允许您使用data关键字参数提供此类对象。如果提供，那么您可以生成包含与这些变量对应的字符串的图。 1matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, *, data=None, **kwargs) x，y：表示的是大小为(n,)的数组，也就是我们即将绘制散点图的数据点s:是一个实数或者是一个数组大小为(n,)，这个是一个可选的参数。c:表示的是颜色，也是一个可选项。默认是蓝色’b’,表示的是标记的颜色，或者可以是一个表示颜色的字符，或者是一个长度为n的表示颜色的序列等等，感觉还没用到过现在不解释了。但是c不可以是一个单独的RGB数字，也不可以是一个RGBA的序列。可以是他们的2维数组（只有一行）。marker:表示的是标记的样式，默认的是’o’。cmap:Colormap实体或者是一个colormap的名字，cmap仅仅当c是一个浮点数数组的时候才使用。如果没有申明就是image.cmapnorm:Normalize实体来将数据亮度转化到0-1之间，也是只有c是一个浮点数的数组的时候才使用。如果没有申明，就是默认为colors.Normalize。vmin,vmax:实数，当norm存在的时候忽略。用来进行亮度数据的归一化。alpha：实数，0-1之间。linewidths:也就是标记点的长度。 12345678910data = &#123;'a': np.arange(50), 'c': np.random.randint(0, 50, 50), 'd': np.random.randn(50)&#125;data['b'] = data['a'] + 10 * np.random.randn(50)data['d'] = np.abs(data['d']) * 100plt.scatter('a', 'b', c='c', s='d', data=data)plt.xlabel('entry a')plt.ylabel('entry b')plt.show() 1234567data = &#123;'a': np.arange(50), 'c': np.random.randint(0, 50, 50), 'd': np.random.randn(50)&#125;print(data)data['b'] = data['a'] + 10 * np.random.randn(50)data['d'] = np.abs(data['d']) * 100print(data) {&apos;a&apos;: array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), &apos;c&apos;: array([47, 5, 29, 21, 15, 12, 29, 23, 10, 25, 26, 45, 32, 30, 37, 27, 43, 9, 26, 45, 48, 14, 23, 30, 22, 0, 5, 47, 21, 26, 35, 7, 2, 19, 24, 41, 26, 9, 20, 16, 15, 29, 23, 4, 21, 12, 23, 30, 41, 19]), &apos;d&apos;: array([ 0.91474741, 1.4102975 , -0.09708013, -1.47629846, -1.57769092, -0.46290149, 1.23430367, 0.38467709, -0.01272562, -1.44240598, -0.21927709, -0.30498565, -0.11862153, -1.24972745, -1.32424128, -1.5610827 , 1.26963903, 0.62084676, -1.0549506 , 0.37044246, -0.39299613, 0.42897231, -0.33461671, -0.86706857, -0.76486767, -1.3074562 , -0.33973554, -1.08680383, 0.27878669, 1.0599157 , -0.38176051, 0.79680669, -0.6874751 , 1.38240815, -0.1344723 , 0.7627456 , 0.36115735, 0.83799247, 0.02523584, 0.81839594, -0.77025921, -0.06682006, 0.06934268, 0.36251595, -0.99875799, 1.23386736, -0.32016664, 0.45225071, 0.55994446, 0.47643056])} {&apos;a&apos;: array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), &apos;c&apos;: array([47, 5, 29, 21, 15, 12, 29, 23, 10, 25, 26, 45, 32, 30, 37, 27, 43, 9, 26, 45, 48, 14, 23, 30, 22, 0, 5, 47, 21, 26, 35, 7, 2, 19, 24, 41, 26, 9, 20, 16, 15, 29, 23, 4, 21, 12, 23, 30, 41, 19]), &apos;d&apos;: array([ 91.4747409 , 141.02975036, 9.70801323, 147.6298458 , 157.76909222, 46.29014854, 123.43036704, 38.46770907, 1.27256168, 144.24059782, 21.92770893, 30.49856537, 11.86215303, 124.972745 , 132.42412769, 156.10827022, 126.96390267, 62.0846764 , 105.49506 , 37.0442464 , 39.29961326, 42.89723069, 33.46167088, 86.70685708, 76.48676738, 130.74561997, 33.97355351, 108.68038257, 27.87866927, 105.9915699 , 38.17605117, 79.68066907, 68.74750955, 138.2408153 , 13.44723023, 76.27455996, 36.1157352 , 83.79924741, 2.52358383, 81.83959391, 77.02592105, 6.68200567, 6.93426756, 36.25159505, 99.87579944, 123.38673588, 32.01666378, 45.22507109, 55.99444581, 47.6430561 ]), &apos;b&apos;: array([ 4.62276015, 7.74528096, -4.77823695, -11.7847356 , 18.05816585, -8.1731315 , 4.98414606, 18.1539417 , 11.06732176, 15.32465307, 5.923213 , 6.77520583, -8.72986134, 19.414693 , 22.05933889, 10.92443259, 16.1005237 , 28.55305548, 7.16710341, 19.82975597, 35.25631478, 13.32137703, 9.26598849, 14.25528353, 17.70779422, 18.62234998, 41.83152657, 26.02409203, 23.25997035, 20.38161932, 2.84095495, 36.00225335, 46.69340509, 22.75167791, 34.33249818, 25.09595488, 41.37140253, 16.54690243, 32.4532621 , 31.12442736, 40.99257063, 49.49197597, 55.91868808, 55.13338215, 33.1365961 , 48.95821962, 25.50538193, 58.72572039, 49.63841177, 41.7925894 ])}用分类变量绘图也可以使用分类变量创建绘图。Matplotlib允许您将分类变量直接传递给许多绘图函数。例如： 12345678910111213141516171819names = ['group_a', 'group_b', 'group_c']values = [1, 10, 100]# 表示figure 的大小为宽、长（单位为inch）plt.figure(1, figsize=(18, 6))# plt.subplot(ABC)表示第A行,B图形的总数量，C第几个图形plt.subplot(131)# 直方图plt.bar(names, values)plt.subplot(132)#散点图plt.scatter(names, values)plt.subplot(133)#折线图plt.plot(names, values)plt.suptitle('Categorical Plotting')plt.show() 控制线的属性线可以设置许多属性：linewidth，dash style，antialiased等; 请参阅 matplotlib.lines.Line2D。 有几种方法可以设置线属性。 使用关键字args： 1plt.plot(x, y, linewidth=2.0) 使用Line2D实例的setter方法。 plot返回Line2D对象列表; 例如，line1，line2 = plot（x1，y1，x2，y2）。 在下面的代码中，我们假设我们只有一行，因此返回的列表的长度为1.我们使用tuple解压缩为line，以获取该列表的第一个元素： 12line, = plt.plot(x, y, &apos;-&apos;)line.set_antialiased(False) # turn off antialising 使用 setp() 命令。 下面的示例使用MATLAB样式命令在行列表上设置多个属性。setp透明地使用对象列表或单个对象。您可以使用python关键字参数或MATLAB样式的字符串/值对： 12345lines = plt.plot(x1, y1, x2, y2)# use keyword argsplt.setp(lines, color=&apos;r&apos;, linewidth=2.0)# or MATLAB style string value pairsplt.setp(lines, &apos;color&apos;, &apos;r&apos;, &apos;linewidth&apos;, 2.0) 以下是可用的Line2D属性。 属性 值类型 alpha float animated [True | False] antialiased 或 aa [True | False] clip_box matplotlib.transform.Bbox实例 clip_on [True | False] clip_path 路径实例和变换实例(修补程序) color 或 c 任何Matplotlib颜色 contains the hit testing function dash_capstyle ['butt' | 'round' | 'projecting'] dash_joinstyle ['miter' | 'round' | 'bevel'] dashes 以点为单位的开/关油墨顺序 data (np.array xdata, np.array ydata) figure matplotlib.quire.Figure实例 label 任何字符串 linestyle or ls [ '-' | '--' | '-.' | ':' | 'steps' | ...] linewidth or lw 浮点值 lod [True | False] marker [ '+' | ',' | '.' | '1' | '2' | '3' | '4' ] markeredgecolor or mec 任何Matplotlib颜色 markeredgewidth or mew 浮点值 markerfacecolor or mfc 任何Matplotlib颜色 markersize or ms 浮点数 markevery [ None | integer | (startind, stride) ] picker 用于交互式选线 pickradius 线拾取选择半径 solid_capstyle ['butt' | 'round' | 'projecting'] solid_joinstyle ['miter' | 'round' | 'bevel'] transform matplotlib.transforms.Transform实例 visible [True | False] xdata np.array ydata np.array zorder 任意数字 若要获取可设置行属性的列表，请使用一行或多行作为参数调用setp() 函数。 使用多个图形和轴MATLAB和pyplot，都有当前图形和当前轴的概念。所有打印命令都适用于当前轴。函数gca() 返回当前轴(matplotlib.axes.Axes实例)，gcf() 返回当前地物(matplotlib.figure.Figure实例)。通常情况下，你不必担心这一点，因为这一切都是在幕后处理的。下面是创建两个子图的脚本。 12345678910111213def f(t): return np.exp(-t) * np.cos(2*np.pi*t)t1 = np.arange(0.0, 5.0, 0.1)t2 = np.arange(0.0, 5.0, 0.02)plt.figure(1)plt.subplot(211)plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')plt.subplot(212)plt.plot(t2, np.cos(2*np.pi*t2), 'r--')plt.show() 这里的 figure() 命令是可选的，因为默认情况下将创建 figure(1)，就像默认情况下创建 subplot(111) 一样，如果不手动指定任何轴。subplot()命令指定numrows, numcols, plot_number，其中 plot_number 的范围 从1到numrows*numcols。如果 numrows * numcols &lt;10，则subplot命令中的逗号是可选的。因此 subplot(211) 与 subplot(2, 1, 1) 相同。 您可以创建任意数量的子图和轴。如果要手动放置轴，即不在矩形网格上，请使用 axes() 命令，该命令允许您将位置指定为axes([left，bottom，width，height])，其中所有值均为小数（0到1）坐标。有关手动放置轴的示例，请参阅Axes Demo;有关具有大量子图的示例，请参阅 Basic Subplot Demo。 您可以使用具有增加的图号的多个figure() 调用来创建多个数字。当然，每个图形可以包含您心中所需的轴和子图： 1234567891011121314import matplotlib.pyplot as pltplt.figure(1) # the first figureplt.subplot(211) # the first subplot in the first figureplt.plot([1, 2, 3])plt.subplot(212) # the second subplot in the first figureplt.plot([4, 5, 6])plt.figure(2) # a second figureplt.plot([4, 5, 6]) # creates a subplot(111) by defaultplt.figure(1) # figure 1 current; subplot(212) still currentplt.subplot(211) # make subplot(211) in figure1 currentplt.title('Easy as 1, 2, 3') # subplot 211 title Text(0.5, 1.0, &apos;Easy as 1, 2, 3&apos;) 您可以使用 clf() 清除当前图形，使用 cla() 清除当前轴。如果您发现在幕后为您维护状态（特别是当前图像，图形和轴）很烦人，请不要绝望：这只是围绕面向对象API的瘦状态包装器，您可以使用它（见Artist tutorial） 如果你要制作大量的图像，你还需要注意一件事：在用 close() 显式关闭数字之前，数字所需的内存不会完全释放。删除对图的所有引用，和/或使用窗口管理器来杀死屏幕上出现图形的窗口是不够的，因为pyplot会保持内部引用，直到调用close()。 使用文本text() 命令可用于在任意位置添加文本，而xlabel(), ylabel() 和 title() 用于在指定位置添加文本(有关更详细的示例，请参见Matplotlib图中的文本) 1234567891011121314mu, sigma = 100, 15x = mu + sigma * np.random.randn(10000)# the histogram of the datan, bins, patches = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)plt.xlabel('Smarts')plt.ylabel('Probability')plt.title('Histogram of IQ')plt.text(60, .025, r'$\\mu=100,\\ \\sigma=15$')plt.axis([40, 160, 0, 0.03])plt.grid(True)plt.show() 所有text() 命令都返回一个matplotlib.text.Text实例。与上面的行一样，您可以通过将关键字参数传递给文本函数或使用setp()来自定义属性： t = plt.xlabel(&apos;my data&apos;, fontsize=14, color=&apos;red&apos;)文本属性和布局中更详细地介绍了这些属性。 在文本中使用数学表达式matplotlib在任何文本表达式中接受TeX方程表达式。 例如，要在标题中写入表达式σi= 15，您可以编写由美元符号包围的TeX表达式： plt.title(r&apos;$\\sigma_i=15$&apos;)标题字符串前面的r很重要 - 它表示该字符串是一个原始字符串，而不是将反斜杠视为python转义。matplotlib有一个内置的TeX表达式解析器和布局引擎，并提供自己的数学字体 - 有关详细信息，请参阅编写数学表达式。因此，您可以跨平台使用数学文本，而无需安装TeX。 对于安装了LaTeX和dvipng的用户，您还可以使用LaTeX格式化文本并将输出直接合并到显示图或保存的postscript中 - 请参阅使用LaTeX进行文本渲染。 注释文本上面的基本text() 命令的使用将文本放在Axes上的任意位置。文本的常见用途是注释绘图的某些功能，而annotate()方法提供帮助功能以使注释变得容易。在注释中，有两点需要考虑：由参数xy表示的注释位置和文本xytext的位置。 这两个参数都是（x，y）元组。 123456789101112ax = plt.subplot(111)t = np.arange(0.0, 5.0, 0.01)s = np.cos(2*np.pi*t)line, = plt.plot(t, s, lw=2)plt.annotate('local max', xy=(2, 1), xytext=(3, 1.5), arrowprops=dict(facecolor='red', shrink=0.05), )plt.ylim(-2, 2)plt.show() 在此基本示例中，xy（箭头提示）和xytext位置（文本位置）都在数据坐标中。 可以选择各种其他坐标系 - 有关详细信息，请参阅基本注释和高级注释。更多示例可以在Annotating Plots中找到。 对数和其他非线性轴matplotlib.pyplot 不仅支持线性轴刻度，还支持对数和logit刻度。 如果数据跨越许多数量级，则通常使用此方法。 更改轴的比例很容易： plt.xscale(&apos;log&apos;)下面显示了具有相同数据和y轴不同比例的四个图的示例。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152from matplotlib.ticker import NullFormatter # useful for `logit` scale# Fixing random state for reproducibilitynp.random.seed(19680801)# make up some data in the interval ]0, 1[y = np.random.normal(loc=0.5, scale=0.4, size=1000)y = y[(y &gt; 0) &amp; (y &lt; 1)]y.sort()x = np.arange(len(y))# plot with various axes scalesplt.figure(1)# linearplt.subplot(221)plt.plot(x, y)plt.yscale('linear')plt.title('linear')plt.grid(True)# logplt.subplot(222)plt.plot(x, y)plt.yscale('log')plt.title('log')plt.grid(True)# 对称 logplt.subplot(223)plt.plot(x, y - y.mean())plt.yscale('symlog', linthreshy=0.01)plt.title('symlog')plt.grid(True)# logitplt.subplot(224)plt.plot(x, y)plt.yscale('logit')plt.title('logit')plt.grid(True)# 使用“NullFormatter”将y轴上的小标记标签格式化为空字符串，以避免轴上有太多标签。plt.gca().yaxis.set_minor_formatter(NullFormatter())# 调整subplot布局，因为logit 1可能比平常占用更多的空间，这是由于像“1 - 10^&#123;-3&#125;”这样的y-tick标签造成的。plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25, wspace=0.35)plt.show() 您也可以添加自己的比例，有关详细信息，请参阅开发人员指南以创建比例和转换。 12","categories":[{"name":"Python","slug":"Python","permalink":"https://www.codingpy.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.codingpy.cn/tags/Python/"},{"name":"matplotlib","slug":"matplotlib","permalink":"https://www.codingpy.cn/tags/matplotlib/"}],"author":{"name":"Yinux's Blog","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/avatar/avatar.png","url":"https://www.codingpy.cn"}},{"title":"matplotlib - matplotlib 教程","slug":"matplotlib_course","date":"2019-08-04T00:30:00.000Z","updated":"2019-09-20T14:17:48.058Z","comments":true,"path":"2019/08/04/matplotlib_course/","link":"","permalink":"https://www.codingpy.cn/2019/08/04/matplotlib_course/","excerpt":"Matplotlib 是 Python 的绘图库。 它可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。","text":"Matplotlib 是 Python 的绘图库。 它可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。 Pyplot 教程关于pylot接口的介绍。 matplotlib 教程这个图库包含了使用Matplotlib可以做的许多事情的示例。可以点击任何图像，以查看完整的图像和源代码。 有关更短的示例，请参见示例页。你还可以在我们的用户指南中找到外部资源和常见问题解答。 matplotlib 入门这些教程介绍了使用Matplotlib创建可视化效果的基础知识，以及有效使用该包的一些最佳实践。 使用指南本教程介绍一些基本的使用模式和最佳实践，以帮助您开始使用Matplotlib。 一般概念matplotlib有一个广泛的代码库，对于许多新用户来说，这个代码库可能会让人望而生畏。然而，大多数Matplotlib可以用相当简单的概念框架和几个要点的知识来理解。 打印需要在一系列级别上执行操作，从最一般的级别(例如“轮廓此二维阵列”)到最具体的级别(例如“将此屏幕像素涂成红色”)。绘图软件包的目的是通过所有必要的控制，帮助您尽可能轻松地可视化您的数据-也就是说，在大多数情况下使用相对较高级别的命令，并且在需要时仍然能够使用低级别命令。 因此，matplotlib中的所有内容都是按照层次结构组织的。层次结构的顶部是matplotlib“状态机环境”，它是由matplotlib.pylot模块提供的。在这个级别上，使用简单的函数来添加打印元素(线、图像、文本等)。到当前地物中的当前轴。 注意：Pyplot的状态机环境的行为类似于MATLAB，并且对于具有MATLAB经验的用户来说应该是最熟悉的。 层次结构中的下一级是面向对象的接口的第一级，其中pyplot仅用于少数功能，例如图形创建，并且用户显式创建并跟踪图形和轴对象。 在此级别，用户使用pyplot来创建图形，并且通过这些图形，可以创建一个或多个轴对象。 然后，这些轴对象用于大多数绘图操作。 对于更多的控制 - 这对于在GUI应用程序中嵌入matplotlib图表这一点至关重要 - 可以完全删除pyplot级别，从而留下纯粹面向对象的方法。 1234# 导入matplotlib模块import matplotlib.pyplot as pltimport numpy as npimport pandas as pd 一个图的一部分 Figure该图记录了所有子轴，一些 “特殊” 的艺术家（标题，图形图例等）和画布。（不要过于担心画布，它是至关重要的，因为它实际上是绘图的对象，以获得你绘制的图像，但作为用户它或多或少是你不可见的）。一个数字可以有任意数量的Axes，但是有用的应该至少有一个。创建一个图像的最简单方法是使用pylot： 12345678# 没有坐标轴的空图形fig = plt.figure()# 为图形添加一个标题fig.suptitle('No axes on this figure')# 带有2x2坐标轴网格的图形fig, ax_lst = plt.subplots(2, 2) Axes对象这就是你想象中的“一幅图”，它是具有数据空间的图像区域。给定的图形可以包含许多轴，但给定的Axes对象只能在一个图中。 Axes包含两个（或3D的三个）Axis对象（注意Axes和Axis之间的差异），它们负责数据限制（数据限制也可以通过 set_xlim() 和 set_ylim() 来设置Axes方法）。每个Axes都有一个标题（通过 set_title() 设置），一个x标签（通过 set_xlabel() 设置）和一个通过 set_ylabel() 设置的y标签。 Axis 类及其成员函数是使用 OO 接口的主要入口点。 Axis对象这些是类似数字的对象。它们负责设置图形限制并生成刻度线（轴上的标记）和ticklabels（标记刻度线的字符串）。刻度线的位置由Locator对象确定，ticklabel字符串由Formatter格式化。正确的定位器和格式化器的组合可以非常精确地控制刻度位置和标签。 Artist对象基本上你在图上看到的一切都是艺术家（Artist）对象（甚至是图，轴和轴对象）。这包括Text对象，Line2D对象，集合对象，Patch对象……（现在你明白了）。渲染图形时，所有艺术家都被绘制到画布（canvas）上。大多数艺术家（Artist）都与轴有关; 这样的艺术家（Artist）不能被多个轴共享，也不能从一个轴移动到另一个轴。 绘制函数的输入类型所有绘图函数都需要np.array或np.ma.masked_array对象作为输入类型。如果是 “类数组（array-like）” 对象（如pandas数据对象和np.matrix）可能会或可能不会按预期工作。最好在绘图之前将它们转换为np.array对象。 例如，要转换pandas.DataFrame 12a = pd.DataFrame(np.random.rand(4,5), columns = list('abcde'))a_asndarray = a.values 以及转换np.matrix 12b = np.matrix([[1,2],[3,4]])b_asarray = np.asarray(b) Matplotlib，pyplot和pylab：它们之间有什么关系？Matplotlib是整个包; matplotlib.pyplot 是 matplotlib中的一个模块; 和pylab是一个与 matplotlib 一起安装的模块。 Pyplot为底层面向对象的绘图库提供状态机接口。 状态机隐式地自动创建图形和轴以实现所需的图形。例如： 1234567891011121314151617x = np.linspace(0, 2, 100)#创建图形和轴,实现绘图plt.plot(x, x, label='linear')plt.plot(x, x**2, label='quadratic')plt.plot(x, x**3, label='cubic')#x/y轴标签plt.xlabel('x label')plt.ylabel('y label')#表名plt.title(\"Simple Plot\")plt.legend()plt.show() 第一次调用 plt.plot 将自动创建必要的图形和轴以实现所需的绘图。随后对plt.plot的调用会重新使用当前轴，并且每次都会添加另一行。设置标题，图例和轴标签还会自动使用当前轴并设置标题，创建图例并分别标记轴。 pylab是一个便利模块，它在单个名称空间中批量导入 matplotlib.pyplot（用于绘图）和numpy一样（用于数学和使用数组）。不过不推荐使用pylab，并且由于命名空间污染而强烈建议不要使用它。请改用pyplot。 对于非交互式绘图，建议使用pyplot创建图形，然后使用OO界面进行绘图。 代码风格查看此文档和示例时，您将找到不同的代码样式和使用模式。这些风格完全没有问题，各有利弊。几乎所有示例都可以转换为另一种样式并实现相同的结果。唯一需要注意的是避免为自己的代码混合了别的代码风格，尽量保持风格的统一。 注意：matplotlib的开发人员必须遵循特定的编程风格和指导原则。请参见Matplotlib开发人员手册。 在不同的风格中，有两种是官方支持的。因此，这些是使用matplotlib的首选方法。 对于pyplot样式，脚本顶部的通常导入： 12import matplotlib.pyplot as pltimport numpy as np 然后调用一次，例如，np.arange，np.zeros，np.pi，plt.figure，plt.plot，plt.show等。使用pyplot接口创建图像，然后使用对象方法：然后使用对象方法： 123456plt.figure(figsize = (10, 6))x = np.arange(0, 10, 0.2)y = np.sin(x)fig, ax = plt.subplots()ax.plot(x, y)plt.show() 那么，为什么所有都是额外的类型而不是MATLAB样式(依赖于全局状态和平面名称空间)呢？对于像这个例子这样非常简单的事情，唯一的好处是学术性的：更冗长的风格更明确，更清楚地说明事物从何而来，以及正在发生的事情。对于更复杂的应用程序，这种明确性和明确性变得越来越有价值，而更丰富和更完整的面向对象接口可能会使程序更易于编写和维护。 1234567891011121314151617181920212223242526def my_plotter(ax, data1, data2, param_dict): \"\"\" 用来制作图表的辅助函数 参数 ---------- ax:Axes 要画的坐标轴 data1:数组 x数据 data2:数组 y数据 param_dict: dict类型 要传递给ax.plot的kwargs字典 Returns ------- list: list of artists added \"\"\" out = ax.plot(data1, data2, **param_dict) return out# which you would then use as:plt.figure(figsize = (10, 6))data1, data2, data3, data4 = np.random.randn(4, 100)fig, ax = plt.subplots(1, 1)my_plotter(ax, data1, data2, &#123;'marker': 'x'&#125;) 或者如果你想有两个小子图： 12345678# 创建带有1x2坐标轴网格的图形fig, (ax1, ax2) = plt.subplots(1, 2)my_plotter(ax1, data1, data2, &#123;'marker': 'x'&#125;)my_plotter(ax2, data3, data4, &#123;'marker': 'o'&#125;) 同样，对于这些简单的例子来说，这种风格看起来有点过头了，但是一旦图形变得稍微复杂一些，就会有回报。 后端(Backends)什么是后端？网站和邮件列表中的许多文档都提到了“后端（Backends）”，许多新用户对这个术语感到困惑。matplotlib针对许多不同的用例和输出格式。有些人在python shell中以交互方式使用matplotlib，并在键入命令时弹出绘图窗口。有些人运行Jupyter笔记本并绘制内联图以进行快速数据分析。其他人将matplotlib嵌入到图形用户界面（如wxpython或pygtk）中以构建丰富的应用程序。有些人在批处理脚本中使用matplotlib从数值模拟生成postscript图像，还有一些人运行Web应用程序服务器来动态提供图形。 为了支持所有这些用例，matplotlib可以针对不同的输出，并且这些功能中的每一个都称为后端（Backends）; “前端（frontend）”是面向用户的代码，即绘图代码，而“后端（Backends）”完成幕后的所有艰苦工作以制作图形。 有两种类型的后端：用户界面后端（用于pygtk，wxpython，tkinter，qt4或macosx;也称为“交互式后端”）和硬拷贝后端来制作图像文件（PNG，SVG，PDF，PS; 也被称为“非交互式后端”）。 配置后端有四种方法。如果它们彼此冲突，将使用以下列表中最后提到的方法，例如，调用 use() 将覆盖 matplotlibrc 中的设置。 matplotlibrc文件中的后端参数（请参阅[使用样式表和rcParams自定义Matplotlib](https://matplotlib.org/tutorials/introductory/customizing.html)）：1backend : WXAgg #使用带有反纹理(agg)呈现的wxpython 在Unix系统上，为当前shell或单个脚本设置[MPLBACKEND](https://matplotlib.org/faq/environment_variables_faq.html#envvar-MPLBACKEND)环境变量：1234&gt; export MPLBACKEND=module://my_backend&gt; python simple_plot.py&gt; MPLBACKEND=&quot;module://my_backend&quot; python simple_plot.py 在Windows上，只有前者是可用的： 12&gt; set MPLBACKEND=module://my_backend&gt; python simple_plot.py 设置此环境变量将覆盖任何 matplotlibrc 中的后端参数，即使当前工作目录中存在matplotlibrc也是如此。 因此，全局设置MPLBACKEND ，例如 在.bashrc 或 .profile 中，不鼓励它，因为它可能导致反常的行为。如果您的脚本依赖于特定的后端，则可以使用 use() 函数： 1234import matplotlib# 默认情况下生成postscript输出matplotlib.use('PS') 如果使用 use() 函数，则必须在输入 matplotlib.pyplot 之前完成此操作。导入 pyplot 后调用 use() 将不起作用。如果用户希望使用不同的后端，则使用 use() 将需要更改代码。因此，除非绝对必要，否则应避免显式调用 use()。 注意：后端名称规范不区分大小写；例如，‘GTK3Agg’ 和 ‘gtk3agg’ 是等效的。 通过典型的方式安装matplotlib，例如：从二进制安装程序或Linux发行包安装的话，可以设置好一个默认的后端，允许交互式工作和从脚本绘图，输出到屏幕和/或文件，所以至少一开始的时候你不需要使用上面给出的任何方法。 但是，如果您想编写图形用户界面或Web应用程序服务器（Web应用程序服务器中的Matplotlib），或者需要更好地了解正在发生的事情，请继续阅读。为了使图形用户界面可以更加自定义，matplotlib将画布（绘图所在的位置）中的渲染器（实际绘制的东西）的概念分开。用户界面的规范渲染器是Agg，它使用 Anti-Grain Geometry C++库来制作图形的光栅（像素）图像。除macosx之外的所有用户界面都可以与agg渲染一起使用，例如WXAgg，GTK3Agg，QT4Agg，QT5Agg，TkAgg。此外，一些用户界面支持其他渲染引擎。 例如，使用GTK + 3，您还可以选择Cairo渲染（后端GTK3Cairo）。 对于渲染引擎，还可以区分矢量(vector)或光栅(raster)渲染器。矢量图形语言发出绘图命令，例如“从此点到此点绘制线”，因此无标度，并且栅格后端生成线的像素表示，其精度取决于DPI设置。 下面是matplotlib渲染器的摘要(每个渲染器都有一个同名的后端；它们是非交互式后端，能够写入文件)： 渲染格式 文件类型 描述 AGG png raster graphics – 使用反纹理几何（Anti-Grain Geometry）引擎的高质量图像。 PS ps eps vector graphics – Postscript output PDF pdf vector graphics – Portable Document Format SVG svg vector graphics – Scalable Vector Graphics Cairo png ps pdf svg raster graphics 和 vector graphics – 使用 Cairo图形库(Cairo graphics)库 以下是支持的用户界面和渲染器组合; 这些是交互式后端，能够显示到屏幕并使用上表中的适当渲染器写入文件： 渲染格式 文件类型 Qt5Agg 在Qt5画布中进行Agg渲染(需要PyQt5)。可以在IPython中使用 %matplotlib qt5 激活此后端。 ipympl 嵌入在Jupyter小部件中的Agg渲染。（需要ipympl）。这个后端可以在带有％matplotlib ipympl 的Jupyter笔记本中启用。 GTK3Agg Agg渲染到GTK 3.x画布（需要PyGObject，pycairo或cairocffi）。 可以使用％matplotlib gtk3 在 IPython中激活此后端。 macosx 将AGG渲染到OSX中的Cocoa画布中。可以在IPython中使用 %matplotlib OSX 激活此后端。 TkAgg Agg渲染到Tk画布（需要TkInter）。可以使用 ％matplotlib tk 在IPython中激活此后端。 nbAgg 在经典的Jupyter笔记本中嵌入一个交互式界面。 可以通过％matplotlib 笔记本 在Jupyter笔记本中启用此后端。 WebAgg show() 将启动一个带有交互式图形的 tornado 服务。 GTK3Cairo 在GTK 3.x画布上呈现cairo(需要PyGObject 和 pycairo 或 cairocffi )。 Qt4Agg Agg渲染到 Qt4 画布（需要 PyQt4 或pyside）。可以使用 ％matplotlib qt4 在IPython中激活此后端。 WXAgg Agg渲染到 wxWidgets 画布（需要wxPython 4）。可以使用 ％matplotlib wx 在IPython中激活此后端。 ipymplJupyter小部件生态系统的移动速度太快，无法直接在Matplotlib中支持。安装ipympl 12345pip install ipympljupyter nbextension enable --py --sys-prefix ipympl# 或者conda install ipympl -c conda-forge 请参阅 jupyter-matplotlib 了解更多细节。 GTK 和 CairoGTK3 后端 (包括 GTK3Agg 和 GTK3Cairo) 依赖于 Cairo (pycairo&gt;=1.11.0 或 cairocffi). 如何选择PyQt4或PySide？QT_API环境变量可以设置为 pyqt 或 pyside，分别使用 PyQt4 或 PySide。 由于要使用的绑定的默认值是PyQt4，matplotlib 首先尝试导入它，如果导入失败，它会尝试导入 PySide。 什么是交互模式？使用交互式后端（请参阅什么是后端？）允许但本身并不需要或确保绘制到屏幕上。是否以及何时绘制到屏幕，以及在屏幕上绘制绘图后是否继续脚本或shell会话取决于调用的函数和方法，以及确定matplotlib是否处于“交互模式”的状态变量”。默认的布尔值由matplotlibrc文件设置，并且可以像任何其他配置参数一样进行自定义（请参阅使用样式表和rcParams自定义Matplotlib）。它也可以通过matplotlib.interactive() 设置，并且可以通过matplotlib.is_interactive() 查询其值。无论是在脚本还是在shell中，在绘图命令流的中间打开和关闭交互模式很少需要并且可能令人困惑，因此在下文中我们将假设所有绘图都是以交互模式打开或关闭。 注意：与交互性相关的主要更改，特别是show()的角色和行为，在向matplotlib 1.0版的过渡中进行了更改，并在1.0.1中修复了错误。这里我们描述主要交互式后端的1.0.1版行为，但MacOSX除外。 交互模式也可以通过matplotlib.pyplot.ion()打开，并通过matplotlib.pyplot.ioff()关闭。 注意：交互模式在ipython和普通的python shell中使用合适的后端，但它在IDLE IDE中不起作用。如果默认后端不支持交互性，则通过“可以使用什么是后端？”这个话题中讨论的任何方法显式激活交互式后端。 交互例子从普通的python提示符，或者在没有选项的情况下调用ipython之后，试试这个： 123import matplotlib.pyplot as pltplt.ion()plt.plot([1.6, 2.7]) [&lt;matplotlib.lines.Line2D at 0x20712cf1828&gt;] 假设您运行的是1.0.1或更高版本，并且默认情况下安装并选择了交互式后端，您应该看到一个图，并且您的终端提示也应该是活动的; 您可以键入其他命令，例如： 12plt.title(\"interactive test\")plt.xlabel(\"index\") Text(0.5, 0, &apos;index&apos;) 然后你会看到每一行后都要更新绘图。从版本1.5开始，通过其他方式修改绘图也应该自动更新大多数后端的显示。获取对Axes实例的引用，并调用该实例的方法： 12ax = plt.gca()ax.plot([3.1, 2.2]) [&lt;matplotlib.lines.Line2D at 0x20712a740f0&gt;] 如果你使用的是某些后端（如macosx）或旧版本的matplotlib，则可能无法立即将新行添加到绘图中。在这种情况下，您需要显式调用draw() 以更新绘图： 1plt.draw() &lt;Figure size 432x288 with 0 Axes&gt;非交互式示例像上一个示例中一样开始一个新会话，但现在关闭交互模式： 123import matplotlib.pyplot as pltplt.ioff()plt.plot([1.6, 2.7]) [&lt;matplotlib.lines.Line2D at 0x20712a9afd0&gt;] 什么都没发生 - 或者至少没有任何东西出现在屏幕上（除非你使用macosx后端，这是异常的）。要显示绘图，您需要执行以下操作： 1plt.show() 现在你看到图像，但你的终端命令行没有响应; show() 命令会阻止其他命令的输入，直到您手动终止绘图窗口。 被迫使用阻塞功能？这有什么用，假设您需要一个脚本，将文件内容绘制到屏幕上。您想查看该图，然后结束脚本。如果没有一些阻塞命令（如show()），脚本会闪现图像，然后立即结束，屏幕上不显示任何内容。 此外，非交互模式会将所有图形延迟到调用show()；这比每次在脚本中添加新功能时重新绘制打印更有效。 在版本1.0之前，show()通常不能在单个脚本中调用多次(尽管有时可以不受限制)；对于版本1.0.1及更高版本，此限制已解除，因此可以编写如下脚本： 1234567import numpy as npimport matplotlib.pyplot as pltplt.ioff()for i in range(3): plt.plot(np.random.rand(10)) plt.show() 这就形成了三个阴谋，一次一个。即。第一个地块关闭后，将显示第二个地块。 摘要在交互模式下，pyplot功能会自动绘制到屏幕上。 交互式绘制时，如果除了pyplot函数之外还使用对象方法调用，则只要想要刷新绘图，就调用draw() 。 在要生成一个或多个图形的脚本中使用非交互模式，并在结束或生成一组新图形之前显示它们。在这种情况下，使用show()显示图形并阻止执行，直到您手动销毁它们。 性能无论是以交互模式探索数据还是以编程方式保存大量绘图，渲染性能都可能成为您管道中的一个痛苦瓶颈。Matplotlib提供了几种方法来大大减少渲染时间，但代价是绘图外观略有变化（达到可设置的容差）。可用于缩短渲染时间的方法取决于正在创建的绘图类型。 线段简化对于具有直线段的打印(例如，典型的直线打印、多边形轮廓等)，渲染性能可以由matplotLibrc文件中的path.Simplify和path.Simplify_Threshold参数控制(有关matplotlib文件的详细信息，请参见使用样式表和rcParams自定义Matplotlib)。Simplify参数是一个布尔值，用于指示是否简化了直线段。path.Simplify_Threshold参数控制简化线段的程度；阈值越高，渲染速度越快。 以下脚本将首先显示数据而不进行任何简化，然后简化显示相同的数据。 尝试与它们互动： 1234567891011121314151617import numpy as npimport matplotlib.pyplot as pltimport matplotlib as mpl# 设置并创建要绘图的数据y = np.random.rand(100000)y[50000:] *= 2y[np.logspace(1, np.log10(50000), 400).astype(int)] = -1mpl.rcParams['path.simplify'] = Truempl.rcParams['path.simplify_threshold'] = 0.0plt.plot(y)plt.show()mpl.rcParams['path.simplify_threshold'] = 1.0plt.plot(y)plt.show() Matplotlib目前默认为1/9的保守简化阈值。如果要更改默认设置以使用其他值，可以更改matplotlibrc文件。或者，您可以为交互式绘图（具有最大简化）创建新样式，并为出版质量绘图创建另一种样式（最小化简化）并根据需要激活它们。有关如何执行这些操作的说明，请参阅使用样式表和rcParams自定义Matplotlib。 简化通过将线段迭代地合并为单个矢量直到下一个线段与矢量的垂直距离（在显示坐标空间中测量）大于 path.simplify_threshold 参数来工作。 注意：与版本细分如何简化相关的更改在版本2.1中进行。 2.1之前的这些参数仍将改善渲染时间，但2.1版及更高版本的某些类型数据的渲染时间将大大改善。 标记简化标记也可以简化，尽管不如线段强大。标记简化仅适用于Line2D对象（通过市场营销属性）。无论在哪里传递Line2D构造参数，例如matplotlib.pyplot.plot() 和 matplotlib.axes.Axes.plot()，都可以使用markevery参数： 1plt.plot(x, y, markevery=10) 市场营销论证允许天真的子采样，或尝试均匀间隔（沿x轴）采样。 有关更多信息，请参阅Markevery演示。 将线分割成较小的块如果您正在使用Agg后端（请参阅什么是后端？），那么您可以使用 agg.path.chunksize rc参数。这允许您指定块大小，并且任何具有大于该多个顶点的行将被分割成多行，每行不超过 agg.path.chunksize 许多顶点。（除非agg.path.chunksize为零，在这种情况下没有分块。）对于某种类型的数据，将线条分成合理的大小可以大大减少渲染时间。 以下脚本将首先显示没有任何块大小限制的数据，然后显示块大小为10,000的相同数据。当数字很大时，可以最好地看到差异，尝试最大化GUI然后与它们进行交互： 123456789101112131415161718import numpy as npimport matplotlib.pyplot as pltimport matplotlib as mplmpl.rcParams['path.simplify_threshold'] = 1.0# Setup, and create the data to ploty = np.random.rand(100000)y[50000:] *= 2y[np.logspace(1,np.log10(50000), 400).astype(int)] = -1mpl.rcParams['path.simplify'] = Truempl.rcParams['agg.path.chunksize'] = 0plt.plot(y)plt.show()mpl.rcParams['agg.path.chunksize'] = 10000plt.plot(y)plt.show() 图例轴的默认图例行为尝试查找覆盖最少数据点的位置（loc =’best’）。 如果有大量数据点，这可能是非常昂贵的计算。 在这种情况下，您可能希望提供特定位置。 使用快速的风格快速样式可用于自动将简化和分块参数设置为合理的设置，以加快绘制大量数据的速度。它可以通过运行简单地使用： 12import matplotlib.style as mplstylemplstyle.use('fast') 它的重量非常轻，因此它可以很好地与其他风格配合使用，只需确保最后应用快速样式，以便其他样式不会覆盖设置： 1mplstyle.use(['dark_background', 'ggplot', 'fast'])","categories":[{"name":"Python","slug":"Python","permalink":"https://www.codingpy.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.codingpy.cn/tags/Python/"},{"name":"matplotlib","slug":"matplotlib","permalink":"https://www.codingpy.cn/tags/matplotlib/"}],"author":{"name":"Yinux's Blog","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/avatar/avatar.png","url":"http://www.codingpy.cn"}},{"title":"Seaborn中文教程（转）","slug":"seaborn","date":"2019-07-25T00:30:00.000Z","updated":"2019-09-20T14:17:00.812Z","comments":true,"path":"2019/07/25/seaborn/","link":"","permalink":"https://www.codingpy.cn/2019/07/25/seaborn/","excerpt":"Seaborn是基于matplotlib的图形可视化python包。它提供了一种高度交互式界面，便于用户能够做出各种有吸引力的统计图表。Seaborn是在matplotlib的基础上进行了更高级的API封装，从而使得作图更加容易，在大多数情况下使用seaborn能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。应该把Seaborn视为matplotlib的补充，而不是替代物。同时它能高度兼容numpy与pandas数据结构以及scipy与statsmodels等统计模式。","text":"Seaborn是基于matplotlib的图形可视化python包。它提供了一种高度交互式界面，便于用户能够做出各种有吸引力的统计图表。Seaborn是在matplotlib的基础上进行了更高级的API封装，从而使得作图更加容易，在大多数情况下使用seaborn能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。应该把Seaborn视为matplotlib的补充，而不是替代物。同时它能高度兼容numpy与pandas数据结构以及scipy与statsmodels等统计模式。 章节概要 Seaborn介绍： 安装Seaborn 加载库和数据文件 Seaborn的绘图功能 用Matplotlib定制 Pandas的作用 Seaborn 主题 调色盘 图形重叠 融合数据 迷你画廊 安装Seaborn首先确定你的电脑已安装以下应用 Python 2.7+ or Python 3 Pandas Matplotlib Seaborn Jupyter Notebook(可选) 打开Jupyter Notebook, 过几秒钟会弹出网页窗口Home。点击右侧的New，新建一个Notebook，弹出一个新的网页窗口，点击上方可命名文件。 Seaborn介绍：Seaborn属于Matplotlib的一个高级接口，为我们进行数据的可视化分析提供了极大的方便。 加载库和数据文件加载pandas、matplotlib、seaborn。 12345678910111213# coding: utf-8#加载pandasimport pandas as pd#加载matplotlibfrom matplotlib import pyplot as plt#在notebook中显示数据点%matplotlib inline#加载seabornimport seaborn as sb 这里提供了一个数据文件，下载链接为Pokemon.csv 用pandas读取数据文件，并显示前五行。 12345#用pandas读取Pokemon.csvdf = pd.read_csv(\"f:/Pokemon.csv\", encoding = \"unicode_escape\")#读取前五行，编译后的结果为一个列表。df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } # Name Type 1 Type 2 Total HP Attack Defense Sp. Atk Sp. Def Speed Stage Legendary 0 1 Bulbasaur Grass Poison 318 45 49 49 65 65 45 1 False 1 2 Ivysaur Grass Poison 405 60 62 63 80 80 60 2 False 2 3 Venusaur Grass Poison 525 80 82 83 100 100 80 3 False 3 4 Charmander Fire NaN 309 39 52 43 60 50 65 1 False 4 5 Charmeleon Fire NaN 405 58 64 58 80 65 80 2 False 12#绘制散点图sb.lmplot(x = 'Attack', y = 'Defense', data = df) D:\\Function\\Anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval &lt;seaborn.axisgrid.FacetGrid at 0x2ea94d27c50&gt; Seaborn的绘图功能Seaborn最大的优点之一在于其种类繁多的绘图功能，下面我们利用lmplot()函数，用一行代码来绘制散点图。我们希望x轴显示Attack数据，y轴显示Defense数据，则可以编写代码。 事实上seaborn并没有专门用来绘制散点图的功能，实际上我们用它来拟合和绘制回归线。幸运的是，我们可以通过设置函数的参数来得到我们想要的散点图。用fit_reg = False 移去回归线，用hug参数来用不同颜色显示Pokemon进化阶段的信息。 12345#移去回归线，用不同颜色来表示pokemon的进化阶段，即刻得到散点图：sb.lmplot(x = 'Attack', y = 'Defense', data = df, fit_reg = False, hue = 'Stage') &lt;seaborn.axisgrid.FacetGrid at 0x2ea950e4278&gt; 从散点图可以看出，所有的数据点都分布在数轴的正半轴，然而散点图的数轴从负数开始的，我们可以对它进行改进。 用Matplotlib定制虽然Seaborn是Matplotlib的一个高级接口，但是我们有时候也需要用到Matplotlib。其中包括设置数轴的范围。我们利用Matplotlib的ylim()和xlim()函数来设置数轴的范围。 12345#设置数轴范围plt.gca().set(xlim = (0, None), ylim = (0, None), xlabel='Attack', ylabel='Defense') [(0, 1.0), Text(0, 0.5, &apos;Defense&apos;), (0, 1.0), Text(0.5, 0, &apos;Attack&apos;)] Pandas的作用尽管这是一个Seaborn教程，pandas依然在实际应用中起到了十分重要的作用。下面我们根据Pokemon的攻击数据来绘制箱形图 12sb.boxplot(data = df)#得到的箱形图： &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea950c99b0&gt; 很好，这是一个良好的开端，但是我们可以移除不需要的几列数据。 移除掉Total，因为我们有独立的统计数据。 移除掉Stage跟Legendary，因为它们不是攻击统计数据。 我们可以创建一个新的数据集stats_df，满足我们上述的要求。12345#创建新数据集stats_df = df.drop(['Total', 'Stage', 'Legendary'], axis = 1)#Boxplotsb.boxplot(data = stats_df) &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea962be358&gt; 得到了一个改进了的箱形图。 Seaborn 主题Seaborn的另一个好处就是其恰到好处、开箱即用的风格主题。其默认的主题为“darkgrid”下一步，我们把主题改为“whitegrid”来创建一个小提琴图 小提琴图常常作为箱形图的替代 小提琴图通过小提琴的厚度展示了数据的分布，而不仅仅是总结数据。 根据Pokemon的主要类型，我们可以将Attack数据的分布可视化。 12345#设置主题sb.set_style('whitegrid')#violin plotsb.violinplot(x = 'Type 1', y = 'Attack', data = df) &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea96343828&gt; 可以得到小提琴图，x轴显示的是Pokemon的Type1，y轴显示的是不同Pokemon的攻击数值。 调色盘Seaborn可以根据我们的需求，来设置颜色。我们可以创建一个python命令列表，用颜色的十六进制数值来设置。数值可以在Bulbapedia中寻找。 123456789101112131415161718192021#创建颜色列表pkmn_type_colors = ['#78C850', '#F08030', '#6890F0', '#A8B820', '#A8A878', '#A040A0', '#F8D030', '#E0C068', '#EE99AC', '#C03028', '#F85888', '#B8A038', '#705898', '#98D8D8', '#7038F8' ]#导入小提琴图中sb.violinplot(x = 'Type 1', y = 'Attack', data = df, palette = pkmn_type_colors) D:\\Function\\Anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea94d24470&gt; 为了能够让数据文件中的151个Pokemon都能够在图中简单展示，我们可以用群集图 swarm plot达到这一目的。 12sb.swarmplot(x = 'Type 1', y = 'Attack', data = df, palette = pkmn_type_colors) &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea96d5bda0&gt; 图形重叠我们已经绘制出了小提琴图和群集图，Seaborn允许我们将这两张图整合在一张图上，步骤如下： 首先，我们用Matplotlib设置图形比例。 然后，我们绘制小提琴图，用inner = None将小提琴中间的木杆移去。 接着，我们绘制群集图，并将数据点的颜色变为黑色。 最后，我们可以用Matplotlib设置一个标题。1234567891011121314151617#设置图形比例plt.figure(figsize = (10, 6))#创建violinplotsb.violinplot(x = 'Type 1', y = 'Attack', data = df, inner = None, palette = pkmn_type_colors)#创建swarmplotsb.swarmplot(x = 'Type 1', y = 'Attack', data = df, color = 'k', palette = pkmn_type_colors)#设置标题plt.title('Attack by Type')#其中alpha为透明度。 编译后可以得到如下图形。 Text(0.5, 1.0, &apos;Attack by Type&apos;) 现在我们可以清晰的看到不同Pokemon的攻击值了。那么我们怎么看其他的数值呢？ 融合数据为了展现其他的数据，我们当然可以重复以上的步骤，绘制多张图。但是我们同样也可以在一张图上表示所有的数据，这时候pandas就派上用场了。我们可以利用pandas的melt()函数来将一些数据进行融合，这样就可以在不同Pokemon之间直接进行比对，melt()需要导入3个参数，分别为： 需要融合的数据列表 需要保留的ID变量，其他变量将会被Pandas融合。 融合而成的新变量的名字。1234567#数据融合melted_df = pd.melt(stats_df, id_vars = ['Name', 'Type 1', 'Type 2'], var_name = 'Stat')#前五行melted_df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Name Type 1 Type 2 Stat value 0 Bulbasaur Grass Poison # 1 1 Ivysaur Grass Poison # 2 2 Venusaur Grass Poison # 3 3 Charmander Fire NaN # 4 4 Charmeleon Fire NaN # 5 我们为已经融合的数据列表melted_df绘制群集图。 12345678910111213#数据融合melted_df = pd.melt(stats_df, id_vars = ['Name', 'Type 1', 'Type 2'], var_name = 'Stat')#前五行melted_df.head()#绘制群集图sb.swarmplot(x = 'Stat', y = 'value', data = melted_df, hue = 'Type 1')#就可以得到如下的群集图。x轴为Stat中融合的六个变量，y轴为Stat的值，不同颜色代表不同的Pokemon Type 1。 &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea9887da58&gt; 这张图表有一些细节需要完善： 扩大图表。 使用split = True 来分隔色调。 使用我们自定义的颜色。 调整y轴的范围 将图例放在右侧。1234567891011121314#扩大图表plt.figure(figsize = (10, 8))#绘制群集图，使用split = True 来分割，使用自定义的颜色sb.swarmplot(x = 'Stat', y = 'value', data = melted_df, hue = \"Type 1\", split = True, palette = pkmn_type_colors)#调整Y轴的范围plt.ylim(0,260)#将图例放在右侧plt.legend(bbox_to_anchor = (1,1), loc = 2) D:\\Function\\Anaconda3\\lib\\site-packages\\seaborn\\categorical.py:2974: UserWarning: The `split` parameter has been renamed to `dodge`. warnings.warn(msg, UserWarning) &lt;matplotlib.legend.Legend at 0x2ea98a7f0b8&gt; 即可得到一个已经细节完善后的图表。 迷你画廊HeatmapHeatmap可以帮助可视化矩阵状的数据。 12345#计算相关性corr = stats_df.corr()#Hteatmapsb.heatmap(corr) &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea98dac4e0&gt; HistogramHistogram能够绘制变量的数值分布。 12#绘制直方图sb.distplot(df.Attack) &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea988d2da0&gt; Bar Plot条形图可以帮助分类变量的可视化。 12345#绘制条形图abssb.countplot(x = 'Type 1', data = df, palette = pkmn_type_colors)#倾斜x轴的标签plt.xticks(rotation = -45) (array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), &lt;a list of 15 Text xticklabel objects&gt;) Factor plotsFactor plots能够根据类别分离图表。 1234567891011#分离图表g = sb.factorplot(x = 'Type 1', y = 'Attack', data = df, hue = 'Stage', #用不同的颜色表示Stage col = 'Stage', #根据Stage来分离图表 kind = 'swarm', #创建群集图 )#倾斜x轴的标签plt.xticks(rotation = -45) D:\\Function\\Anaconda3\\lib\\site-packages\\seaborn\\categorical.py:3666: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`&apos;point&apos;`) has changed `&apos;strip&apos;` in `catplot`. warnings.warn(msg) (array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), &lt;a list of 15 Text xticklabel objects&gt;) 可以得到根据Stage分离的三个图表，分别用不同颜色的点表示不同的Pokemon。 Density Plot密度图显示的是两个变量之间的分布。曲线越密集的地方说明两个变量的关系越近，越稀疏的地方说明关系越远。 12#创建密度图sb.kdeplot(df.Attack, df.Defense) D:\\Function\\Anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea9a8d6f60&gt; Joint Distribution Plot联合分布图将散点图和直方图的信息结合起来，提供双变量分布的详细信息。 12#创建联合分布图sb.jointplot(x = 'Attack', y = 'Defense', data = df) &lt;seaborn.axisgrid.JointGrid at 0x2ea9ab74da0&gt; 这里只是介绍了Seaborn常用的绘图功能，还有更强大的功能Example gallery需要我们去学习，去探索。 12","categories":[{"name":"Python","slug":"Python","permalink":"https://www.codingpy.cn/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.codingpy.cn/tags/Python/"},{"name":"seaborn","slug":"seaborn","permalink":"https://www.codingpy.cn/tags/seaborn/"}],"author":{"name":"Yinux's Blog","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/avatar/avatar.png","url":"http://www.codingpy.cn"}},{"title":"SQL学习日记（二）","slug":"SQL_learndiary2","date":"2019-07-21T00:30:00.000Z","updated":"2019-09-19T14:37:01.430Z","comments":true,"path":"2019/07/21/SQL_learndiary2/","link":"","permalink":"https://www.codingpy.cn/2019/07/21/SQL_learndiary2/","excerpt":"","text":"章节导航 SQL语句的多表查询方式 创建和管理DLL 数据处理 DML 约束 SQL语句的多表查询方式例如：按照 department_id 查询 employees(员工表)和 departments(部门表)的信息。 方式一( 通用型):1SELECT ... FROM ... WHERE 123SELECT e.last_name, e.department_id, d.department_nameFROM employees e, departments dWHERE e.`department_id` = d.`department_id`; 方式二：1SELECT ... FROM ... NATURAL JOIN ... 有局限性：会自动连接两个表中相同的列(可能有多个:department_id 和manager_id) 123SELECT last_name,department_id,department_nameFROM employeesNATURAL JOIN departments 方式三： 1SELECT ... JOIN ... USING ... 有局限性：好于方式二，但若多表的连接列列名不同，此法不合适 1234SELECT last_name,department_id,department_nameFROM employeesJOIN departmentsUSING(department_id) 方式四： 1SELECT ... FROM ... JOIN ... ON ... 常用方式，较方式一，更易实现外联接(左、右、满) 1234SELECT last_name,e.department_id,department_nameFROM employees eJOIN departments dON e.department_id = d.department_id 内连接 –等值连接 –不等值连接 –非自连接 –自连接 外连接 –左外连接、右外连接、满外连接 创建和管理DLL CRAETE TABLE /TRUNCATE TABLE /ALTER TABLE /REANME…TO/DROP TABLE ..操作完以后，自动 commit;所以，rollback 对其操作，没有效果 创建表 直接创建 123456create table emp1(name varchar2(20),salary number(8,2)default 1000,id number(4),hire_date date); 通过子查询的方式创建 1234create table emp2asselect last_name name,employee_id id,hire_datefrom employees; 或者 12345create table emp2asselect last_name name,employee_id id,hire_datefrom employeeswhere department_id = 80;/where 1=2; 修改表 增加新的列 12alter table emp1add(birthday date) 修改现有的列 12alter table emp1modify(name varchar2(25) default &apos;abc&apos;) 重命名现有的列 12alter table emp1rename column salary to sal; 删除现有的列 12alter table emp1drop column birthday; 清空表中的数据(与 与 delete from table_name 1truncate table emp2; 重命名表 1rename emp2 to emp3; 删除表 1drop table emp3; 数据处理 增 增添一条记录 12insert into [表名](,,,,,)values(,,,,,) 从其它表中拷贝数据 123insert into [表名]select .... from [另一个表]where .... 改 123update [表名]set .....where .... 删 12delete from [表名]where .... 查(最常用的数据库操作) 123456select ....from …where ….group by …having …order by …. 约束对创建的表的列属性、字段进行的限制。诸如:not null/unique/primarykey/foreign key/check 如何定义约束— 在创建表的同时，添加对应属性的约束 表级约束 &amp; 列级约束 12345678910111213141516create table emp1( employee_id number(8), salary number(8), -- 列级约束 hire_date date not null, dept_id number(8), email varchar2(8) constraint emp1_email_uk unique, name varchar2(8) constaint emp1_name_uu not null, first_name varchar2(8), -- 表级约束 constraint emp1_emp_id_pk primary key(employee_id), constraint emp1_fir_name_uk unique(first_name), constraint emp1_dept_id_fk foreign key(dept_id) references departments(department_id) ON DELETE CASCADE) 只有 not null 时只能使用列级约束，其他的约束两种方式皆可 添加和删除表的约束– 在创建表以后，只能添加和删除，不能修改 添加 12alter table emp1add constaint emp1_sal_ck check(salary &gt; 0) 对于 not null 来说，不用 add ，需要 modify ：12alter table emp1modify (salary not null) 删除 12alter table emp1drop constaint emp1_sal_ck 使某一个约束失效：此约束还存在于表中，只是不起作用 12alter table emp1disable constraint emp1_email_uk; 使某一个约束激活：激活以后，此约束具有约束力 12alter table emp1enable constraint emp1_email_uk;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://www.codingpy.cn/categories/数据库/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.codingpy.cn/tags/数据库/"},{"name":"SQL","slug":"SQL","permalink":"https://www.codingpy.cn/tags/SQL/"}],"author":{"name":"Yinux's Blog","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/avatar/avatar.png","url":"http://www.codingpy.cn"}},{"title":"SQL学习日记（一）","slug":"SQL_learndiary1","date":"2019-07-18T00:30:00.000Z","updated":"2019-09-19T14:26:23.462Z","comments":true,"path":"2019/07/18/SQL_learndiary1/","link":"","permalink":"https://www.codingpy.cn/2019/07/18/SQL_learndiary1/","excerpt":"","text":"数据库的好处1.持久化数据到本地 2.可以实现结构化查询，方便管理数据库相关概念1、DB：数据库，保存一组有组织的数据的容器2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据3、SQL:结构化查询语言，用于和DBMS通信的语言 数据库存储数据的特点1、将数据放到表中，表再放到库中2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”5、表中的数据是按行存储的，每一行类似于java中的“对象”。 MySQL服务的启动和停止方式一：计算机——右击管理——服务方式二：通过管理员身份运行 12net start 服务名（启动服务）net stop 服务名（停止服务） MySQL服务的登录和退出方式一：通过mysql自带的客户端只限于root用户 方式二：通过windows自带的客户端登录： 1mysql 【-h主机名 -P端口号 】-u用户名 -p密码 退出：exit或ctrl+C MySQL的常见命令1.查看当前所有的数据库 1show databases; 2.打开指定的库 1use 库名 3.查看当前库的所有表 1show tables; 4.查看其它库的所有表 1show tables from 库名; 5.创建表 123456create table 表名( 列名 列类型, 列名 列类型， 。。。); 6.查看表结构 1desc 表名; 7.查看服务器的版本方式一：登录到mysql服务端 1select version(); 方式二：没有登录到mysql服务端 123mysql --version或mysql --V MySQL的语法规范1.不区分大小写,但建议关键字大写，表名、列名小写2.每条命令最好用分号结尾3.每条命令根据需要，可以进行缩进 或换行4.注释 单行注释：#注释文字 单行注释：– 注释文字 多行注释：/* 注释文字 */ SQL的语言分类DQL（Data Query Language）：数据查询语言 selectDML(Data Manipulate Language):数据操作语言 insert 、update、deleteDDL（Data Define Languge）：数据定义语言 create、drop、alterTCL（Transaction Control Language）：事务控制语言 commit、rollback SQL的常见命令1234567891011show databases； 查看所有的数据库use 库名； 打开指定 的库show tables ; 显示库中的所有表show tables from 库名;显示指定库中的所有表create table 表名( 字段名 字段类型, 字段名 字段类型); 创建表desc 表名; 查看指定表的结构select * from 表名;显示表中的所有数据 SQL实例12345678910111213141516171819202122232425262728-- select department_name from departments-- select * from departments where department_name = &apos;Con&apos;-- select * from departments where department_name = &apos;Con&apos; or location_id = 1700-- select distinct location_id from departments;-- select department_id from departments where location_id in (1700) -- select department_id from departments where department_name like &apos;%Con%&apos;-- select count(depart) from departments;-- insert into departments(department_id, department_name, manager_id, location_id) values(290, &apos;Xrh&apos;, 117, 1100)-- update departments set manager_id = 512 where department_name = &apos;Gov&apos;-- DELETE from departments where department_id = 290;-- CREATE table person(-- username varchar(10),-- usergender varchar(6),-- userage int(4),-- primary key(username)-- );-- drop table person;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://www.codingpy.cn/categories/数据库/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.codingpy.cn/tags/数据库/"},{"name":"SQL","slug":"SQL","permalink":"https://www.codingpy.cn/tags/SQL/"}],"author":{"name":"Yinux's Blog","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/avatar/avatar.png","url":"http://www.codingpy.cn"}},{"title":"windows环境下搭建spark开发环境(IDEA)","slug":"spark_init","date":"2019-07-14T00:30:00.000Z","updated":"2019-09-20T14:19:11.805Z","comments":true,"path":"2019/07/14/spark_init/","link":"","permalink":"https://www.codingpy.cn/2019/07/14/spark_init/","excerpt":"“大数据”（Big Data）指一般的软件工具难以捕捉、管理和分析的大容量数据。“大数据”之“大”，并不仅仅在于“容量之大”，更大的意义在于：通过对海量数据的交换、整合和分析，发现新的知识，创造新的价值，带来“大知识”、“大科技”、“大利润”和“大发展”。“大数据”能帮助企业找到一个个难题的答案，给企业带来前所未有的商业价值与机会。大数据同时也给企业的IT系统提出了巨大的挑战。通过不同行业的“大数据”应用状况，我们能够看到企业如何使用大数据和云计算技术，解决他们的难题，灵活、快速、高效地响应瞬息万变的市场需求。","text":"“大数据”（Big Data）指一般的软件工具难以捕捉、管理和分析的大容量数据。“大数据”之“大”，并不仅仅在于“容量之大”，更大的意义在于：通过对海量数据的交换、整合和分析，发现新的知识，创造新的价值，带来“大知识”、“大科技”、“大利润”和“大发展”。“大数据”能帮助企业找到一个个难题的答案，给企业带来前所未有的商业价值与机会。大数据同时也给企业的IT系统提出了巨大的挑战。通过不同行业的“大数据”应用状况，我们能够看到企业如何使用大数据和云计算技术，解决他们的难题，灵活、快速、高效地响应瞬息万变的市场需求。 前言 本文重点介绍在如何Windows 10下开发spark应用程序的依赖环境的搭建。 本章概要 版本说明 环境配置 jdk配置 scala安装配置 spark安装配置 hadoop安装配置 Intellij IDEA下载与配置 版本说明 jdk:1.8 scala:2.12.0 spark:2.4.3 hadoop:2.7.7 环境配置 jdk配置 下载：登录Oracle官网，接受协议，注册登录，选择对应版本。因为我的本机是64位Windows，所以需要下载64位（Windows x64）JDK安装包。 ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/spark-init/jdkdownload.png) Windows下安装JDK非常方便，双击安装程序后，直接单击下一步即可，默认安装到C:\\Program Files\\Java目录下。其间会安装JRE，默认一下步即可。 设置环境变量 :右键单击桌面上的“此电脑”图标，在弹出的右键快捷菜单中选择最后一个“属性”选项；在弹出的系统窗口中，单击左侧“高级系统设置”选项，弹出“系统属性”对话框，如下图。 然后单击中间的“高级”选项卡，再单击下方的“环境变量(N)…”按钮。在弹出的环境变量对话框中，首先单击下方的“新建（W）…”按钮，然后在弹出的新建环境变量中输入对应的值。 在环境变量中找到“Path”添加jdk和jre下bin的地址，如下图：新建CLASS_PATH，如下图：检验配置是否成功，在cmd中运行java -version出现以下结果则说明jdk安装配置成功。 scala安装配置 下载：通过Spark官网下载页面 可知“Note: Starting version 2.0, Spark is built with Scala 2.11 by default.”，下载Spark2.4.3对应的 Scala 2.12.x。登录Scala官网，单击download按钮，然后再“Other Releases”标题下找到“Last 2.12.x maintenance release - Scala 2.12.0”链接。进入downloan页面，下拉找到如下图内容，下载msi格式的安装包即可。 安装: 默认安装到C:\\Program Files (x86)\\scala目录下 环境变量：与设置Java环境变量类型， SCALA_HOME=C:\\Program Files (x86)\\scala Path环境变量在最后追加;设置成功后在win+R输入cmd后打开命令行输入scala -version可以看到安装的版本%SCALA_HOME%\\bin； 安装Maven Maven的安装与配置可以参考：《Hadoop基础教程-第4章 HDFS的Java API（4.1 Maven入门）》Intellij IDEA上自带Maven，本文不再详细介绍Intellij IDEA下载与配置 下载与安装：登录官网，按照自己的需求下载（ultimate，旗舰版）或者（Community，社区版）。Ultimate版本是商业软件，需要付费，Community 版为免费版，足够平时日常开发需要。比如这里直接下载Community 启动，安装完成后，单击IntelliJ IDEA图标即可启动IntelliJ IDEA. 由于是第一次安装，所以不需要导入配置。默认选项即可。 选择“Evaluate for free”进入免费版可以根据自身的习惯选择风格，并点击左下角“Skip Remaining and Set Default” 安装scala插件：点击左下角：Configure-&gt;Plugins 搜索并安装scala安装完成后重启IDEA，然后开始配置全局scala SDK 配置JDK： 首先打开Project Structure，如下图然后我们添加上文安装的JDK，配置完成后点击OK，如下图： 配置JDK 配置全局scala SDK：选中“Global Libraries”，点击“+”号，在弹出的菜单中选中“Scala SDK”，如下图：在弹出的“Select JAR&#39;s for the new Scala SDK”中选择与本机scala版本一致的Version，在这里由于我的scala版本是2.12.0 所以我选择的是2.12.0版本点击右下角OK完成配置创建Maven项目 单击“Create New Project”选择maven点击Next，填写GroupID和ArtifactID点击Next，如下图：点击Finish，如下图：(在此步骤可以更改Content root 和 Module file location 的路径)创建完后右下角如果出现提示：请点击Enable Auto-Import 创建完后将scala框架添加到项目(若不设置有可能无法创建 scala class)：在IDEA启动后进入的界面中，可以看到界面左侧的项目界面，已经有一个名称为simpleSpark的工程。请在该工程名称上右键单击，在弹出的菜单中，选择Add Framework Surport，在左侧有一排可勾选项，找到scala，勾选即可（我的这里没有找到，但是也能运行，为了确保无误，借用haijiege的图） 将项目文件设置为source root ，选中scala–&gt;右键快捷菜单–&gt;Mark Directory as –&gt;Sources root 编辑代码 pom.xmlSpark2.4.3 Maven库请参见 https://mvnrepository.com/artifact/org.apache.spark/spark-core_2.12/2.4.3 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475 &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;Test.pack&lt;/groupId&gt; &lt;artifactId&gt;SparkTest&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;inceptionYear&gt;2008&lt;/inceptionYear&gt; &lt;properties&gt; &lt;spark.version&gt;2.4.3&lt;/spark.version&gt; &lt;scala.version&gt;2.12.0&lt;/scala.version&gt; &lt;/properties&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;scala-tools.org&lt;/id&gt; &lt;name&gt;Scala-Tools Maven2 Repository&lt;/name&gt; &lt;url&gt;http://scala-tools.org/repo-releases&lt;/url&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-core --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-core_2.12&lt;/artifactId&gt; &lt;version&gt;2.4.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.4&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.specs&lt;/groupId&gt; &lt;artifactId&gt;specs&lt;/artifactId&gt; &lt;version&gt;1.2.5&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;version&gt;2.2-beta-5&lt;/version&gt; &lt;configuration&gt; &lt;classifier&gt;dist&lt;/classifier&gt; &lt;appendAssemblyId&gt;true&lt;/appendAssemblyId&gt; &lt;descriptorRefs&gt; &lt;descriptor&gt;jar-with-dependencies&lt;/descriptor&gt; &lt;/descriptorRefs&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;make-assembly&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;single&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 保存pom.xml文件后，如果Intellij IDEA右下角出现如下提示，请单击“Enable Auto-Import” WordCount.scala :新建Scala Class类WordCount.scala，Scala源文件后缀名是.scala。通过右键刚刚设置为sources root的scala文件夹，就有了new-&gt;scala class的选项。新建一个scala class，并且命名WordCount，选择object类型。打开建好的WordCount.scala文件，清空！然后黏贴以下代码： 程序运行 文件数据文件sampleDataSet 程序文件WordCount 运行在源文件代码中右键单击–&gt;Run “WordCount” 运行结果如下（输出的信息较多请上下翻一下就能找到）","categories":[{"name":"大数据","slug":"大数据","permalink":"https://www.codingpy.cn/categories/大数据/"}],"tags":[{"name":"大数据","slug":"大数据","permalink":"https://www.codingpy.cn/tags/大数据/"},{"name":"spark","slug":"spark","permalink":"https://www.codingpy.cn/tags/spark/"}],"author":{"name":"Yinux's Blog","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/avatar/avatar.png","url":"http://www.codingpy.cn"}},{"title":"软件合集（持续更新中ing……）","slug":"extensions_gallery","date":"2019-07-10T00:30:00.000Z","updated":"2019-09-20T14:19:52.435Z","comments":true,"path":"2019/07/10/extensions_gallery/","link":"","permalink":"https://www.codingpy.cn/2019/07/10/extensions_gallery/","excerpt":"各种软件资源，这里统统都有！","text":"各种软件资源，这里统统都有！ #一、Adobe全家桶 1、Photoshop cc 2018 链接: https://pan.baidu.com/s/1S08r_Q-xkgYZTyfhqj91ww 提取码: aim2 2、Premiere Pro cc 2017 链接: https://pan.baidu.com/s/1vhFAEGwlaf8dS_xSX4BXxA 提取码: uxmy 3、Illustrator CC 2018 链接: https://pan.baidu.com/s/1nxUtGFpqeQtw61_yVExhSA 提取码: 9pgx 4、Adobe Effects CC 2018 链接: https://pan.baidu.com/s/1SwcSkVP_yKzvZGZ3OTF-dA提取码: 626s 5、Dreamweaver 链接: https://pan.baidu.com/s/1csLtkNUSiOC2kOXTEtIm1Q 提取码: t56s 6、Adobe破解软件 链接: https://pan.baidu.com/s/1ZVQiBzcMf0M_0smakdSsUg 提取码: frjc #二、office全家桶 1、Office 2010-专业增强版-个体零售版-64 位和 32 位-中文简体 链接: https://pan.baidu.com/s/1D5tdwbKwRofmUz1UDozwDQ 提取码: w3ai 2、Office 2013-专业增强版-个体零售版-64 位和 32 位-中文简体 链接: https://pan.baidu.com/s/1oTmgGpTGvyjL8hn0v6mpnA 提取码: daur 3、Office 2016-专业增强版-个体零售版-64 位和 32 位-中文简体 链接: https://pan.baidu.com/s/1SZh_z4zubo_4UjfsXk7BLw 提取码: uny3 4、Office 2019 ![]https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/img/software/OFFICE2019.jpg) 链接: https://pan.baidu.com/s/1bTNJ5ONrceqmFvx6lT4O0Q 提取码: 3yqs #三、IDE ##1、C&amp;C++ IDE: ###① C-Free 链接: https://pan.baidu.com/s/1GBcivRrNHEYEOtsBaEjGqA 提取码: 5b2e ###② vc6.0(兼容win10) 链接: https://pan.baidu.com/s/1ng-HgcVprOtX5P4M5h7WUw 提取码: 8sqs ###③ codeblocks(ACM推荐IDE) 链接: https://pan.baidu.com/s/1ya1Ly7qKI-O4DiNStAsHzQ 提取码: 9425 ###④ Dev C++（蓝桥杯官方指定IDE） 链接: https://pan.baidu.com/s/1ydxrV5WLR505tNknK8YfcQ 提取码: fjvz ###⑤ eclipse cpp版 链接: https://pan.baidu.com/s/1HUZ8w2Jci6g88gVIs6iWNQ 提取码: q7ig ##2、Java IDE ###① IDEA 链接: https://pan.baidu.com/s/1bT41wqMWATNO4si1hbKS1g 提取码: ptmp ###② Eclipse 链接: https://pan.baidu.com/s/1CPdHdYLBkdYcF8PPN463mA 提取码: ksyh ###③ MyEclipse 链接: https://pan.baidu.com/s/1ZhwAtmklLJGVoVzdPMH_mg 提取码: 8dph ##3、Python IDE ###① pycharm-professional 链接: https://pan.baidu.com/s/1O9W_qlMkch5H2hJKDaFwDg 提取码: c67v ###② Anaconda3 链接: https://pan.baidu.com/s/1v85y2SFWlbBd-UqlQQjI_A 提取码: aa9e ##4、Hbuilder 链接: https://pan.baidu.com/s/1IzTeJoP8eTkOJRWf5KnVFw 提取码: e4yn #四、思维导图XMind 链接:https://pan.baidu.com/s/1VawY6QZtJA6vNwVnBDy5hg 提取码: h4ay #五、百度网盘不限速 链接: https://pan.baidu.com/s/1gVUx0UfogSfE6Fc45vs-xw 提取码: z6hx","categories":[{"name":"软件资源","slug":"软件资源","permalink":"https://www.codingpy.cn/categories/软件资源/"}],"tags":[{"name":"软件","slug":"软件","permalink":"https://www.codingpy.cn/tags/软件/"},{"name":"持续更新","slug":"持续更新","permalink":"https://www.codingpy.cn/tags/持续更新/"}],"author":{"name":"Yinux's Blog","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/avatar/avatar.png","url":"http://www.codingpy.cn"}},{"title":"Hello Stranger","slug":"hello-world","date":"2019-07-04T00:30:00.000Z","updated":"2019-09-20T14:20:45.640Z","comments":true,"path":"2019/07/04/hello-world/","link":"","permalink":"https://www.codingpy.cn/2019/07/04/hello-world/","excerpt":"Welcome to Yinxu’s Blog! This is your very first post. Check documentation for more info.","text":"Welcome to Yinxu’s Blog! This is your very first post. Check documentation for more info. Hi,it's Yinux's Blog.Nice to meet you!","categories":[],"tags":[],"author":{"name":"Yinux's Blog","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@master/avatar/avatar.png","url":"http://www.codingpy.cn"}}]}