{"meta":{"title":"YINUXY | 理想的生活就是生活的理想","subtitle":"WELCOME TO YINUXY'S BLOG","description":"不怕念起 就怕觉迟 理可顿悟 事需渐修","author":"YINUXY","url":"https://blog.yinuxy.com","root":"/"},"pages":[{"title":"404 Not Found","date":"2019-10-25T15:58:53.541Z","updated":"2019-10-25T15:58:53.541Z","comments":true,"path":"404.html","permalink":"https://blog.yinuxy.com/404.html","excerpt":"","text":"404 Not Found***很抱歉，您访问的页面不存在*** ***可能是输入地址有误或该地址已被删除***"},{"title":"所有分类","date":"2020-02-27T05:49:58.279Z","updated":"2019-07-14T07:04:48.616Z","comments":true,"path":"categories/index.html","permalink":"https://blog.yinuxy.com/categories/index.html","excerpt":"","text":""},{"title":"所有文章","date":"2020-02-27T05:49:21.301Z","updated":"2019-07-14T03:04:00.716Z","comments":true,"path":"archives/index.html","permalink":"https://blog.yinuxy.com/archives/index.html","excerpt":"","text":""},{"title":"留言簿","date":"2020-04-06T02:31:33.340Z","updated":"2020-04-06T02:31:33.340Z","comments":true,"path":"comments/index.html","permalink":"https://blog.yinuxy.com/comments/index.html","excerpt":"","text":"留言簿采用 Valine 评论系统，请尽情灌水吧！ 热烈庆祝中华人民共和国成立七十周年 祝祖国母亲七十华诞生日快乐！ 采用 Gitalk 评论系统，需使用 GitHub 账号登录，请尽情灌水吧！ 采用 Valine 评论系统，请尽情灌水吧！"},{"title":"所有标签","date":"2020-02-27T05:50:07.623Z","updated":"2019-07-14T07:25:45.967Z","comments":true,"path":"tags/index.html","permalink":"https://blog.yinuxy.com/tags/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-07-14T14:56:23.771Z","updated":"2020-07-14T14:56:23.771Z","comments":true,"path":"friends/index.html","permalink":"https://blog.yinuxy.com/friends/index.html","excerpt":"","text":"海内存知己，天涯若比邻！相见即是缘分，欢迎各位大佬留言互换友链！互换友链前请先添加本站点为友链！必须要有名称、头像链接、至少一个标签或者一个简介哦～一段时间内无法访问贵站将会被分组到【404 NOT FOUND】，请及时恢复站点！ 名字：YINUXY’S BLOG 主页：https://blog.yinuxy.com/ 头像：https://q1.qlogo.cn/g?b=qq&amp;nk=1154418252&amp;s=0 标签：Python,全栈 简介：理想的生活就是生活的理想 卡片颜色：#EBE5D9 文字颜色：#646560 可以选自己喜欢的颜色，如果不清楚怎么配色好看可以浏览十六进制颜色表选择配色哦"},{"title":"","date":"2020-07-14T08:01:59.884Z","updated":"2020-03-21T01:57:22.854Z","comments":true,"path":"about/index.html","permalink":"https://blog.yinuxy.com/about/index.html","excerpt":"","text":"YINUXY'S BLOG | ABOUT document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; 您的浏览器不支持audio标签，无法播放音乐！ 江湖名称：YINUXY 常驻之地：中国 | 湖北 | 武汉 初度之辰：1999 兴趣爱好：算法 | 前端 | Python 技能 | Skill C/C++ 90% JAVA 45% PYTHON 90% HTML/CSS/JS 55% R 45% ALGORITHM 50% 简介 | Introduction ● 学历：在校本科信息工程大三学生； ● 现况：大数据方向-数据分析学徒； ● 目标：大数据分析师 or 算法工程师； ● 博客：记录学习，记录生活； ● 兴趣： 旅行 学习 交友 ● 其他：虽然很菜，但是在努力学习中！ 联系我 | Contact me Copyright © 2020 YINUXY'S BLOG. All rights reserved. if ('addEventListener' in window) { window.addEventListener('load', function () { document.body.className = document.body.className.replace(/\\bis-loading\\b/, ''); }); document.body.className += (navigator.userAgent.match(/(MSIE|rv:11\\.0)/) ? ' is-ie' : ''); } uniform mat4 uProjection; uniform mat4 uModelview; uniform vec3 uResolution; uniform vec3 uOffset; uniform vec3 uDOF; //x:focus distance, y:focus radius, z:max radius uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start attribute vec3 aPosition; attribute vec3 aEuler; attribute vec2 aMisc; //x:size, y:fade varying vec3 pposition; varying float psize; varying float palpha; varying float pdist; //varying mat3 rotMat; varying vec3 normX; varying vec3 normY; varying vec3 normZ; varying vec3 normal; varying float diffuse; varying float specular; varying float rstop; varying float distancefade; void main(void) { // Projection is based on vertical angle vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0); gl_Position = uProjection * pos; gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5; pposition = pos.xyz; psize = aMisc.x; pdist = length(pos.xyz); palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z); vec3 elrsn = sin(aEuler); vec3 elrcs = cos(aEuler); mat3 rotx = mat3( 1.0, 0.0, 0.0, 0.0, elrcs.x, elrsn.x, 0.0, -elrsn.x, elrcs.x ); mat3 roty = mat3( elrcs.y, 0.0, -elrsn.y, 0.0, 1.0, 0.0, elrsn.y, 0.0, elrcs.y ); mat3 rotz = mat3( elrcs.z, elrsn.z, 0.0, -elrsn.z, elrcs.z, 0.0, 0.0, 0.0, 1.0 ); mat3 rotmat = rotx * roty * rotz; normal = rotmat[2]; mat3 trrotm = mat3( rotmat[0][0], rotmat[1][0], rotmat[2][0], rotmat[0][1], rotmat[1][1], rotmat[2][1], rotmat[0][2], rotmat[1][2], rotmat[2][2] ); normX = trrotm[0]; normY = trrotm[1]; normZ = trrotm[2]; const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237); float tmpdfs = dot(lit, normal); if(tmpdfs < 0.0) { normal = -normal; tmpdfs = dot(lit, normal); } diffuse = 0.4 + tmpdfs; vec3 eyev = normalize(-pos.xyz); if(dot(eyev, normal) > 0.0) { vec3 hv = normalize(eyev + lit); specular = pow(max(dot(hv, normal), 0.0), 20.0); } else { specular = 0.0; } rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0); rstop = pow(rstop, 0.5); //-0.69315 = ln(0.5) distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y)); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform vec3 uDOF; //x:focus distance, y:focus radius, z:max radius uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start const vec3 fadeCol = vec3(0.08, 0.03, 0.06); varying vec3 pposition; varying float psize; varying float palpha; varying float pdist; //varying mat3 rotMat; varying vec3 normX; varying vec3 normY; varying vec3 normZ; varying vec3 normal; varying float diffuse; varying float specular; varying float rstop; varying float distancefade; float ellipse(vec2 p, vec2 o, vec2 r) { vec2 lp = (p - o) / r; return length(lp) - 1.0; } void main(void) { vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0; vec3 d = vec3(0.0, 0.0, -1.0); float nd = normZ.z; //dot(-normZ, d); if(abs(nd) < 0.0001) discard; float np = dot(normZ, p); vec3 tp = p + d * np / nd; vec2 coord = vec2(dot(normX, tp), dot(normY, tp)); //angle = 15 degree const float flwrsn = 0.258819045102521; const float flwrcs = 0.965925826289068; mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs); vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm; float r; if(flwrp.x < 0.0) { r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5); } else { r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5); } if(r > rstop) discard; vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r); float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35)); col *= vec3(1.0, grady, grady); col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3)); col = col * diffuse + specular; col = mix(fadeCol, col, distancefade); float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0; alpha = smoothstep(0.0, 1.0, alpha) * palpha; gl_FragColor = vec4(col * 0.5, alpha); } uniform vec3 uResolution; attribute vec2 aPosition; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_Position = vec4(aPosition, 0.0, 1.0); texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5); screenCoord = aPosition.xy * vec2(uResolution.z, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform vec2 uTimes; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec3 col; float c; vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0); c = exp(-pow(length(tmpv) * 1.8, 2.0)); col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c); gl_FragColor = vec4(col * 0.5, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 col = texture2D(uSrc, texCoord); gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; uniform vec4 uBlurDir; //dir(x, y), stride(z, w) varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 col = texture2D(uSrc, texCoord); col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta); col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta); col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta); col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta); gl_FragColor = col / 5.0; } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_FragColor = texture2D(uSrc, texCoord); } uniform vec3 uResolution; attribute vec2 aPosition; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_Position = vec4(aPosition, 0.0, 1.0); texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5); screenCoord = aPosition.xy * vec2(uResolution.z, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform sampler2D uBloom; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 srccol = texture2D(uSrc, texCoord) * 2.0; vec4 bloomcol = texture2D(uBloom, texCoord); vec4 col; col = srccol + bloomcol * (vec4(1.0) + srccol); col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5); col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2) gl_FragColor = vec4(col.rgb, 1.0); gl_FragColor.a = 1.0; } window.imageLazyLoadSetting = { isSPA: false, processImages: null, }; window.addEventListener(\"load\",function(){var t=/\\.(gif|jpg|jpeg|tiff|png)$/i,r=/^data:image\\/[a-z]+;base64,/;Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")).forEach(function(a){var e=a.parentNode;\"A\"===e.tagName&&(e.href.match(t)||e.href.match(r))&&(e.href=a.dataset.original)})});!function(n){n.imageLazyLoadSetting.processImages=o;var i=n.imageLazyLoadSetting.isSPA,r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\"));function o(){i&&(r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")));for(var t,e,a=0;a"},{"title":"","date":"2020-02-27T05:50:15.558Z","updated":"2019-07-14T05:44:58.898Z","comments":true,"path":"mylist/index.html","permalink":"https://blog.yinuxy.com/mylist/index.html","excerpt":"","text":""},{"title":"analytics","date":"2020-03-10T05:46:15.464Z","updated":"2020-03-10T05:46:15.464Z","comments":true,"path":"analytics/index.html","permalink":"https://blog.yinuxy.com/analytics/index.html","excerpt":"","text":""},{"title":"","date":"2020-03-05T16:15:16.036Z","updated":"2020-03-05T16:15:16.036Z","comments":true,"path":"box/about/index.html","permalink":"https://blog.yinuxy.com/box/about/index.html","excerpt":"","text":"关于本页丨YINUXY'S BLOG 关于本页 本页面收集了比较常用或者实用的网站，相当于一个小小的导航页面。 整个页面由 Viggo 开发，完全开源，如果你也喜欢，欢迎去其 Github 点亮 star。 关于 Viggo Designer. Viggo. Full-time UI designer with an enduring interest in Coding. 一个全职的用户界面设计师，优秀的前端开发工程师，擅长 WEB 开发、WEB 设计、UI/UX 设计，对编程，拍照和单车有着持久的兴趣，生活在广州；如果您想招收此方面的人才，Viggo 无疑是一个很好的选择。 关于 YINUXY YINUXY 在校本科信息工程大三学生，主攻 Python、爬虫和大数据。 一条整日梦想成为大佬的咸鱼，倾向于 Python、网络爬虫、数据分析、数据可视化、全栈攻城狮的学习，热爱编程。 格言：悟已往之不谏，知来者之可追 window.imageLazyLoadSetting = { isSPA: false, processImages: null, }; window.addEventListener(\"load\",function(){var t=/\\.(gif|jpg|jpeg|tiff|png)$/i,r=/^data:image\\/[a-z]+;base64,/;Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")).forEach(function(a){var e=a.parentNode;\"A\"===e.tagName&&(e.href.match(t)||e.href.match(r))&&(e.href=a.dataset.original)})});!function(n){n.imageLazyLoadSetting.processImages=o;var i=n.imageLazyLoadSetting.isSPA,r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\"));function o(){i&&(r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")));for(var t,e,a=0;a"},{"title":"","date":"2019-10-26T05:01:30.134Z","updated":"2019-10-26T05:01:30.134Z","comments":true,"path":"games/PacMan/index.html","permalink":"https://blog.yinuxy.com/games/PacMan/index.html","excerpt":"","text":"吃豆人 | YINUXY'S BLOG body{background-color: #000} *{padding:0;margin:0;} .wrapper{ width: 960px; margin:0 auto; line-height:36px; text-align:center; color:#999; } canvas{display:block;background: #000;} .mod-botton{ height: 32px; padding: 15px 0; text-align: center; } #footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;text-align:center}#footer address{display:inline-block;padding:2px 10px;color:rgba(255, 255, 255, 0.5);font-style:normal} #footer a{color:rgba(255, 255, 255, 0.5);cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; 不支持画布 【按空格键开始、暂停或继续游戏，方向键移动吃豆人】 Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 window.imageLazyLoadSetting = { isSPA: false, processImages: null, }; window.addEventListener(\"load\",function(){var t=/\\.(gif|jpg|jpeg|tiff|png)$/i,r=/^data:image\\/[a-z]+;base64,/;Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")).forEach(function(a){var e=a.parentNode;\"A\"===e.tagName&&(e.href.match(t)||e.href.match(r))&&(e.href=a.dataset.original)})});!function(n){n.imageLazyLoadSetting.processImages=o;var i=n.imageLazyLoadSetting.isSPA,r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\"));function o(){i&&(r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")));for(var t,e,a=0;a"},{"title":"","date":"2019-10-26T04:58:56.361Z","updated":"2019-10-26T04:58:56.361Z","comments":true,"path":"games/cat/index.html","permalink":"https://blog.yinuxy.com/games/cat/index.html","excerpt":"","text":"圈小猫 | YINUXY'S BLOG body {background-color: #eeeeee} #catch-the-cat {width: 100%;text-align: center;} #footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;text-align:center}#footer address{display:inline-block;padding:2px 10px;color:rgba(0,0,0,.5);font-style:normal} #footer a{color:rgba(0,0,0,.5);cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; 游戏：《圈小猫》 window.game = new CatchTheCatGame({ w: 11, h: 11, r: 20, backgroundColor: 0xffffff, parent: 'catch-the-cat', statusBarAlign: 'center', credit: 'blog.yinuxy.com' }); Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 window.imageLazyLoadSetting = { isSPA: false, processImages: null, }; window.addEventListener(\"load\",function(){var t=/\\.(gif|jpg|jpeg|tiff|png)$/i,r=/^data:image\\/[a-z]+;base64,/;Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")).forEach(function(a){var e=a.parentNode;\"A\"===e.tagName&&(e.href.match(t)||e.href.match(r))&&(e.href=a.dataset.original)})});!function(n){n.imageLazyLoadSetting.processImages=o;var i=n.imageLazyLoadSetting.isSPA,r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\"));function o(){i&&(r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")));for(var t,e,a=0;a"},{"title":"","date":"2019-10-26T05:00:24.404Z","updated":"2019-10-26T05:00:24.404Z","comments":true,"path":"games/element/index.html","permalink":"https://blog.yinuxy.com/games/element/index.html","excerpt":"","text":"3D元素周期表 | YINUXY'S BLOG html, body { height: 100%; } body { background-color: #000000; margin: 0; font-family: Helvetica, sans-serif;; overflow: hidden; } a { color: #ffffff; } #info { position: absolute; width: 100%; color: #ffffff; padding: 5px; font-family: Monospace; font-size: 13px; font-weight: bold; text-align: center; z-index: 1; } #menu { position: absolute; bottom: 20px; width: 100%; text-align: center; font-family: verdana,Tahoma,Arial,Hei,\"Microsoft Yahei\",SimHei; } .element { width: 120px; height: 160px; box-shadow: 0px 0px 12px rgba(0,255,255,0.5); border: 1px solid rgba(127,255,255,0.25); text-align: center; cursor: default; } .element:hover { box-shadow: 0px 0px 12px rgba(0,255,255,0.75); border: 1px solid rgba(127,255,255,0.75); } .element .number { position: absolute; top: 20px; right: 20px; font-size: 12px; color: rgba(127,255,255,0.75); } .element .symbol { position: absolute; top: 40px; left: 0px; right: 0px; font-size: 60px; font-weight: bold; color: rgba(255,255,255,0.75); text-shadow: 0 0 10px rgba(0,255,255,0.95); } .element .details { position: absolute; bottom: 15px; left: 0px; right: 0px; font-size: 12px; color: rgba(127,255,255,0.75); } button { color: rgba(127,255,255,0.75); background: transparent; outline: 1px solid rgba(127,255,255,0.75); border: 0px; padding: 5px 10px; cursor: pointer; } button:hover { background-color: rgba(0,255,255,0.5); } button:active { color: #000000; background-color: rgba(0,255,255,0.75); } 表面 球体 螺旋 网格 var table = [ \"H\", \"Hydrogen\", \"1.00794\", 1, 1, \"He\", \"Helium\", \"4.002602\", 18, 1, \"Li\", \"Lithium\", \"#6.941\", 1, 2, \"Be\", \"Beryllium\", \"9.012182\", 2, 2, \"B\", \"Boron\", \"#10.811\", 13, 2, \"C\", \"Carbon\", \"#12.0107\", 14, 2, \"N\", \"Nitrogen\", \"#14.0067\", 15, 2, \"O\", \"Oxygen\", \"#15.9994\", 16, 2, \"F\", \"Fluorine\", \"18.9984032\", 17, 2, \"Ne\", \"Neon\", \"#20.1797\", 18, 2, \"Na\", \"Sodium\", \"22.98976...\", 1, 3, \"Mg\", \"Magnesium\", \"#24.305\", 2, 3, \"Al\", \"Aluminium\", \"26.9815386\", 13, 3, \"Si\", \"Silicon\", \"#28.0855\", 14, 3, \"P\", \"Phosphorus\", \"30.973762\", 15, 3, \"S\", \"Sulfur\", \"#32.065\", 16, 3, \"Cl\", \"Chlorine\", \"#35.453\", 17, 3, \"Ar\", \"Argon\", \"#39.948\", 18, 3, \"K\", \"Potassium\", \"#39.948\", 1, 4, \"Ca\", \"Calcium\", \"#40.078\", 2, 4, \"Sc\", \"Scandium\", \"44.955912\", 3, 4, \"Ti\", \"Titanium\", \"#47.867\", 4, 4, \"V\", \"Vanadium\", \"#50.9415\", 5, 4, \"Cr\", \"Chromium\", \"#51.9961\", 6, 4, \"Mn\", \"Manganese\", \"54.938045\", 7, 4, \"Fe\", \"Iron\", \"#55.845\", 8, 4, \"Co\", \"Cobalt\", \"58.933195\", 9, 4, \"Ni\", \"Nickel\", \"#58.6934\", 10, 4, \"Cu\", \"Copper\", \"#63.546\", 11, 4, \"Zn\", \"Zinc\", \"#65.38\", 12, 4, \"Ga\", \"Gallium\", \"#69.723\", 13, 4, \"Ge\", \"Germanium\", \"#72.63\", 14, 4, \"As\", \"Arsenic\", \"#74.9216\", 15, 4, \"Se\", \"Selenium\", \"#78.96\", 16, 4, \"Br\", \"Bromine\", \"#79.904\", 17, 4, \"Kr\", \"Krypton\", \"#83.798\", 18, 4, \"Rb\", \"Rubidium\", \"#85.4678\", 1, 5, \"Sr\", \"Strontium\", \"#87.62\", 2, 5, \"Y\", \"Yttrium\", \"88.90585\", 3, 5, \"Zr\", \"Zirconium\", \"#91.224\", 4, 5, \"Nb\", \"Niobium\", \"92.90628\", 5, 5, \"Mo\", \"Molybdenum\", \"#95.96\", 6, 5, \"Tc\", \"Technetium\", \"(98)\", 7, 5, \"Ru\", \"Ruthenium\", \"#101.07\", 8, 5, \"Rh\", \"Rhodium\", \"#102.9055\", 9, 5, \"Pd\", \"Palladium\", \"#106.42\", 10, 5, \"Ag\", \"Silver\", \"#107.8682\", 11, 5, \"Cd\", \"Cadmium\", \"#112.411\", 12, 5, \"In\", \"Indium\", \"#114.818\", 13, 5, \"Sn\", \"Tin\", \"#118.71\", 14, 5, \"Sb\", \"Antimony\", \"#121.76\", 15, 5, \"Te\", \"Tellurium\", \"127.6\", 16, 5, \"I\", \"Iodine\", \"126.90447\", 17, 5, \"Xe\", \"Xenon\", \"#131.293\", 18, 5, \"Cs\", \"Caesium\", \"#132.9054\", 1, 6, \"Ba\", \"Barium\", \"#132.9054\", 2, 6, \"La\", \"Lanthanum\", \"138.90547\", 4, 9, \"Ce\", \"Cerium\", \"#140.116\", 5, 9, \"Pr\", \"Praseodymium\", \"140.90765\", 6, 9, \"Nd\", \"Neodymium\", \"#144.242\", 7, 9, \"Pm\", \"Promethium\", \"(145)\", 8, 9, \"Sm\", \"Samarium\", \"#150.36\", 9, 9, \"Eu\", \"Europium\", \"#151.964\", 10, 9, \"Gd\", \"Gadolinium\", \"#157.25\", 11, 9, \"Tb\", \"Terbium\", \"158.92535\", 12, 9, \"Dy\", \"Dysprosium\", \"162.5\", 13, 9, \"Ho\", \"Holmium\", \"164.93032\", 14, 9, \"Er\", \"Erbium\", \"#167.259\", 15, 9, \"Tm\", \"Thulium\", \"168.93421\", 16, 9, \"Yb\", \"Ytterbium\", \"#173.054\", 17, 9, \"Lu\", \"Lutetium\", \"#174.9668\", 18, 9, \"Hf\", \"Hafnium\", \"#178.49\", 4, 6, \"Ta\", \"Tantalum\", \"180.94788\", 5, 6, \"W\", \"Tungsten\", \"#183.84\", 6, 6, \"Re\", \"Rhenium\", \"#186.207\", 7, 6, \"Os\", \"Osmium\", \"#190.23\", 8, 6, \"Ir\", \"Iridium\", \"#192.217\", 9, 6, \"Pt\", \"Platinum\", \"#195.084\", 10, 6, \"Au\", \"Gold\", \"196.966569\", 11, 6, \"Hg\", \"Mercury\", \"#200.59\", 12, 6, \"Tl\", \"Thallium\", \"#204.3833\", 13, 6, \"Pb\", \"Lead\", \"207.2\", 14, 6, \"Bi\", \"Bismuth\", \"#208.9804\", 15, 6, \"Po\", \"Polonium\", \"(209)\", 16, 6, \"At\", \"Astatine\", \"(210)\", 17, 6, \"Rn\", \"Radon\", \"(222)\", 18, 6, \"Fr\", \"Francium\", \"(223)\", 1, 7, \"Ra\", \"Radium\", \"(226)\", 2, 7, \"Ac\", \"Actinium\", \"(227)\", 4, 10, \"Th\", \"Thorium\", \"232.03806\", 5, 10, \"Pa\", \"Protactinium\", \"#231.0588\", 6, 10, \"U\", \"Uranium\", \"238.02891\", 7, 10, \"Np\", \"Neptunium\", \"(237)\", 8, 10, \"Pu\", \"Plutonium\", \"(244)\", 9, 10, \"Am\", \"Americium\", \"(243)\", 10, 10, \"Cm\", \"Curium\", \"(247)\", 11, 10, \"Bk\", \"Berkelium\", \"(247)\", 12, 10, \"Cf\", \"Californium\", \"(251)\", 13, 10, \"Es\", \"Einstenium\", \"(252)\", 14, 10, \"Fm\", \"Fermium\", \"(257)\", 15, 10, \"Md\", \"Mendelevium\", \"(258)\", 16, 10, \"No\", \"Nobelium\", \"(259)\", 17, 10, \"Lr\", \"Lawrencium\", \"(262)\", 18, 10, \"Rf\", \"Rutherfordium\", \"(267)\", 4, 7, \"Db\", \"Dubnium\", \"(268)\", 5, 7, \"Sg\", \"Seaborgium\", \"(271)\", 6, 7, \"Bh\", \"Bohrium\", \"(272)\", 7, 7, \"Hs\", \"Hassium\", \"(270)\", 8, 7, \"Mt\", \"Meitnerium\", \"(276)\", 9, 7, \"Ds\", \"Darmstadium\", \"(281)\", 10, 7, \"Rg\", \"Roentgenium\", \"(280)\", 11, 7, \"Cn\", \"Copernicium\", \"(285)\", 12, 7, \"Uut\", \"Unutrium\", \"(284)\", 13, 7, \"Fl\", \"Flerovium\", \"(289)\", 14, 7, \"Uup\", \"Ununpentium\", \"(288)\", 15, 7, \"Lv\", \"Livermorium\", \"(293)\", 16, 7, \"Uus\", \"Ununseptium\", \"(294)\", 17, 7, \"Uuo\", \"Ununoctium\", \"(294)\", 18, 7 ]; var camera, scene, renderer; var controls; var objects = []; var targets = { table: [], sphere: [], helix: [], grid: [] }; init(); animate(); function init() { camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 10000 ); camera.position.z = 3000; scene = new THREE.Scene(); // table for ( var i = 0; i < table.length; i += 5 ) { var element = document.createElement( 'div' ); element.className = 'element'; element.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')'; var number = document.createElement( 'div' ); number.className = 'number'; number.textContent = (i/5) + 1; element.appendChild( number ); var symbol = document.createElement( 'div' ); symbol.className = 'symbol'; symbol.textContent = table[ i ]; element.appendChild( symbol ); var details = document.createElement( 'div' ); details.className = 'details'; details.innerHTML = table[ i + 1 ] + '' + table[ i + 2 ]; element.appendChild( details ); var object = new THREE.CSS3DObject( element ); object.position.x = Math.random() * 4000 - 2000; object.position.y = Math.random() * 4000 - 2000; object.position.z = Math.random() * 4000 - 2000; scene.add( object ); objects.push( object ); // var object = new THREE.Object3D(); object.position.x = ( table[ i + 3 ] * 140 ) - 1330; object.position.y = - ( table[ i + 4 ] * 180 ) + 990; targets.table.push( object ); } // sphere var vector = new THREE.Vector3(); for ( var i = 0, l = objects.length; i < l; i ++ ) { var phi = Math.acos( -1 + ( 2 * i ) / l ); var theta = Math.sqrt( l * Math.PI ) * phi; var object = new THREE.Object3D(); object.position.x = 800 * Math.cos( theta ) * Math.sin( phi ); object.position.y = 800 * Math.sin( theta ) * Math.sin( phi ); object.position.z = 800 * Math.cos( phi ); vector.copy( object.position ).multiplyScalar( 2 ); object.lookAt( vector ); targets.sphere.push( object ); } // helix var vector = new THREE.Vector3(); for ( var i = 0, l = objects.length; i < l; i ++ ) { var phi = i * 0.175 + Math.PI; var object = new THREE.Object3D(); object.position.x = 900 * Math.sin( phi ); object.position.y = - ( i * 8 ) + 450; object.position.z = 900 * Math.cos( phi ); vector.x = object.position.x * 2; vector.y = object.position.y; vector.z = object.position.z * 2; object.lookAt( vector ); targets.helix.push( object ); } // grid for ( var i = 0; i < objects.length; i ++ ) { var object = new THREE.Object3D(); object.position.x = ( ( i % 5 ) * 400 ) - 800; object.position.y = ( - ( Math.floor( i / 5 ) % 5 ) * 400 ) + 800; object.position.z = ( Math.floor( i / 25 ) ) * 1000 - 2000; targets.grid.push( object ); } // renderer = new THREE.CSS3DRenderer(); renderer.setSize( window.innerWidth, window.innerHeight ); renderer.domElement.style.position = 'absolute'; document.getElementById( 'container' ).appendChild( renderer.domElement ); // controls = new THREE.TrackballControls( camera, renderer.domElement ); controls.rotateSpeed = 0.5; controls.minDistance = 500; controls.maxDistance = 6000; controls.addEventListener( 'change', render ); var button = document.getElementById( 'table' ); button.addEventListener( 'click', function ( event ) { transform( targets.table, 2000 ); }, false ); var button = document.getElementById( 'sphere' ); button.addEventListener( 'click', function ( event ) { transform( targets.sphere, 2000 ); }, false ); var button = document.getElementById( 'helix' ); button.addEventListener( 'click', function ( event ) { transform( targets.helix, 2000 ); }, false ); var button = document.getElementById( 'grid' ); button.addEventListener( 'click', function ( event ) { transform( targets.grid, 2000 ); }, false ); transform( targets.table, 5000 ); // window.addEventListener( 'resize', onWindowResize, false ); } function transform( targets, duration ) { TWEEN.removeAll(); for ( var i = 0; i < objects.length; i ++ ) { var object = objects[ i ]; var target = targets[ i ]; new TWEEN.Tween( object.position ) .to( { x: target.position.x, y: target.position.y, z: target.position.z }, Math.random() * duration + duration ) .easing( TWEEN.Easing.Exponential.InOut ) .start(); new TWEEN.Tween( object.rotation ) .to( { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, Math.random() * duration + duration ) .easing( TWEEN.Easing.Exponential.InOut ) .start(); } new TWEEN.Tween( this ) .to( {}, duration * 2 ) .onUpdate( render ) .start(); } function onWindowResize() { camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize( window.innerWidth, window.innerHeight ); render(); } function animate() { requestAnimationFrame( animate ); TWEEN.update(); controls.update(); } function render() { renderer.render( scene, camera ); } window.imageLazyLoadSetting = { isSPA: false, processImages: null, }; window.addEventListener(\"load\",function(){var t=/\\.(gif|jpg|jpeg|tiff|png)$/i,r=/^data:image\\/[a-z]+;base64,/;Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")).forEach(function(a){var e=a.parentNode;\"A\"===e.tagName&&(e.href.match(t)||e.href.match(r))&&(e.href=a.dataset.original)})});!function(n){n.imageLazyLoadSetting.processImages=o;var i=n.imageLazyLoadSetting.isSPA,r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\"));function o(){i&&(r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")));for(var t,e,a=0;a"},{"title":"","date":"2019-10-26T05:01:40.767Z","updated":"2019-10-26T05:01:40.767Z","comments":true,"path":"games/piano/index.html","permalink":"https://blog.yinuxy.com/games/piano/index.html","excerpt":"","text":"网页版钢琴 | YINUXY'S BLOG 网页版钢琴 qaz sx dc rfv gb hn jm ik, w e t y u 弹奏方法 使用鼠标左键点击钢琴键，或者键入钢琴键上输入的键盘字母。 Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 window.imageLazyLoadSetting = { isSPA: false, processImages: null, }; window.addEventListener(\"load\",function(){var t=/\\.(gif|jpg|jpeg|tiff|png)$/i,r=/^data:image\\/[a-z]+;base64,/;Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")).forEach(function(a){var e=a.parentNode;\"A\"===e.tagName&&(e.href.match(t)||e.href.match(r))&&(e.href=a.dataset.original)})});!function(n){n.imageLazyLoadSetting.processImages=o;var i=n.imageLazyLoadSetting.isSPA,r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\"));function o(){i&&(r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")));for(var t,e,a=0;a"},{"title":"","date":"2019-10-26T05:00:43.726Z","updated":"2019-10-26T05:00:43.726Z","comments":true,"path":"games/gobang/index.html","permalink":"https://blog.yinuxy.com/games/gobang/index.html","excerpt":"","text":"五子棋 | YINUXY'S BLOG canvas { display: block; margin: 60px auto; box-shadow: -2px -2px 2px #efefef, 5px 5px 5px #b9b9b9; cursor: pointer; } .btn-wrap { display: flex; flex-direction: row; justify-content: center; } .btn-wrap div { margin: 0 10px; } div>span { display: inline-block; padding: 10px 20px; color: #fff; background-color: #6496ED; border-radius: 5px; cursor: pointer; } div.unable span { background: #D6D6D4; color: #adacaa; } #result-wrap { text-align: center; margin:50px 0 0 0; } #footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;text-align:center}#footer address{display:inline-block;padding:2px 10px;color:rgba(0,0,0,.5);font-style:normal} #footer a{color:rgba(0,0,0,.5);cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; 人机五子棋对弈 重新开始 悔棋 撤销悔棋 var over = false; var me = true; //我 var _nowi = 0, _nowj = 0; //记录自己下棋的坐标 var _compi = 0, _compj = 0; //记录计算机当前下棋的坐标 var _myWin = [], _compWin = []; //记录我，计算机赢的情况 var backAble = false, returnAble = false; var resultTxt = document.getElementById('result-wrap'); var chressBord = []; //棋盘 for (var i = 0; i < 15; i++) { chressBord[i] = []; for (var j = 0; j < 15; j++) { chressBord[i][j] = 0; } } //赢法的统计数组 var myWin = []; var computerWin = []; //赢法数组 var wins = []; for (var i = 0; i < 15; i++) { wins[i] = []; for (var j = 0; j < 15; j++) { wins[i][j] = []; } } var count = 0; //赢法总数 //横线赢法 for (var i = 0; i < 15; i++) { for (var j = 0; j < 11; j++) { for (var k = 0; k < 5; k++) { wins[i][j + k][count] = true; } count++; } } //竖线赢法 for (var i = 0; i < 15; i++) { for (var j = 0; j < 11; j++) { for (var k = 0; k < 5; k++) { wins[j + k][i][count] = true; } count++; } } //正斜线赢法 for (var i = 0; i < 11; i++) { for (var j = 0; j < 11; j++) { for (var k = 0; k < 5; k++) { wins[i + k][j + k][count] = true; } count++; } } //反斜线赢法 for (var i = 0; i < 11; i++) { for (var j = 14; j > 3; j--) { for (var k = 0; k < 5; k++) { wins[i + k][j - k][count] = true; } count++; } } // debugger; for (var i = 0; i < count; i++) { myWin[i] = 0; _myWin[i] = 0; computerWin[i] = 0; _compWin[i] = 0; } var chess = document.getElementById(\"chess\"); var context = chess.getContext('2d'); context.strokeStyle = '#bfbfbf'; //边框颜色 var backbtn = document.getElementById(\"goback\"); var returnbtn = document.getElementById(\"return\"); window.onload = function () { drawChessBoard(); // 画棋盘 } document.getElementById(\"restart\").onclick = function () { window.location.reload(); } // 我，下棋 chess.onclick = function (e) { if (over) { return; } if (!me) { return; } // 悔棋功能可用 backbtn.className = backbtn.className.replace(new RegExp(\"(\\\\s|^)unable(\\\\s|$)\"), \" \"); var x = e.offsetX; var y = e.offsetY; var i = Math.floor(x / 30); var j = Math.floor(y / 30); _nowi = i; _nowj = j; if (chressBord[i][j] == 0) { oneStep(i, j, me); chressBord[i][j] = 1; //我，已占位置 for (var k = 0; k < count; k++) { // 将可能赢的情况都加1 if (wins[i][j][k]) { // debugger; myWin[k]++; _compWin[k] = computerWin[k]; computerWin[k] = 6; //这个位置对方不可能赢了 if (myWin[k] == 5) { // window.alert('你赢了'); resultTxt.innerHTML = '恭喜，你赢了！'; over = true; } } } if (!over) { me = !me; computerAI(); } } } // 悔棋 backbtn.onclick = function (e) { if (!backAble) { return; } over = false; me = true; // resultTxt.innerHTML = 'emmmm，悔棋中'; // 撤销悔棋功能可用 returnbtn.className = returnbtn.className.replace(new RegExp(\"(\\\\s|^)unable(\\\\s|$)\"), \" \"); // 我，悔棋 chressBord[_nowi][_nowj] = 0; //我，已占位置 还原 minusStep(_nowi, _nowj); //销毁棋子 for (var k = 0; k < count; k++) { // 将可能赢的情况都减1 if (wins[_nowi][_nowj][k]) { myWin[k]--; computerWin[k] = _compWin[k]; //这个位置对方可能赢 } }// 计算机相应的悔棋 chressBord[_compi][_compj] = 0; //计算机，已占位置 还原 minusStep(_compi, _compj); //销毁棋子 for (var k = 0; k < count; k++) { // 将可能赢的情况都减1 if (wins[_compi][_compj][k]) { computerWin[k]--; myWin[k] = _myWin[i]; //这个位置对方可能赢 } } resultTxt.innerHTML = '--人机五子棋--'; returnAble = true; backAble = false; } // 撤销悔棋 returnbtn.onclick = function (e) { if (!returnAble) { return; } // 我，撤销悔棋 chressBord[_nowi][_nowj] = 1; //我，已占位置 oneStep(_nowi, _nowj, me); for (var k = 0; k < count; k++) { if (wins[_nowi][_nowj][k]) { myWin[k]++; _compWin[k] = computerWin[k]; computerWin[k] = 6; //这个位置对方不可能赢 } if (myWin[k] == 5) { resultTxt.innerHTML = '恭喜，你赢了！'; over = true; } }// 计算机撤销相应的悔棋 chressBord[_compi][_compj] = 2; //计算机，已占位置 oneStep(_compi, _compj, false); for (var k = 0; k < count; k++) { // 将可能赢的情况都减1 if (wins[_compi][_compj][k]) { computerWin[k]++; _myWin[k] = myWin[k]; myWin[k] = 6; //这个位置对方不可能赢 } if (computerWin[k] == 5) { resultTxt.innerHTML = '很遗憾，计算机赢了，继续加油哦！'; over = true; } } returnbtn.className += ' ' + 'unable'; returnAble = false; backAble = true; } // 计算机下棋 var computerAI = function () { var myScore = []; var computerScore = []; var max = 0; var u = 0, v = 0; for (var i = 0; i < 15; i++) { myScore[i] = []; computerScore[i] = []; for (var j = 0; j < 15; j++) { myScore[i][j] = 0; computerScore[i][j] = 0; } } for (var i = 0; i < 15; i++) { for (var j = 0; j < 15; j++) { if (chressBord[i][j] == 0) { for (var k = 0; k < count; k++) { if (wins[i][j][k]) { if (myWin[k] == 1) { myScore[i][j] += 200; } else if (myWin[k] == 2) { myScore[i][j] += 400; } else if (myWin[k] == 3) { myScore[i][j] += 2000; } else if (myWin[k] == 4) { myScore[i][j] += 10000; } if (computerWin[k] == 1) { computerScore[i][j] += 220; } else if (computerWin[k] == 2) { computerScore[i][j] += 420; } else if (computerWin[k] == 3) { computerScore[i][j] += 2100; } else if (computerWin[k] == 4) { computerScore[i][j] += 20000; } } } if (myScore[i][j] > max) { max = myScore[i][j]; u = i; v = j; } else if (myScore[i][j] == max) { if (computerScore[i][j] > computerScore[u][v]) { u = i; v = j; } } if (computerScore[i][j] > max) { max = computerScore[i][j]; u = i; v = j; } else if (computerScore[i][j] == max) { if (myScore[i][j] > myScore[u][v]) { u = i; v = j; } } } } } _compi = u; _compj = v; oneStep(u, v, false); chressBord[u][v] = 2;//计算机占据位置 for (var k = 0; k < count; k++) { if (wins[u][v][k]) { computerWin[k]++; _myWin[k] = myWin[k]; myWin[k] = 6; //这个位置对方不可能赢了 if (computerWin[k] == 5) { resultTxt.innerHTML = '很遗憾，计算机赢了，继续加油哦！'; over = true; } } } if (!over) { me = !me; } backAble = true; returnAble = false; var hasClass = new RegExp('unable').test(' ' + returnbtn.className + ' '); if (!hasClass) { returnbtn.className += ' ' + 'unable'; } } //绘画棋盘 var drawChessBoard = function () { for (var i = 0; i < 15; i++) { context.moveTo(15 + i * 30, 15); context.lineTo(15 + i * 30, 435); context.stroke(); context.moveTo(15, 15 + i * 30); context.lineTo(435, 15 + i * 30); context.stroke(); } } //画棋子 var oneStep = function (i, j, me) { context.beginPath(); context.arc(15 + i * 30, 15 + j * 30, 13, 0, 2 * Math.PI); // 画圆 context.closePath(); //渐变 var gradient = context.createRadialGradient(15 + i * 30 + 2, 15 + j * 30 - 2, 13, 15 + i * 30 + 2, 15 + j * 30 - 2, 0); if (me) { gradient.addColorStop(0, '#0a0a0a'); gradient.addColorStop(1, '#636766'); } else { gradient.addColorStop(0, '#d1d1d1'); gradient.addColorStop(1, '#f9f9f9'); } context.fillStyle = gradient; context.fill(); } //销毁棋子 var minusStep = function (i, j) { //擦除该圆 context.clearRect((i) * 30, (j) * 30, 30, 30); // 重画该圆周围的格子 context.beginPath(); context.moveTo(15 + i * 30, j * 30); context.lineTo(15 + i * 30, j * 30 + 30); context.moveTo(i * 30, j * 30 + 15); context.lineTo((i + 1) * 30, j * 30 + 15); context.stroke(); } Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 window.imageLazyLoadSetting = { isSPA: false, processImages: null, }; window.addEventListener(\"load\",function(){var t=/\\.(gif|jpg|jpeg|tiff|png)$/i,r=/^data:image\\/[a-z]+;base64,/;Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")).forEach(function(a){var e=a.parentNode;\"A\"===e.tagName&&(e.href.match(t)||e.href.match(r))&&(e.href=a.dataset.original)})});!function(n){n.imageLazyLoadSetting.processImages=o;var i=n.imageLazyLoadSetting.isSPA,r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\"));function o(){i&&(r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")));for(var t,e,a=0;a"},{"title":"","date":"2020-03-05T16:13:17.967Z","updated":"2019-10-26T04:57:46.803Z","comments":true,"path":"games/2048/index.html","permalink":"https://blog.yinuxy.com/games/2048/index.html","excerpt":"","text":"2048 | YINUX'S BLOG document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; document.onkeydown = function(ev){ var e = ev || event; if(e.keyCode == 40){ return false; } } 2048 使用方向键操作 New Game score:0 GAME OVER Copyright&nbsp;©&nbsp;2018-2019&nbsp;Yinux's Blog&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 站点地图&nbsp;|&nbsp; &nbsp;|&nbsp; RSS订阅&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 window.imageLazyLoadSetting = { isSPA: false, processImages: null, }; window.addEventListener(\"load\",function(){var t=/\\.(gif|jpg|jpeg|tiff|png)$/i,r=/^data:image\\/[a-z]+;base64,/;Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")).forEach(function(a){var e=a.parentNode;\"A\"===e.tagName&&(e.href.match(t)||e.href.match(r))&&(e.href=a.dataset.original)})});!function(n){n.imageLazyLoadSetting.processImages=o;var i=n.imageLazyLoadSetting.isSPA,r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\"));function o(){i&&(r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")));for(var t,e,a=0;a"},{"title":"","date":"2020-03-05T16:14:32.895Z","updated":"2020-03-05T16:14:32.895Z","comments":true,"path":"box/index.html","permalink":"https://blog.yinuxy.com/box/index.html","excerpt":"","text":"导航丨YINUXY'S BLOG 开发社区 代码托管 语言文档 技能训练 在线平台 HOT 高校平台 游戏编程 Pythoner 文档资料 博客收藏 学习资源 组织社区 爬虫相关 HOT 学习教程 在线视频 博客论坛 学习平台 常用工具 站长工具 HOT IT工具箱 文件处理 HOT 设计素材 效率软件 HOT 服务平台 云服务商 众包平台 站内游戏 HOT 更多导航 关于本页 隐藏/显示侧边栏 博客首页 友情链接 评论留言 关于博主 (function(a,h,g,f,e,d,c,b){b=function(){d=h.createElement(g);c=h.getElementsByTagName(g)[0];d.src=e;d.charset=\"utf-8\";d.async=1;c.parentNode.insertBefore(d,c)};a[\"SeniverseWeatherWidgetObject\"]=f;a[f]||(a[f]=function(){(a[f].q=a[f].q||[]).push(arguments)});a[f].l=+new Date();if(a.attachEvent){a.attachEvent(\"onload\",b)}else{a.addEventListener(\"load\",b,false)}}(window,document,\"script\",\"SeniverseWeatherWidget\",\"//cdn.sencdn.com/widget2/static/js/bundle.js?t=\"+parseInt((new Date().getTime() / 100000000).toString(),10))); window.SeniverseWeatherWidget('show', { flavor: \"slim\", location: \"WX4FBXXFKE4F\", geolocation: true, language: \"auto\", unit: \"c\", theme: \"auto\", token: \"a39cd5a0-4024-4cb2-85c6-0250317058db\", hover: \"enabled\", container: \"tp-weather-widget\" }) 开发社区 Stack Overflow 全球最受程序员欢迎的开发社区 CSDN 全球最大中文IT社区，为IT专业技术人员提供最全面的信息传播和服务平台 博客园 代码改变世界 V2EX V2EX = way to explore 掘金 一个帮助开发者成长的社区 SegmentFault 改变并提升人们获取知识的方式和效率，帮助更多的开发者获得成长与成功 开源中国 国内最大的开源技术社区 ITeye ITeye软件开发交流社区 - Java编程 Spring框架 Ajax技术 agile敏捷软件开发 ruby on rails实践 51CTO 技术成就梦想 ITPUB 全球最大的学习分享平台 知乎 国内最受欢迎的知识性问答社区 简书 创作你的创作 云+社区 来自腾讯的开发者技术分享社区 云栖社区 阿里云面向开发者的开放型技术平台 代码托管 Github 全球最大的面向开源及私有软件项目的托管平台 Gitlab 支持无限的公有项目和私有项目的代码托管平台 Bitbucket 同时支持 Git 和 Mercurial 这两个版本控制软件，免费的私有仓库，支持5人以内的合作开发 SourceForge 又称 SF.net，是开源软件开发者进行开发管理的集中式场所 Coding 国内首个一站式云端软件服务平台 Gitee 国内最大的开源社区 OSChina 的代码托管平台 阿里云代码托管 阿里云旗下代码托管平台 百度效率云 百度云旗下的 Git 代码托管平台 语言文档 Zeal 脱机文档浏览器，包含196种语言API文档，支持Windows、Linux和macOS Dash 适用于Mac OS平台的软件编程文档管理工具,可以浏览API文档,以及管理代码片段工具。自带了丰富的API文档,涉及各种主流的编程语言和框架 DevDocs 在快速，有条理和可搜索的界面中结合了多个API文档，可以在移动设备上离线运行，并且可以安装在Chrome上 C/C++ C/C++ API 文档 C# C# API 文档 Java Java API 文档 .NET .NET API 文档 PHP PHP API 文档 JavaScript JavaScript API 文档 Python Python API 文档 Android Android API 文档 iOS iOS API 文档 SQL SQL API 文档 Swift Swift API 文档 Ruby Ruby API 文档 GO GO API 文档 R R API 文档 MATLAB MATLAB API 文档 Node.js Node.js API 文档 HTML HTML API 文档 CSS CSS API 文档 Redis Redis API 文档 MongoDB MongoDB API 文档 Django Django API 文档 在线平台 LeetCode 全球极客挚爱的技术成长平台 Topcoder 全世界规模最大的程序竞赛网站，也会有一些算法竞赛，适合一些高端的或者搞ACM的，也会举办一些比赛 Codeforces 俄罗斯最大的算法比赛网站 Hihocoder 技术团队来自原北京大学POJ (PKU Online Judge)开发团队，收集了全球范围内很多地区、高校举办的比赛试题， 提供365天*24小时的在线提交、评判程序的服务 LintCode 被称作中文版的leetcode，也是可以做为编程能力提升的一个中转站 SPOJ 波兰的算法刷题网站 NEUQ OJ 一个在线的判题平台 洛谷 创办于2013年，致力于为参加noip、noi、acm的选手提供清爽、快捷的编程体验 牛客网 中国最大的IT题库 C语言网 在这里可以参加包括ACM、NOI在内的各种C/C++/java程序比赛，也可以DIY举办各类程序比赛活动！ 计蒜客 计蒜客OI题库致力于为参加noi、noip、信息学竞赛的选手提供优秀的Online Judge系统 高校平台 POJ 北京大学程序在线评测系统 FDU OJ 复旦大学程序在线评测系统 TJ OJ 同济大学程序在线评测系统 USTC OJ 中国科学技术大学程序在线评测系统 ZOJ 浙江大学程序在线评测系统 HDU OJ 杭州电子科技大学程序在线评测系统 CSU-ACM 中南大学程序在线评测系统 HOJX 哈尔滨工业大学程序在线评测系统 HRBUST OJ 哈尔滨理工大学程序在线评测系统 PowerOJ 西南科技大学程序在线评测系统 SCU OJ 四川大学程序在线评测系统 FZU CoidngOJ 福州大学程序在线评测系统 NBUT OJ 宁波工程学院程序在线评测系统 Lutece 电子科技大学程序在线评测系统 武汉大学 ACM 协会 武汉大学 ACM 协会 ZJUT OJ 浙江工业大学程序在线评测系统 游戏编程 CheckiO 面向初学者和高级程序员的编码游戏，使用Python和JavaScript解决棘手的挑战和有趣的任务，从而提高您的编码技能 Coding Games 支持包括PHP、C、JavaScript在内的20多种编程语言。用户界面功能强大，可以定制 Codewars 一个外国的在线练习编程的网站,做题的过程类似打怪,做题升级,而且可以看到别人的解法,里面有很多巧妙的写法可以学习 CodeCombat 一个面向学生的游戏和CS学习平台。这是一个社区项目，有数百玩家自愿提供支持。支持语言包括Java、JS、Python、Lua、CoffeeScript Screeps 在游戏中学习JavaScript。世界上第一款针对程序员的MMO沙盒游戏 VIM Adventures 玩游戏的时候学VIM Cyber-Dojo 一个提供给程序员们练习写程序的地方。支持语言包括JavaScript、Java、Python、PHP、Ruby和很多其他语言 Elevator Saga 电梯编程游戏，跟随关卡解决所有挑站，使用语言为JavaScript Ruby Quiz 一个Ruby程序员提供的每周编程挑战项目 hacker.org 这项挑战由一系列本设计来强化你黑客技巧的解密、诡计、测试、烧脑环节组成。想要通关本系列，你必须学会解密、编码、渗透 Ruby Warrior 玩游戏学Ruby，通过Ruby脚本来控制一个Warrior通过每一关，每一关的代码难度都会有所增加，使玩家逐渐了解Ruby基本的函数、控制、变量、数组等语言特性的用法 文档资料 Python 官方文档 Python 官方文档 Python 标准库 Python 标准库 Python Requests Python Requests 文档 Python Urllib Python Urllib 文档 Python Selenium Python Selenium 中文翻译文档 正则表达式 Python 正则表达式官方文档 Beautiful Soup Beautiful Soup 文档 Scrapy Scrapy 爬虫框架官方文档 PySpider PySpider 爬虫框架官方文档 Matplotlib Matplotlib 2D绘图库 官方中文文档 Numpy Numpy 科学计算 官方中文文档 Pandas Pandas 结构化数据分析 官方中文文档 博客收藏 廖雪峰 廖雪峰的官方网站 - 研究互联网产品和技术，提供原创中文精品教程 崔庆才 崔庆才的个人博客,专注PHP,Python,爬虫,深度学习,机器学习,数据分析 莫烦Python 专注Python、机器学习、深度学习 唐松 专注Python网络爬虫, 数据科学, 数据挖掘, 数据分析 捕蛇者说 编程、程序员、Python FxxkPython 学习python的正确姿势 wistbean Python 大佬 Piglei Python 大佬 TendCode Python 大佬 追梦人物的博客 Python Django 大佬 the5fire 《Django企业开发实战》作者，关注Python、Django、Vim、Linux、Web开发 小明明S À DOMICILE 《Python Web开发实战》作者，Python 大佬 Python之禅 Python 大佬 Python 知识圈 Python知识圈 - 实用的Python教程网站 Python 教程网 小詹学Python，专注Python学习 烂笔头 j_hao104 Python大佬 咸鱼日常 专注Python爬虫，有许多JS逆向文章 AnSheng Python 全栈大佬 夏溪辰 云栖社区特邀爬虫工程师，Python大佬 高级农民工 Python大佬 云爬虫技术研究笔记 Lateautumn4lin 爬虫开发工程师，多年反爬虫破解经验，沉迷数据分析和黑客增长，CSDN博客专家，华为云享专家 云爬虫技术研究笔记(CSDN) Lateautumn4lin 爬虫开发工程师，多年反爬虫破解经验，沉迷数据分析和黑客增长，CSDN博客专家，华为云享专家 Jack Cui CSDN博客专家，Python 大佬 学习资源 Python爬虫人工智能学习教程 Python爬虫人工智能学习教程分享 Python 中文学习大本营 Python 中文学习大本营 Python 资源大全中文版 Python 资源大全中文版 爱湃森 各种 Python 教程 组织社区 PyChina Python 中国社区 PyCon China 中国 Python 开发者大会 蠎周刊 蠎周刊 - 汇集全球蠎事儿 爬虫相关 镀金的天空 GlidedSky 镀金的天空，在线爬虫练习题库 夜幕爬虫安全论坛 一个专注于爬虫与 PC/Web/ 移动端安全领域技术交流的社区，社区由夜幕团队 NightTeam 创办，旨在提升开发者对爬虫与软件安全防护的理解 西刺免费代理IP 每日更新免费HTTP代理，所有代理均为6675端口高匿代理，可隐藏IP 爬虫IP代理池 爬虫IP代理池 云打码 采用全球领先的秒传识别系统，50%图片零秒识别，人工平均处理时间0-3秒 超级鹰 专业的验证码云端识别服务,让验证码识别更快速、更准确、更强大 八爪鱼采集器 一款使用简单、功能强大的网络爬虫工具，完全可视化操作，无需编写代码，内置海量模板，支持任意网络数据抓取 Python 逆向 Python 逆向相关资源 Python 爬虫集合 Python 爬虫集合 Python 入门网络爬虫之精华版 Python 入门网络爬虫之精华版 爬虫项目进阶实战 Python3 爬虫项目进阶实战、JS加解密、逆向教程、css 加密、字体加密 Python 模拟登陆一些大型网站 Python 模拟登陆一些大型网站 系统化学习 Python 爬虫 系统化学习 Python 爬虫 Python3 网络爬虫实战 Python3 网络爬虫实战 在线视频 腾讯课堂 腾讯推出的专业在线教育平台，聚合大量优质教育机构和名师 网易云课堂 网易旗下一个专注职业技能提升的在线学习平台。立足于实用性的要求，与多家教育培训机构和行业的专家、讲师建立合作 中国大学 MOOC 中国大学MOOC(慕课)，国家精品课程在线学习平台 黑马程序员 致力于培养中级程序员，是业内以口碑闻名的IT教育培训机构 课工场 更可靠的IT就业教育平台，针对大学生量身定制人工智能、大数据、云计算、区块链、Java大数据开发等大学生IT培训课程 极客学院 极客学院作为中国专业IT职业在线教育平台,拥有海量高清IT职业课程,涵盖30+个技术领域 慕课网 慕课网（IMOOC）是IT技能学习平台。慕课网(IMOOC)提供了丰富的移动端开发、php开发、web前端、android开发以及html5等视频教程资源公开课 尚硅谷 尚硅谷Java培训，谷粉与老学员为你推荐的Java培训、Web前端培训、前端培训、大数据培训、Python培训；0基础入学，学员就业起薪屡创新高！ 实验楼 国内领先的IT在线编程及在线实训学习平台，专业导师提供精选的实践项目，创新的技术使得学习者无需配置繁琐的本地环境，随时在线流畅使用 优达学城 Udacity是来自硅谷的前沿技术平台，为广大学子提供WEB前端开发、Python/JAVA编程、IOS/Android开发、人工智能开发等一系列在线课程及实战项目，满足学员灵活的学习需求 51CTO学院 51CTO学院IT职业在线教育平台是依托12年行业品牌、1400万IT技术用户建立的专业IT技能学习培训平台，已签约1000多位技术专家发布了12万个自学式实战视频教程 CSDN 学院 CSDN 学院作为IT在线教育平台,涵盖人工智能、考试认证、移动开发、大数据技术领域职业课程 老男孩IT教育 隶属北京一天天教育科技有限公司,是一直专注于Linux培训、Linux系统及架构师培训、Python培训、网络安全培训，大数据实战的高端培训机构 千锋教育 千锋教育 - 坚持教育初心，坚持面授品质，IT培训良心品牌 博客论坛 鱼C工作室 鱼C工作室-免费编程视频教学|Python教学|Web开发教学|全栈开发教学|C语言教学|汇编教学|Win32开发|加密与解密|Linux教学 吾爱破解 致力于软件安全与病毒分析的前沿，丰富的技术版块交相辉映，由无数热衷于软件加密解密及反病毒爱好者共同维护 廖雪峰 廖雪峰的官方网站 - 研究互联网产品和技术，提供原创中文精品教程 崔庆才 崔庆才的个人博客,专注PHP,Python,爬虫,深度学习,机器学习,数据分析 莫烦Python 专注Python、机器学习、深度学习 唐松 专注Python网络爬虫, 数据科学, 数据挖掘, 数据分析 阮一峰 上海财经大学世界经济博士研究生，计算机科普博主，对自由软件有着坚定不移的信念 学习平台 菜鸟教程 提供了编程的基础技术教程, 介绍了HTML、CSS、Javascript、Python，Java，Ruby，C，PHP , MySQL等各种编程语言的基础知识 W3school 领先的 Web 技术教程 C语言网 C语言网 - 领先实用的编程在线学习网站 前端网 前端网，最好的自学web前端网站 牛客网 牛客网 - 互联网求职神器和备考学习平台 How2J How2J的Java教程, 内容涵盖J2SE、WEB前端、J2EE、框架技术等全面的Java内容 站长工具 新浪短网址 多种后缀短网址生成 百度短网址 百度旗下专业的网址缩短服务 站长工具 - 站长之家 站长工具,SEO工具,权重查询,收录查询,PR查询,ICP备案查询,whois查询,友情链接查询,反向链接查询,网站测试,IP查询,Alexa查询 阿里云 whois 查询 whois查询,域名whois,域名注册信息,whois查询工具,whois信息,域名信息 NnameBeta 国际域名搜索、域名注册、国别域名注册、域名比价 Domcomp 域名比价，Domain Name Price and Availability. 仿站工具箱 在线仿站工具箱 超级 SEO 外链工具 网站自动化宣传机器/免费的超级外链工具可批量增加外链 百度站长平台 百度搜索资源平台 - 让网站更具价值 搜狗站长平台 搜狗站长平台 - 全面掌握在搜狗搜索中的数据表现 360 站长平台 360 站长平台 - 给网站带来更多流量和展现 Google 站长平台 Google 网站站长 - 支持、学习、互动交流和 Search Console – Google Bing 网站管理员工具 Bing 网站管理员工具 百度广告联盟 百度广告联盟为您的流量增值 Google AdSense Google 广告平台 百度统计 百度统计 — 最大的中文网站分析平台 友盟+ 国内领先的第三方全域数据智能服务商 ICP/IP地址/域名信息备案管理系统 工业和信息化部ICP/IP地址/域名信息备案管理系统 全国互联网安全管理服务平台 公安备案网 - 全国互联网安全管理服务平台 IT工具箱 在线工具 - 程序员的工具箱 站长工具、代码格式化、压缩、加密、解密、下载链接转换等 在线工具 - OSCHINA.NET社区 常用文档、常用对照表、代码处理、Html/Js/Css工具、加密/转码工具等 记磊工具箱 Dns检测、CSS格式化、超级Ping、端口扫描等 孟坤工具箱 css一键美化、文本差异比较、代码高亮等 Syntax Highlight Syntax Highlight Code In Word Documents，在Word文档中插入漂亮的代码 Text to ASCII Art Generator Text to ASCII Art Generator，字符串转成 ASCII 码图案 MDEditor 开源在线 Markdown 编辑器 临时邮箱 匿名注册不常用的网站/论坛，保护隐私免骚扰 SM.MS SM 免费图床，每个文件最大支持 5MB 路过图床 免费公共图床，支持最大10MB、批量上传 Greasy Fork 安全、实用的用户脚本大全 Hello World 大全 收集了大约481种 Hello World 程序，涵盖了目前已知的所有编程语言，另加上 67 人类语言 动画展示各种路径搜索算法 动画展示各种路径搜索算法 IT eBooks 可以下载IT电子书籍的网站（英文） GEEKTyper 在线模拟黑客工作的虚拟桌面系统，提供多种黑客工作的场景 免费计算机编程类中文书籍 免费计算机编程类中文书籍 EaseUS Partition Master 磁盘分区管理软件，不用重装系统，就可以重新划分磁盘空间 文件处理 Convertio 在线文件转换工具，支持超过309种不同的文档、图像、电子表格、电子书、文档、演示文稿、音频和视频格式 Office-Converter 免费在线转换视频，在线音频转换，在线图形转换，在线文档转换和在线压缩格式 TinyPNG PNG/JPG图片在线压缩利器 Squoosh Google开源在线压缩、调整工具，支持WebP ILoveIMG 永远免费的在线图片处理工具，可在线编辑，压缩、裁剪、转换、水印等 Smallpdf Smallpdf - A Free Solution to all your PDF Problems,PDF压缩、转换、分割、合并等 PHOTOMOSH 故障艺术在线生成，可以输出jpg、gif和视频 稿定抠图 免费在线抠图软件,图片快速换背景-抠白底图 U钙网 完全免费的LOGO在线设计制作工具 SVGOMG SVG在线压缩平台 在线图片透明圆角处理 在线图片透明圆角处理 草料二维码 国内创建二维码在线应用 Logaster 在线免费创建简单logo及名片设计 Preloaders Loading 懒加载动画在线制作 Loading 制作GIF、SVG、CSS加载动画图标 waifu2x 图片智能无损放大2倍，适合动漫、插画等 智图 腾讯ISUX前端团队开发的一个专门用于图片压缩和图片格式转换的平台 音乐免费下载 全网音乐免费下载工具 OK资源采集 OK资源采集-最新影视资源大全 网易见外工作台 针对视频、图片、文档、音频都可以进行翻译转写操作，每天两小时免费使用 HiPDF 一站式解决所有PDF相关的问题 视频鱼 在线下载各大网站视频的网站 ScreenToGif 开源、轻量级却非常强大的录屏软件，快速将屏幕录制成高清GIF 设计素材 Iconfont 阿里巴巴矢量图标库，提供矢量图标下载、在线存储、格式转换等功能 Font Awesome 一个基于CSS 和 LESS 的字体和图标工具包 Flaticon 海量扁平化免费的图标库 icons8 独特系统平台风格和web图标库，下载免费图标，音乐 千图网 海量原创设计模板免费下载 昵图网 国内海量平面免费素材下载 千库网 免费 png 图片背景素材下载 Pexels 才华横溢的摄影作者在这里免费分享最精彩的素材照片和视频 必应壁纸 必应每日高清壁纸 Piqsels 精美的免版税图库 私藏字体 优质字体免费下载站 第一 PPT 网 免费 PPT 模板下载 吾道幻灯片 全新的office生产力工具，支持演示文稿、PPT模板、协同办公，可以帮助用户轻松创建具有视觉吸引力的幻灯片 Mixkit 免费、高质量、可商用的视频素材分享网站 The Stocks 对各大图片网站进行整合，免费优质图片下载 极简壁纸 高质量精品壁纸网站 NASA Image and Video Library 美国国家航天局的官方库，从此太空类的素材再也不是问题 Unsplash 质量超高的免费图片素材库，无需注册，直接下载 WordArt 文字云工具 效率软件 分流抢票 全程自动抢票,自动抢候补,自动识别验证码,多线程秒单、稳定捡漏,支持多天、多车次、多席别、多乘客等功能 PanDownload 百度网盘下载神器 Quicker 为常用操作建立捷径，PC 快捷动作面板，让效率触手可及! 万彩办公大师 免费、轻松处理文档/音视频/图片的工具 LICEcap 简洁易用的动画屏幕录制软件，它可将屏幕录像的内容直接保存为高质量（每帧颜色数量可超过256）GIF动态图片格式 Snipaste 简单但强大的截图工具，支持截图 + 贴图 FSCapture 一个强大的，轻量级的，功能齐全的屏幕捕获工具 Everything 速度最快的的文件搜索工具 DeskPins 顶置任意窗口 TrafficMonitor 一个用于显示当前网速、CPU及内存利用率的桌面悬浮窗软件 PicGo 由 electronic-vue 构建的简单而精美的图片上传工具 PowerToys 微软为 Windows 系统推出的一系列免费实用小工具合集 Dism++ 一款根据微软底层的架构结构设计的一个系统维护工具，全球第一款基于 CBS 的 Dism GUI 实现 ColorPix 屏幕取色小工具 CCleaner 一款免费的系统优化和隐私保护工具 GifCam 集录制与剪辑为一体的屏幕 GIF 动画制作工具，录制后的动画可以逐帧编辑 EV录屏 一款免费并且不添加水印的录屏工具 Fliqlo 一款极简主义的时钟屏保软件 Fences 栅栏管理桌面，使桌面更加整洁有条理 Q-dir 多窗口文件整理工具 WGestures 鼠标手势工具 XMind 一个全功能的思维导图和头脑风暴软件 速盘 免登录，自动查询提取码，极速的度盘下载工具 f.lux 国外开源的护眼软件，通过根据时间调节屏幕颜色，减少蓝光对视力的影响 云服务商 阿里云 阿里云 - 为了无法计算的价值 腾讯云 腾讯云 - 产业智变 云启未来 百度云 百度云 - 计算无限可能 华为云 华为云 - +智能，见未来 京东云 京东云 - 遇见无限可能 西部数码 西部数码 - 云服务器、虚拟主机、域名注册17年知名云计算服务提供商！ 景安云 景安云 - 专业的数据中心服务商 七牛云 七牛云 - 国内领先的企业级云服务商 又拍云 又拍云 - 加速在线业务-CDN-云存储 美橙互联 美橙互联 - 域名注册、企业建站、云服务器、企业网络推广整体解决方案服务商！ UCloud UCloud - 中立 安全 可信赖的云计算服务商 AWS AWS 云服务 - 专业的大数据和云计算服务以及云解决方案提供商 Microsoft Azure Azure. Invent with purpose. GoDaddy GoDaddy - 提供域名注册和互联网主机服务的美国公司 Cloudflare Cloudflare - 网络性能和安全公司 jsDelivr jsDelivr - A free, fast, and reliable Open Source CDN for npm and GitHub 众包平台 猿急送 专注于 IT 众包领域，职位内容大多集中于 UI 设计、产品设计、程序开发、产品运营等需求 开源众包 开源中国旗下外包网站，项目大多是团队的整包项目，适合多人组团接单 外包大师 PMCAFF旗下的一个众包开发平台，目前以技术开发为主，以众包开发和自有开发相结合形式运营 人人开发 集可视化开发，应用市场，威客众包，PaaS云于一体的企业级应用服务平台 快码 提供智能硬件、各种智能共享项目解决方案，为互联网创业者提供APP、小程序、公众号开发。 我爱方案网 专注于硬件类外包，电子方案开发供应链众包平台，软件外包，方案，硬件开发方案，硬件设计开发 英选 提供可信赖的定制开发外包服务，包括企业品牌官网、电商系统及创新定制产品开发 智筹 为企业&创业者提供互联网高级人才直租服务。按次直租，解决临时、突发问题；按月直租，建立长期兼职合作；按任务直租，解决有明确预算的外包任务 开发邦 互联网软件定制开发与软件外包开发服务，十年互联网软件定制开发经验 码市 Coding 推出的互联网软件外包服务平台，意在连接需求方与广大开发者。让项目的需求方快速的找到合适的开发者，完成项目开发工作 自由职客 自由职客是权威的IT互联网行业灵活用工交易平台，外包，众包，兼职，招聘，erp，sap 解放号 解放号众包平台提供软件开发外包、人力驻场服务等软件项目外包服务。解放号的软件项目交付全流程可视化监控与全生命周期管理能力 程序员客栈 领先的程序员自由工作平台，38万+优秀开发者，您的专属云端开发团队，BAT级别的开发者，标准化的服务和交付 码易 智网易联旗下IT软件服务平台，集软件商城、企业应用、电商软件、crm软件、商务服务平台于一体的一站式软件外包开发服务平台 电鸭社区 电鸭社区旨在推动自由工作方式在国内渐进式发展，区别于传统方式的工作职位，倡导「只工作，不上班」的工作心态 Sxsoft 中国最早的外包服务平台，18年口碑服务，20万程序员、100+专业软件开发公司，专注解决各类软件开发需求 实现网 为企业提供BAT等名企背景的、靠谱的开发设计兼职人才和自由职业者，满足企业项目外包、驻场开发、远程兼职、技术咨询等短期人力需求 智城外包网 零佣金开发资源平台，认证担保，全程无忧，专业的软件外包网和项目外包、项目开发、人力外派、短期招聘、人力资源交易平台 站内游戏 2048 网页版 2048 小游戏 圈小猫 点击圆点围住小猫 3D 元素周期表 3D 网页展示元素周期表 五子棋 网页版简易五子棋 吃豆人 躲避怪物，吃掉豆子 网页钢琴 简易网页版钢琴 更多导航 创造狮导航 创造狮，一个创意工作者的导航，专注分享正版优质设计、前端、产品、运营的书签导航，设计教程、设计规范、颜色搭配、灵感创意、前端框架、开发者工具、互联网新品推荐、运营数据分析、自媒体和工具利器好用的分类导航大全 大数据导航 大数据导航，以大数据产业为主，大数据工具为辅，给用户提供一个更加快速找到大数据相关的工具平台 优设导航 优设网站导航为设计师提供ps教程、UI设计、素材下载、高清图库、配色方案、用户体验、网页设计等全方位设计师网站导航指引 牛导航 实用工具导航 聚BT 聚BT - 聚合最优质的BT、磁力资源 ShareHub ShareHub - 资源和工具的集合 狼牌工作网址导航 工具，资源，方法，All IN ONE的办公工作网址导航 $(document).ready(function() { $(document).on('click', '.has-sub', function(){ var _this = $(this) if(!$(this).hasClass('expanded')) { setTimeout(function(){ _this.find('ul').attr(\"style\",\"\") }, 300); } else { $('.has-sub ul').each(function(id,ele){ var _that = $(this) if(_this.find('ul')[0] != ele) { setTimeout(function(){ _that.attr(\"style\",\"\") }, 300); } }) } }) $('.user-info-menu .hidden-sm').click(function(){ if($('.sidebar-menu').hasClass('collapsed')) { $('.has-sub.expanded > ul').attr(\"style\",\"\") } else { $('.has-sub.expanded > ul').show() } }) $(\"#main-menu li ul li\").click(function() { $(this).siblings('li').removeClass('active'); // 删除其他兄弟元素的样式 $(this).addClass('active'); // 添加当前元素的样式 }); $(\"a.smooth\").click(function(ev) { ev.preventDefault(); public_vars.$mainMenu.add(public_vars.$sidebarProfile).toggleClass('mobile-is-visible'); ps_destroy(); $(\"html, body\").animate({ scrollTop: $($(this).attr(\"href\")).offset().top - 30 }, { duration: 500, easing: \"swing\" }); }); return false; }); var href = \"\"; var pos = 0; $(\"a.smooth\").click(function(e) { $(\"#main-menu li\").each(function() { $(this).removeClass(\"active\"); }); $(this).parent(\"li\").addClass(\"active\"); e.preventDefault(); href = $(this).attr(\"href\"); pos = $(href).position().top - 30; }); window.imageLazyLoadSetting = { isSPA: false, processImages: null, }; window.addEventListener(\"load\",function(){var t=/\\.(gif|jpg|jpeg|tiff|png)$/i,r=/^data:image\\/[a-z]+;base64,/;Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")).forEach(function(a){var e=a.parentNode;\"A\"===e.tagName&&(e.href.match(t)||e.href.match(r))&&(e.href=a.dataset.original)})});!function(n){n.imageLazyLoadSetting.processImages=o;var i=n.imageLazyLoadSetting.isSPA,r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\"));function o(){i&&(r=Array.prototype.slice.call(document.querySelectorAll(\"img[data-original]\")));for(var t,e,a=0;a"}],"posts":[{"title":"Centos7下搭建Jupyter Notebook服务","slug":"Python/Skill/jupyterCreated","date":"2020-06-10T04:06:04.000Z","updated":"2020-07-14T13:52:12.159Z","comments":true,"path":"/post/Python/Skill/jupyterCreated/","link":"","permalink":"https://blog.yinuxy.com/post/Python/Skill/jupyterCreated/","excerpt":"Centos7下搭建Jupyter Notebook服务","text":"Centos7下搭建Jupyter Notebook服务 安装python环境安装基础依赖环境yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel下载浏览器打开 https://www.python.org/ftp/python/ 本文在此安装Python3.5.4 wget https://www.python.org/ftp/python/3.5.4/Python-3.5.4.tgz创建Python3的目录mkdir /usr/local/python3 解压下载文件并进入解压后目录tar -zxvf Python-3.5.4.tgz cd Python-3.5.4执行自定义安装./configure --prefix=/usr/local/python3 make &amp;&amp; make install创建软链接ln -s /usr/local/python3/bin/python3 /usr/bin/python3 ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3测试命令python3 -V pip3 -V安装jupyter更新pippip3 install --upgrade pip安装jupyterpip3 install jupyter生成配置文件jupyter notebook --generate-config使用systemd生成秘钥有两种方式，这里统一介绍下： 直接在命令行执行jupyter notebook password # 自己造一个密码输入一确认一次vim ~/.jupyter/jupyter_notebook_config.json 先进入python环境，执行from notebook.auth import passwd passwd() # 此时会让你两次输入密码（该密码作为客户端登录jupyter用），然后就会生成秘钥 （秘# 钥作为配置文件用） 记下密钥，sha1:03c74e2b144e:7…编辑配置文件vim ~/.jupyter/jupyter_notebook_config.py修改以下几项c.NotebookApp.ip=&#39;*&#39; # 就是设置所有ip皆可访问 c.NotebookApp.password = u&#39;sha1:03...&#39; # 刚才复制的那个密文&#39; c.NotebookApp.open_browser = False # 禁止自动打开浏览器 c.NotebookApp.port =1234 #随便指定一个端口 设置端口后要记得开放端口才能使用，具体过程可参考CentOS防火墙配置启动jupyter notebook --allow-root --ip=0.0.0.0将Jupyter远程服务设置为守护进程使用systemd 编写jupyter启动脚本,在/usr/sbin目录下新建jupyter.sh文件sudo vim /usr/sbin/jupyter.sh在jupyter.sh中写入#!/bin/sh jupyter notebook --allow-root --ip=0.0.0.0此时创建的脚本文件还没有执行权限，所以执行下面这条命令sudo chmod +x /usr/sbin/jupyter.sh 编写守护进程配置文件:守护进程的配置文件存放在/usr/lib/systemd/system/目录下，在该目录下新建jupyter.service文件sudo vim /etc/systemd/system/jupyter.service // centos sudo vim /etc/systemd/system/jupyter.service . // ubuntu打开jupyter.service文件并写入 [Unit] Description = remote jupyter After = network.target [Service] Type=simple ExecStart=/usr/sbin/jupyter.sh [Install] WantedBy=multi-user.target 启动进程:v启动进程主要用到systemctl相关命令 # 重新加载配置文件 systemctl daemon-reload # 启动进程 systemctl start jupyter.service相关命令： systemctl start ctlist # 启动 systemctl stop ctlist # 停止 systemctl restart ctlist # 重启 systemctl status ctlist # 查看状态使用 nohup 创建启动文件vim /usr/sbin/jupyter.sh 写入启动命令nohup jupyter notebook --allow-root --ip=0.0.0.0 &gt; deep.log &amp; 运行启动文件./jupyter.sh 绑定域名 提示：有宝塔面板的直接使用宝塔就行，没有的就可以使用caddy，2选1即可。 宝塔面板先进入宝塔面板，然后点击左侧网站，添加站点，再点击添加好了的域名名称，这时候就进入了站点配置，点击反向代理，目标URL填入http://127.0.0.1:8000，不要设置缓存，再启用反向代理即可。 如果要启用SSL，就需要在设置反向代理之前，直接在站点配置点击SSL，申请免费let证书，然后再启用反代即可。 Caddy绑定安装Caddy： wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh #备用地址 wget -N --no-check-certificate https://www.moerats.com/usr/shell/Caddy/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh配置Caddy： #以下全部内容是一个整体，请修改域名后一起复制到SSH运行！ #http访问，该配置不会自动签发SSL echo &quot;jupyter.yinuxy.com { gzip tls admin@yinuxy.com proxy / 127.0.0.1:1234 }&quot; &gt; /usr/local/caddy/Caddyfile #https访问，该配置会自动签发SSL，请提前解析域名到VPS服务器 echo &quot;jupyter.yinuxy.com { gzip tls admin@yinuxy.com proxy / 127.0.0.1:1234 }&quot; &gt; /usr/local/caddy/Caddyfile启动Caddy： /etc/init.d/caddy start就可以打开域名进行访问了。","categories":[{"name":"Python","slug":"Python","permalink":"https://blog.yinuxy.com/categories/Python/"}],"tags":[{"name":"Python小技巧","slug":"Python小技巧","permalink":"https://blog.yinuxy.com/tags/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.40/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"服务器宝塔面板上设置防CC的方法","slug":"Experience/vpsDeftcc","date":"2020-05-16T14:06:04.000Z","updated":"2020-07-14T13:52:12.105Z","comments":true,"path":"/post/Experience/vpsDeftcc/","link":"","permalink":"https://blog.yinuxy.com/post/Experience/vpsDeftcc/","excerpt":"服务器宝塔面板上设置防CC的方法","text":"服务器宝塔面板上设置防CC的方法 最好的防cc办法：别到处乱发自己的网站域名，不要到处求打，不要对自己的服务器有过大的信心。 宝塔防火墙设置：插件页面→全局配置→cc防御→初始规则 建议规则：个人博客：周期：1秒 频率：5次~15次 封锁时间：3600秒 增强模式：关闭 四层防御：开启 自动模式：开启 论坛：周期：1秒 频率：3次 封锁时间：360秒 增强模式：关闭 四层防御：开启 自动模式：开启 使用后，点击灰色的“全局应用”，否则对已添加站点无效，若服务器要站点个性化，仅修改站点即可。 规则说明：每个用户每秒可以访问站点*次，即为三个数字值的综合含义，正常用户1秒刷新5次几乎是不可能的事情，所以给出以下方案，对于论坛的不同方案是因为论坛访客数量大。 宝塔5.9版本的设置方法：进入Nginx→过滤器 建议规则：周期：1秒 频率：5次 封锁时间：3600秒 流量控制：网站→设置→流量限制 点击开启“启用流量控制”，限制方案依实际为准。 建议规则：个人博客：并发限制：3060 单IP限制：510 流量限制：- 最大并发连接数Nginx→性能调整→最大并发链接数 设置为60~200，主要看你服务器多少站点，学生机不建议设置过高。 并发数代表每秒钟有几个用户同时访问你的站点，有点站点日IP都无法达到60，所以无需在意调高低。单IP限制的作用在于限制这个IP同时请求两个文件，防止这个IP把别的并发占用掉，影响正常访问。 该规则还是要看实际情况。一般小站这样设置就可以了","categories":[{"name":"Linux","slug":"Linux","permalink":"https://blog.yinuxy.com/categories/Linux/"}],"tags":[{"name":"DDOS","slug":"DDOS","permalink":"https://blog.yinuxy.com/tags/DDOS/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"【HTML+CSS】CSS3实现炫酷的流光按钮效果","slug":"Experience/buttonStream","date":"2020-05-05T00:30:00.000Z","updated":"2020-05-06T12:04:51.646Z","comments":true,"path":"/post/Experience/buttonStream/","link":"","permalink":"https://blog.yinuxy.com/post/Experience/buttonStream/","excerpt":"【HTML+CSS】CSS3实现炫酷的流光按钮效果","text":"【HTML+CSS】CSS3实现炫酷的流光按钮效果 效果预览 a.button{ text-decoration: none; position: absolute; font-size: 24px; background: linear-gradient(90deg, #03a9f4, #f441a5, #ffeb3b, #03a9f4); background-size: 400%; width: 400px; height: 100px; line-height: 100px; text-align: center; color: #fff; text-transform: uppercase; border-radius: 50px; z-index: 1; } a.button::before{ content: \"\"; position: absolute; left: -5px; right: -5px; top: -5px; bottom: -5px; background: linear-gradient(90deg, #03a9f4, #f441a5, #ffeb3b, #03a9f4); background-size: 400%; border-radius: 50px; filter: blur(20px); z-index: -1; } a.button:hover::before{ animation: sun 8s infinite; } a.button:hover{ animation: sun 8s infinite; } @keyframes sun{ 100%{ background-position: -400% 0; } } button 代码CSSa{ text-decoration: none; position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); font-size: 24px; background: linear-gradient(90deg, #03a9f4, #f441a5, #ffeb3b, #03a9f4); background-size: 400%; width: 400px; height: 100px; line-height: 100px; text-align: center; color: #fff; text-transform: uppercase; border-radius: 50px; z-index: 1; } a::before{ content: &quot;&quot;; position: absolute; left: -5px; right: -5px; top: -5px; bottom: -5px; background: linear-gradient(90deg, #03a9f4, #f441a5, #ffeb3b, #03a9f4); background-size: 400%; border-radius: 50px; filter: blur(20px); z-index: -1; } a:hover::before{ animation: sun 8s infinite; } a:hover{ animation: sun 8s infinite; } @keyframes sun{ 100%{ background-position: -400% 0; } }HTML&lt;a href=&quot;https:blog.yinuxy.com&quot;&gt;button&lt;/a&gt;","categories":[{"name":"网站开发","slug":"网站开发","permalink":"https://blog.yinuxy.com/categories/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://blog.yinuxy.com/tags/HTML/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"“Shopee杯” E 起来编程暨武汉大学 2020 年大学生程序设计大赛（网络预选赛）解题报告","slug":"OJContest/2020whuShopee","date":"2020-04-13T00:30:00.000Z","updated":"2020-07-14T13:52:12.108Z","comments":true,"path":"/post/OJContest/2020whuShopee/","link":"","permalink":"https://blog.yinuxy.com/post/OJContest/2020whuShopee/","excerpt":"“Shopee杯” E 起来编程暨武汉大学 2020 年大学生程序设计大赛（网络预选赛）解题报告","text":"“Shopee杯” E 起来编程暨武汉大学 2020 年大学生程序设计大赛（网络预选赛）解题报告 比赛地址：“Shopee杯” e起来编程暨武汉大学2020年大学生程序设计大赛（网络预选赛）整场比赛体验极差，英语杀我（题目都看不懂还做个屁啊！！！），结束后当天晚上讲题，对照题解自己又去做了一遍。 E-Yu is a Brutal Creature题意找出$0 \\sim n$之间所有满足$(n+1)|(n^2+1)$的自然数 解题思路根据平方差公式：$n^2-1=(n+1)(n-1)$ 可知 $(n+1)|(n^2+1)$。于是可知 $(n^2+1) - (n^2-1)=2$ 也应当是 $n+1$ 的倍数。符合条件的数，只有 $0$ 和 $1$ 。所以当$n = 0$时，答案为 $0$ ，当 $n &gt; 0$ 时，答案为 $n - 1$ 。 #include &lt;bits/stdc++.h&gt; using namespace std; int main() { int T; scanf(&quot;%d&quot;, &amp;T); while (T--) { int n; scanf(&quot;%d&quot;, &amp;n); printf(&quot;%d\\n&quot;, n ? (n - 1) : n); } return 0; }B-Best Match题意给定一个数组，求有多少个数对 $a_i$ , $a_j$ , $i \\neq j$ 满足 $a_i + a_j == 0$。 解题思路记录下数组中每个权值的出现次数，记数组中权值 $i$ 的出现次数为 $cnt_i$ 。那么答案就是： $\\sum\\limits_{i=1}^{max(a)} cnt_i \\times cnt_{-i} + cnt_0 \\times (cnt_0 - 1)/2$ #include&lt;bits/stdc++.h&gt; using namespace std; int read(){ int c=0,nx,sign=1; while(!isdigit(nx = getchar())) if(nx==&#39;-&#39;) sign=-1; while(isdigit(nx)) c=c*10+nx-&#39;0&#39;,nx=getchar(); return sign*c; } const int N = 5e5 + 20; long long cnt[100]; int main(){ int n = read(); for(int i=1;i&lt;=n;i++) cnt[read() + 20]++; long long ans = cnt[20] * (cnt[20] - 1) / 2; for(int i=1;i&lt;=20;i++) if(cnt[i + 20] and cnt[20 - i]) ans += cnt[i + 20] * cnt[20 - i]; printf(&quot;%lld&quot;,ans); }A-A Monument For Heroes题意给你若干字符串，求按照首尾字母相同的方式接龙能接上多少个，且必须按照题目输入的顺序接, 也就是先出现的字符串必须接在前面。 解题思路使用 DP 实现，记 $dp[i][j]$ 表示以 $i$ 开头，$j$ 结尾的接龙的最长长度。随后依次枚举每个字符串，假设字符串 $s$ 的开头是 $c_1$ ，结尾为 $c_2$ ，那么更新所有 $dp[i][c_2]$，更新方式为 $dp[i][c_2] = max(dp[i][c_2] , dp[i][c_1]+|s|)$ 。 #include&lt;bits/stdc++.h&gt; #define inf 1&lt;&lt;29 #define maxn 1000010 typedef long long ll; using namespace std; int n,mp[210][210],ans; char str[110]; int main(){ cin&gt;&gt;n; for(int i=1;i&lt;=n;++i){ scanf(&quot;%s&quot;,str); int len=strlen(str); char s=str[0],t=str[len-1]; for(int j=&#39;a&#39;;j&lt;=&#39;z&#39;;++j){ if(mp[j][s]){ mp[j][t]=max(mp[j][t],mp[j][s]+len); } } mp[s][t]=max(mp[s][t],len); } for(int i=&#39;a&#39;;i&lt;=&#39;z&#39;;++i) ans=max(ans,mp[i][i]); cout&lt;&lt;ans&lt;&lt;endl; return 0; }D-DIY Masks at Home题意给你一个由大写字母构成的二维矩阵，你需要找到一个最大的正方形，使得这个正方形内只包含一种字母。 解题思路本题实际上有多种通过方法，下面介绍两种参考方法： （暴力哈希）将原矩阵内每一种字母都替换成一个素数，然后计算这个矩阵的二维前缀积（对大素数取模）。那么在给定二分长度 k 的前提下，我们每次可以枚举一个矩形的左上角 $(i,j)$ ，利用逆元计算出这么个矩形的积，再和这种字母的纯 $k ∗ k$ 正方形对应的哈希值比对。如果担心碰撞，只需改成双哈希就好。总复杂度为常数有点大的 $O(nmlog(n))$ 。 我们如果在原矩阵 F 的基础上预处理出一个新矩阵 $G$, 第 $i$ 行第 $j$ 列的值的意义为：这个值在这一行前面有多少个连续的数和它相同（包括自己）。随后我们对于每一列从上到下遍历，如果一个边长为 $k$，右下角位于 $(i,j)$ 的矩形存在的话，一定会满足： ${\\min\\limits_{i-k &lt; t\\leq i} {G[t][j]} \\geq k}$ 可想而知，对于我们枚举的右下角，右上角也是具备单调性的，所以我们可以采用二分 + 对每一列维护 $RMQ$ 数组的方法获得一个 $O(nmlog(n))$ 的方法。 #include&lt;bits/stdc++.h&gt; #define inf 1&lt;&lt;29 #define maxn 1000010 typedef long long ll; using namespace std; int n,mp[210][210],ans; char str[110]; int main(){ cin&gt;&gt;n; for(int i=1;i&lt;=n;++i){ scanf(&quot;%s&quot;,str); int len=strlen(str); char s=str[0],t=str[len-1]; for(int j=&#39;a&#39;;j&lt;=&#39;z&#39;;++j){ if(mp[j][s]){ mp[j][t]=max(mp[j][t],mp[j][s]+len); } } mp[s][t]=max(mp[s][t],len); } for(int i=&#39;a&#39;;i&lt;=&#39;z&#39;;++i) ans=max(ans,mp[i][i]); cout&lt;&lt;ans&lt;&lt;endl; return 0; }C-Can You Help ZSGW题意有一个排列，已知我们对于这个排列执行单调栈算法过程中，遍历到每一个位置之后单调栈的大小，有些位置缺失可以任意。求一个满足这种情况的字典序最小的排列。 解题思路首先我们应该做的事，是补全这个单调栈数组 $b$。单调栈数组由于单调栈算法的特点，必然满足这么几个特点： $b[1] = 1$ 若 $b[i] &gt; b[i − 1]$ ，则 $b[i] = b[i − 1] + 1$ ，且 $a[i] &gt; a[i − 1]$ 。 对于 $b[i] &lt;= b[i − 1]$ ，一定有 $a[i] &lt; a[i − 1]$ 。 我们从左到右依次补全每一个为 $−1$ 的格子，那么策略应该是： 若 $i = 1$ ，$b[i] = 1$ 。 否则，如果我们填一个比 $b[i − 1]$ 小的数的话，就意味着之后补全的时候 $a[i − 1] &gt; a[i]$ ，在字典序上不会是个好主意。所以应该填 $b[i − 1] + 1$ 。 补全数组之后，规律如下：首先我们可以发现所有为 $1$ 的位置组成了以 $1$ 截止的降序序列。然后对于每个被 $1$ 分割的子区间，$2$ 也会满足类似的规律。然后对于 $2$ 进一步分割的子区间 $3$ 也会如此。于是我们按照权值递增的顺序，依次填入每个数，然后分治递归填写子区间。标程的复杂度为 $O(nlog(n))$，实际上利用分治区间的单调性可以进一步优化到 $O(n)$。 #include &lt;bits/stdc++.h&gt; using namespace std; int T, n; int p[200005]; int lst[200005], tail; int pre[200005]; int nxt[200005]; int s[200005]; int main() { scanf(&quot;%d&quot;, &amp;T); for(int k = 0; k &lt; T; ++k) { scanf(&quot;%d&quot;, &amp;n); for(int i = 0; i &lt;= n; ++i) nxt[i] = pre[i] = 0; tail = 0; for(int i = 1; i &lt;= n; ++i) scanf(&quot;%d&quot;, &amp;p[i]); p[1] = 1; for(int i = 2; i &lt;= n; ++i) if(p[i] == -1) { if(p[i + 1] - p[i - 1] == 2) p[i] = p[i - 1] + 1; else p[i] = p[i - 1] + 1; } for(int i = 1; i &lt;= n; ++i) { if(p[i] &gt; p[i - 1]) { nxt[tail] = i; pre[i] = tail; tail = i; } else { int x = lst[p[i]]; nxt[pre[x]] = i; pre[i] = pre[x]; nxt[i] = x; pre[x] = i; } lst[p[i]] = i; } for(int i = 1, j = nxt[0]; i &lt;= n; ++i, j = nxt[j]) s[j] = i; for(int i = 1; i &lt;= n; ++i) printf(&quot;%d &quot;, s[i]); printf(&quot;\\n&quot;); } return 0; }","categories":[{"name":"ACM解题报告","slug":"ACM解题报告","permalink":"https://blog.yinuxy.com/categories/ACM%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"}],"tags":[],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"视频切片后自动上传至国内免费CDN，无成本加速视频播放","slug":"TechShare/videoSec","date":"2020-03-28T16:00:00.000Z","updated":"2020-07-14T13:52:12.153Z","comments":true,"path":"/post/TechShare/videoSec/","link":"","permalink":"https://blog.yinuxy.com/post/TechShare/videoSec/","excerpt":"视频切片后自动上传至国内免费CDN，无成本加速视频播放","text":"视频切片后自动上传至国内免费CDN，无成本加速视频播放 更新【2020.4.1】 由于语雀修复了上传bug，所以移除语雀cdn，默认修改为阿里云图床使用Github地址：https://github.com/MoeClub/Note/tree/master/ffmpeg 安装ffmpegwget https://www.moerats.com/usr/down/ffmpeg/ffmpeg-git-$(getconf LONG_BIT)bit-static.tar.xz tar xvf ffmpeg-git-*-static.tar.xz mv ffmpeg-git-*/ffmpeg ffmpeg-git-*/ffprobe /usr/local/bin/ rm -rf ffmpeg-git-* 安装脚本#新建/opt/ffmpeg文件夹存放脚本等文件 mkdir /opt/ffmpeg &amp;&amp; cd $_ #下载并运行脚本 wget https://raw.githubusercontent.com/MoeClub/Note/master/ffmpeg/Install.sh bash Install.sh 启动播放器由于切片生成m3u8文件后，需要播放器才能播放，而上传脚本也会自动推送m3u8文件到播放器根目录，所以这里可以配合一起用，当然自己会播放m3u8的也可以不用搭建，自行选择。安装pip3：#CenOS 6系统 rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm yum install python34 -y wget https://bootstrap.pypa.io/get-pip.py python3 get-pip.py #CenOS 7系统rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmyum install python36 -ywget https://bootstrap.pypa.io/get-pip.pypython3 get-pip.py #Debian/Ubuntu系统apt updateapt install python3-pip -y 安装依赖：#进入到播放源码文件夹cd /opt/ffmpeg/Playerpip3 install tornado 后台启动：nohup python3 Player.py&amp; 注意`Player.py`文件的`MasterKey`值需和`publish.sh`的`Token`值对应，别乱改就行。 4. 脚本用法#命令示例bash /path/to/media.sh &lt;不含特殊字符的文件名.mp4&gt; [特殊选项] #特殊选项: 数字；可选参数，默认为0#0：自动根据文件比特率计算合适的切片大小。(目标文件大小小于20M，一般情况下没问题)#1：强制重新编码，重新编码比特率为2400k。(一般用于非H264编码，文件切片，速度较慢)#2：自定义切片时间，当为2时切片时间为3秒，当大于等于3时切片时间为特殊选项数字。 使用示例：#进入视频所在目录cd /root/movies #默认模式切片bash /opt/ffmpeg/media.sh rats.mp4#强制重新编码bash /opt/ffmpeg/media.sh rats.mp4 1#极速模式, 设置2s一个切片(源文件为H264编码情况下)bash /opt/ffmpeg/media.sh rats.mp4 2 5. 播放示例#查看推送到播放器这边的m3u8所有文件http://ip:5866/Player/list #播放list显示的根目录下的rats.m3u8文件http://ip:5866/Player/rats.m3u8 ## 上传到语雀CDN ##提示：该方案可选，目前语雀默认免费10G，具体可参考官方说明。 先前往语雀官网注册一个账号→[传送门](https://www.yuque.com/)，然后获取`ctoken`和`session`的值，这里说下大概获取方法，以谷歌浏览器为例。 登录后，`F12`进入控制台选择`Network`，随便点击一个以`yuque`开头的链接文件，再选择`Cookies`即可看到所需要的2个参数。 &lt;img src=&#39;https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/17.png&#39;&gt; 然后复制`ctoken`和`session`的值。 接下来查看语雀脚本→[传送门](https://github.com/MoeClub/Note/blob/master/ffmpeg/upload_yuque.sh)，将脚本所有的内容复制替换到`upload.sh`脚本里面，并填入`ctoken`和`session`的值，保存即可，上传方法参考上面。 最后如果你是`vps`的话，就不建议强制转码，只切片就行了，不然长时间占用`cpu`的话，服务器可能会被`ban`，基本上大多数`mp4`都可以直接切片。 转载于：https://www.moerats.com/archives/1024/","categories":[],"tags":[],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"基于宝塔Docker自建Bitwarden密码管理服务","slug":"TechShare/Bitwarden","date":"2020-03-24T16:00:00.000Z","updated":"2020-07-14T13:52:12.127Z","comments":true,"path":"/post/TechShare/Bitwarden/","link":"","permalink":"https://blog.yinuxy.com/post/TechShare/Bitwarden/","excerpt":"Bitwarden是一个跨平台的密码管理软件，类似于 1Password、EnPass、LastPass 等。Bitwarden 是免费开源的，可以将服务端部署在自己的服务器上，比如群晖，并且支持 Docker 部署。但官方的&gt;镜像要求至少 2G 以上内存，要求比较高。有人用 Rust 实现了 Bitwarden 服务器，项目叫 bitwarden_rs，并且提供了 Docker 镜像，这个实现更进一步降低了对机器配置的要求，并且 Docker 镜像体积很小，部署非常方便。","text":"Bitwarden是一个跨平台的密码管理软件，类似于 1Password、EnPass、LastPass 等。Bitwarden 是免费开源的，可以将服务端部署在自己的服务器上，比如群晖，并且支持 Docker 部署。但官方的&gt;镜像要求至少 2G 以上内存，要求比较高。有人用 Rust 实现了 Bitwarden 服务器，项目叫 bitwarden_rs，并且提供了 Docker 镜像，这个实现更进一步降低了对机器配置的要求，并且 Docker 镜像体积很小，部署非常方便。 宝塔安装Docker进入到宝塔面板的软件商店，搜索docker安装即可。 获取镜像打开docker管理器，点击获取镜像，输入Bitwarden_rs的官方镜像bitwardenrs/server后点击获取镜像。 创建容器 点击创建容器按钮 填写端口映射中的容器端口：80,服务端口：6666(6666可以自定义) 填写目录映射中的服务器目录：/www/wwwroot/bitwarden.liubing.me(该目录可以自定义)，容器目录：/data 填写内存配额，根据自己服务器的配置按需填写 提交创建容器 点击容器名称，修改容器名称为Bitwarden以方便辨认 端口映射和目录映射填写完成后一定要点击+号进行添加 添加站点一般可以添加一个二级域名，按自己需要起名字即可，由于我用的cloudflare的服务，所以以这个为演示，阿里云、百度云等其他厂商添加二级域名都是差不多的。 添加一个A记录，名字为bitwarden，指向的IP为你服务器VPS的IP地址，最后的访问地址就是bitwarden.liubing.me了。 域名准备好后，在宝塔里面添加一个站点，FTP、数据库均不用创建，PHP版本选择纯静态。 网站添加完成后设置SSL，自己准备证书，或者用免费的，我用的一直是cloudflare颁发的证书。设置完毕后开启强制Https 最后添加一个反向代理，名称随意填，目标URL为http://127.0.0.1:6666，端口号和上面创建容器时服务端口保持一直。 完成自建上述步骤都做完后别忘了在宝塔面板安全-防火墙中放行端口6666。最后不出意外的话访问https://bitwarden.liubing.me就能看到界面了。首次完成安装页面是英文的，自己可以创建一个账号登录进去，在设置-选项-语言中设置语言。 其他问题一般自建的服务都是自己用的，所以如果想关闭注册的话可以按照下面的方法做： 在docker管理器中点击刚才创建的容器的状态绿色图标，停止容器运行，然后删除容器（删除容器后不会删除数据） 在VPS中运行下面的命令重新运行容器，其中Bitwarden为容器的名字，SIGNUPS_ALLOWED=false代表禁止注册，/www/wwwroot/bitwarden.liubing.me为上面创建容器时所写的服务器目录,/data为容器目录，6666:80代表上面创建容器时的服务端口:容器端口 docker run -d --name Bitwarden \\ -e SIGNUPS_ALLOWED=false \\ -v /www/wwwroot/bitwarden.liubing.me/:/data/ \\ -p 6666:80 \\ bitwardenrs/server:latestSHELL运行完成后在容器列表里就又能看到了。然后再去试下创建账号就会出现一个不能创建账号的错误提示。 其他配置参考项目的wiki即可：https://github.com/dani-garcia/bitwarden_rs/wiki 插件及App下载可以到bitwarden官网自行下载：https://bitwarden.com/#download 连接自建的服务以CHrome的插件为例子，如果之前有安装及登录过，可以在设置中退出登录。点击左上角的设置图标，填写自建服务器的URL保存后登录即可。 结语最后就可以愉快的在浏览器和手机上愉快的使用了，顺便说句：我的密码存储我做主，再也不用害怕密码忘记的事了，也可以记录些银行卡等隐私信息，随时复制。 转自：https://liubing.me/bt-docker-build-bitwarden.html 作者：LiuBing","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blog.yinuxy.com/categories/Docker/"}],"tags":[],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"使用Docker一键部署Cloudreve网盘","slug":"TechShare/CloudreveOnDocker","date":"2020-03-22T11:43:16.000Z","updated":"2020-07-14T13:52:12.131Z","comments":true,"path":"/post/TechShare/CloudreveOnDocker/","link":"","permalink":"https://blog.yinuxy.com/post/TechShare/CloudreveOnDocker/","excerpt":"使用Docker一键部署Cloudreve网盘","text":"使用Docker一键部署Cloudreve网盘 Cloudreve-Docker简介项目地址：https://github.com/littleplus/Cloudreve-Docker容器地址：https://hub.docker.com/r/littleplus/cloudreve-3.0.0-rc-1本Docker容器基于redis:5-alpine基础镜像制作，在保证程序运行稳定的前提下，实现最小空间占用以及资源消耗本Docker容器的Cloudreve版本为Cloudreve-3.0.0-RC-1，大概率镜像及Dockerfile将不会再更新 容器特点 镜像大小仅70M左右，资源消耗极低 外挂程序运行目录，可以自行更新Cloudreve版本，修改配置文件 在初次使用时，会在/etc/cloudreve目录生成cloudreve二进制文件以及配置文件 在/etc/cloudreve/cloudreve.db不存在时，由cloudreve自行生成sqlite数据库，密码可以在docker logs里面看到 快速开始默认前提：已经安装好docker并使docker服务正常运行中 git clone本项目或下载项目压缩包 运行scripts/下的start.sh脚本，保存管理员用户名及密码信息（仅在初次创建数据库时显示） 默认会将cloudreve本体、配置文件、数据库存放到/etc/cloudreve，将宿主机/data/cloudreve绑定到容器/data 在cloudreve内修改默认存储策略中的存储路径为/data/uploads/{uid}/{path} 快速开始 忘记保存初始密码了怎么办删除/etc/cloudreve/cloudreve.db文件（会丢失原有文件记录），运行scripts/的start.sh，会重新生成密码 如何升级Cloudreve备份/etc/cloudreve文件夹，将新版Cloudreve二进制程序替换/etc/cloudreve的cloudreve文件，运行docker restart cloudreve 如何修改Cloudreve基础配置修改/etc/cloudreve/cloudreve.conf，运行docker restart cloudreve重启容器生效 如何修改Cloudreve主机监听端口修改scripts/start.sh，将左边的端口号替换为需要要监听的端口，运行scripts/start.sh生效","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blog.yinuxy.com/categories/Docker/"}],"tags":[],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"十六进制颜色表","slug":"TechShare/HexColor","date":"2020-03-20T09:13:57.000Z","updated":"2020-07-14T13:52:12.141Z","comments":true,"path":"/post/TechShare/HexColor/","link":"","permalink":"https://blog.yinuxy.com/post/TechShare/HexColor/","excerpt":"十六进制颜色表","text":"十六进制颜色表 文字查找 颜 色 英文代码 形象描述 十六进制 RGB LightPink 浅粉红 #FFB6C1 255,182,193 Pink 粉红 #FFC0CB 255,192,203 Crimson 猩红 #DC143C 220,20,60 LavenderBlush 脸红的淡紫色 #FFF0F5 255,240,245 PaleVioletRed 苍白的紫罗兰红色 #DB7093 219,112,147 HotPink 热情的粉红 #FF69B4 255,105,180 DeepPink 深粉色 #FF1493 255,20,147 MediumVioletRed 适中的紫罗兰红色 #C71585 199,21,133 Orchid 兰花的紫色 #DA70D6 218,112,214 Thistle 蓟 #D8BFD8 216,191,216 plum 李子 #DDA0DD 221,160,221 Violet 紫罗兰 #EE82EE 238,130,238 Magenta 洋红 #FF00FF 255,0,255 Fuchsia 灯笼海棠(紫红色) #FF00FF 255,0,255 DarkMagenta 深洋红色 #8B008B 139,0,139 Purple 紫色 #800080 128,0,128 MediumOrchid 适中的兰花紫 #BA55D3 186,85,211 DarkVoilet 深紫罗兰色 #9400D3 148,0,211 DarkOrchid 深兰花紫 #9932CC 153,50,204 Indigo 靛青 #4B0082 75,0,130 BlueViolet 深紫罗兰的蓝色 #8A2BE2 138,43,226 MediumPurple 适中的紫色 #9370DB 147,112,219 MediumSlateBlue 适中的板岩暗蓝灰色 #7B68EE 123,104,238 SlateBlue 板岩暗蓝灰色 #6A5ACD 106,90,205 DarkSlateBlue 深岩暗蓝灰色 #483D8B 72,61,139 Lavender 熏衣草花的淡紫色 #E6E6FA 230,230,250 GhostWhite 幽灵的白色 #F8F8FF 248,248,255 Blue 纯蓝 #0000FF 0,0,255 MediumBlue 适中的蓝色 #0000CD 0,0,205 MidnightBlue 午夜的蓝色 #191970 25,25,112 DarkBlue 深蓝色 #00008B 0,0,139 Navy 海军蓝 #000080 0,0,128 RoyalBlue 皇军蓝 #4169E1 65,105,225 CornflowerBlue 矢车菊的蓝色 #6495ED 100,149,237 LightSteelBlue 淡钢蓝 #B0C4DE 176,196,222 LightSlateGray 浅石板灰 #778899 119,136,153 SlateGray 石板灰 #708090 112,128,144 DoderBlue 道奇蓝 #1E90FF 30,144,255 AliceBlue 爱丽丝蓝 #F0F8FF 240,248,255 SteelBlue 钢蓝 #4682B4 70,130,180 LightSkyBlue 淡蓝色 #87CEFA 135,206,250 SkyBlue 天蓝色 #87CEEB 135,206,235 DeepSkyBlue 深天蓝 #00BFFF 0,191,255 LightBLue 淡蓝 #ADD8E6 173,216,230 PowDerBlue 火药蓝 #B0E0E6 176,224,230 CadetBlue 军校蓝 #5F9EA0 95,158,160 Azure 蔚蓝色 #F0FFFF 240,255,255 LightCyan 淡青色 #E1FFFF 225,255,255 PaleTurquoise 苍白的绿宝石 #AFEEEE 175,238,238 Cyan 青色 #00FFFF 0,255,255 Aqua 水绿色 #00FFFF 0,255,255 DarkTurquoise 深绿宝石 #00CED1 0,206,209 DarkSlateGray 深石板灰 #2F4F4F 47,79,79 DarkCyan 深青色 #008B8B 0,139,139 Teal 水鸭色 #008080 0,128,128 MediumTurquoise 适中的绿宝石 #48D1CC 72,209,204 LightSeaGreen 浅海洋绿 #20B2AA 32,178,170 Turquoise 绿宝石 #40E0D0 64,224,208 Auqamarin 绿玉\\碧绿色 #7FFFAA 127,255,170 MediumAquamarine 适中的碧绿色 #00FA9A 0,250,154 MediumSpringGreen 适中的春天的绿色 #00FF7F 0,255,127 MintCream 薄荷奶油 #F5FFFA 245,255,250 SpringGreen 春天的绿色 #3CB371 60,179,113 SeaGreen 海洋绿 #2E8B57 46,139,87 Honeydew 蜂蜜 #F0FFF0 240,255,240 LightGreen 淡绿色 #90EE90 144,238,144 PaleGreen 苍白的绿色 #98FB98 152,251,152 DarkSeaGreen 深海洋绿 #8FBC8F 143,188,143 LimeGreen 酸橙绿 #32CD32 50,205,50 Lime 酸橙色 #00FF00 0,255,0 ForestGreen 森林绿 #228B22 34,139,34 Green 纯绿 #008000 0,128,0 DarkGreen 深绿色 #006400 0,100,0 Chartreuse 查特酒绿 #7FFF00 127,255,0 LawnGreen 草坪绿 #7CFC00 124,252,0 GreenYellow 绿黄色 #ADFF2F 173,255,47 OliveDrab 橄榄土褐色 #556B2F 85,107,47 Beige 米色(浅褐色) #F5F5DC 245,245,220 LightGoldenrodYellow 浅秋麒麟黄 #FAFAD2 250,250,210 Ivory 象牙 #FFFFF0 255,255,240 LightYellow 浅黄色 #FFFFE0 255,255,224 Yellow 纯黄 #FFFF00 255,255,0 Olive 橄榄 #808000 128,128,0 DarkKhaki 深卡其布 #BDB76B 189,183,107 LemonChiffon 柠檬薄纱 #FFFACD 255,250,205 PaleGodenrod 灰秋麒麟 #EEE8AA 238,232,170 Khaki 卡其布 #F0E68C 240,230,140 Gold 金 #FFD700 255,215,0 Cornislk 玉米色 #FFF8DC 255,248,220 GoldEnrod 秋麒麟 #DAA520 218,165,32 FloralWhite 花的白色 #FFFAF0 255,250,240 OldLace 老饰带 #FDF5E6 253,245,230 Wheat 小麦色 #F5DEB3 245,222,179 Moccasin 鹿皮鞋 #FFE4B5 255,228,181 Orange 橙色 #FFA500 255,165,0 PapayaWhip 番木瓜 #FFEFD5 255,239,213 BlanchedAlmond 漂白的杏仁 #FFEBCD 255,235,205 NavajoWhite 纳瓦霍白 #FFDEAD 255,222,173 AntiqueWhite 古代的白色 #FAEBD7 250,235,215 Tan 晒黑 #D2B48C 210,180,140 BrulyWood 结实的树 #DEB887 222,184,135 Bisque (浓汤)乳脂,番茄等 #FFE4C4 255,228,196 DarkOrange 深橙色 #FF8C00 255,140,0 Linen 亚麻布 #FAF0E6 250,240,230 Peru 秘鲁 #CD853F 205,133,63 PeachPuff 桃色 #FFDAB9 255,218,185 SandyBrown 沙棕色 #F4A460 244,164,96 Chocolate 巧克力 #D2691E 210,105,30 SaddleBrown 马鞍棕色 #8B4513 139,69,19 SeaShell 海贝壳 #FFF5EE 255,245,238 Sienna 黄土赭色 #A0522D 160,82,45 LightSalmon 浅鲜肉(鲑鱼)色 #FFA07A 255,160,122 Coral 珊瑚 #FF7F50 255,127,80 OrangeRed 橙红色 #FF4500 255,69,0 DarkSalmon 深鲜肉(鲑鱼)色 #E9967A 233,150,122 Tomato 番茄 #FF6347 255,99,71 MistyRose 薄雾玫瑰 #FFE4E1 255,228,225 Salmon 鲜肉(鲑鱼)色 #FA8072 250,128,114 Snow 雪 #FFFAFA 255,250,250 LightCoral 淡珊瑚色 #F08080 240,128,128 RosyBrown 玫瑰棕色 #BC8F8F 188,143,143 IndianRed 印度红 #CD5C5C 205,92,92 Red 纯红 #FF0000 255,0,0 Brown 棕色 #A52A2A 165,42,42 FireBrick 耐火砖 #B22222 178,34,34 DarkRed 深红色 #8B0000 139,0,0 Maroon 栗色 #800000 128,0,0 White 纯白 #FFFFFF 255,255,255 WhiteSmoke 白烟 #F5F5F5 245,245,245 Gainsboro 亮灰色 #DCDCDC 220,220,220 LightGrey 浅灰色 #D3D3D3 211,211,211 Silver 银白色 #C0C0C0 192,192,192 DarkGray 深灰色 #A9A9A9 169,169,169 Gray 灰色 #808080 128,128,128 DimGray 暗淡的灰色 #696969 105,105,105 Black 纯黑 #000000 0,0,0 颜色细分 16位进制代码 颜色效果 &nbsp; &nbsp; #FFFFFF &nbsp; #FFFFCC &nbsp; #FFFF99 &nbsp; #FFFF66 &nbsp; #FFFF33 &nbsp; #FFFF00 &nbsp; #FFCCFF &nbsp; #FFCCCC &nbsp; #FFCC99 &nbsp; #FFCC66 &nbsp; #FFCC33 &nbsp; #FFCC00 &nbsp; #FF99FF &nbsp; #FF99CC &nbsp; #FF9999 &nbsp; #FF9966 &nbsp; #FF9933 &nbsp; #FF9900 &nbsp; #FF66FF &nbsp; #FF66CC &nbsp; #FF6699 &nbsp; #FF6666 &nbsp; #FF6633 &nbsp; #FF6600 &nbsp; #FF33FF &nbsp; #FF33CC &nbsp; #FF3399 &nbsp; #FF3366 &nbsp; #FF3333 &nbsp; #FF3300 &nbsp; #FF00FF &nbsp; #FF00CC &nbsp; #FF0099 &nbsp; #FF0066 &nbsp; #FF0033 &nbsp; #FF0000 &nbsp; &nbsp; Hex Code Color #66FFFF &nbsp; #66FFCC &nbsp; #66FF99 &nbsp; #66FF66 &nbsp; #66FF33 &nbsp; #66FF00 &nbsp; #66CCFF &nbsp; #66CCCC &nbsp; #66CC99 &nbsp; #66CC66 &nbsp; #66CC33 &nbsp; #66CC00 &nbsp; #6699FF &nbsp; #6699CC &nbsp; #669999 &nbsp; #669966 &nbsp; #669933 &nbsp; #669900 &nbsp; #6666FF &nbsp; #6666CC &nbsp; #666699 &nbsp; #666666 &nbsp; #666633 &nbsp; #666600 &nbsp; #6633FF &nbsp; #6633CC &nbsp; #663399 &nbsp; #663366 &nbsp; #663333 &nbsp; #663300 &nbsp; #6600FF &nbsp; #6600CC &nbsp; #660099 &nbsp; #660066 &nbsp; #660033 &nbsp; #660000 &nbsp; &nbsp; &nbsp; 16位进制代码 颜色效果 &nbsp; &nbsp; #CCFFFF &nbsp; #CCFFCC &nbsp; #CCFF99 &nbsp; #CCFF66 &nbsp; #CCFF33 &nbsp; #CCFF00 &nbsp; #CCCCFF &nbsp; #CCCCCC &nbsp; #CCCC99 &nbsp; #CCCC66 &nbsp; #CCCC33 &nbsp; #CCCC00 &nbsp; #CC99FF &nbsp; #CC99CC &nbsp; #CC9999 &nbsp; #CC9966 &nbsp; #CC9933 &nbsp; #CC9900 &nbsp; #CC66FF &nbsp; #CC66CC &nbsp; #CC6699 &nbsp; #CC6666 &nbsp; #CC6633 &nbsp; #CC6600 &nbsp; #CC33FF &nbsp; #CC33CC &nbsp; #CC3399 &nbsp; #CC3366 &nbsp; #CC3333 &nbsp; #CC3300 &nbsp; #CC00FF &nbsp; #CC00CC &nbsp; #CC0099 &nbsp; #CC0066 &nbsp; #CC0033 &nbsp; #CC0000 &nbsp; &nbsp; Hex Code Color #33FFFF &nbsp; #33FFCC &nbsp; #33FF99 &nbsp; #33FF66 &nbsp; #33FF33 &nbsp; #33FF00 &nbsp; #33CCFF &nbsp; #33CCCC &nbsp; #33CC99 &nbsp; #33CC66 &nbsp; #33CC33 &nbsp; #33CC00 &nbsp; #3399FF &nbsp; #3399CC &nbsp; #339999 &nbsp; #339966 &nbsp; #339933 &nbsp; #339900 &nbsp; #3366FF &nbsp; #3366CC &nbsp; #336699 &nbsp; #336666 &nbsp; #336633 &nbsp; #336600 &nbsp; #3333FF &nbsp; #3333CC &nbsp; #333399 &nbsp; #333366 &nbsp; #333333 &nbsp; #333300 &nbsp; #3300FF &nbsp; #3300CC &nbsp; #330099 &nbsp; #330066 &nbsp; #330033 &nbsp; #330000 &nbsp; &nbsp; 16位进制代码 颜色效果 &nbsp; &nbsp; #99FFFF &nbsp; #99FFCC &nbsp; #99FF99 &nbsp; #99FF66 &nbsp; #99FF33 &nbsp; #99FF00 &nbsp; #99CCFF &nbsp; #99CCCC &nbsp; #99CC99 &nbsp; #99CC66 &nbsp; #99CC33 &nbsp; #99CC00 &nbsp; #9999FF &nbsp; #9999CC &nbsp; #999999 &nbsp; #999966 &nbsp; #999933 &nbsp; #999900 &nbsp; #9966FF &nbsp; #9966CC &nbsp; #996699 &nbsp; #996666 &nbsp; #996633 &nbsp; #996600 &nbsp; #9933FF &nbsp; #9933CC &nbsp; #993399 &nbsp; #993366 &nbsp; #993333 &nbsp; #993300 &nbsp; #9900FF &nbsp; #9900CC &nbsp; #990099 &nbsp; #990066 &nbsp; #990033 &nbsp; #990000 &nbsp; &nbsp; Hex Code Color #00FFFF &nbsp; #00FFCC &nbsp; #00FF99 &nbsp; #00FF66 &nbsp; #00FF33 &nbsp; #00FF00 &nbsp; #00CCFF &nbsp; #00CCCC &nbsp; #00CC99 &nbsp; #00CC66 &nbsp; #00CC33 &nbsp; #00CC00 &nbsp; #0099FF &nbsp; #0099CC &nbsp; #009999 &nbsp; #009966 &nbsp; #009933 &nbsp; #009900 &nbsp; #0066FF &nbsp; #0066CC &nbsp; #006699 &nbsp; #006666 &nbsp; #006633 &nbsp; #006600 &nbsp; #0033FF &nbsp; #0033CC &nbsp; #003399 &nbsp; #003366 &nbsp; #003333 &nbsp; #003300 &nbsp; #0000FF &nbsp; #0000CC &nbsp; #000099 &nbsp; #000066 &nbsp; #000033 &nbsp; #000000 &nbsp;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.yinuxy.com/categories/Hexo/"}],"tags":[{"name":"Hexo主题美化","slug":"Hexo主题美化","permalink":"https://blog.yinuxy.com/tags/Hexo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"}],"author":{"name":"菜鸟-传奇","avatar":"https://pic.cnblogs.com/face/1444343/20190803112901.png","url":"https://www.cnblogs.com/cainiao-chuanqi/"}},{"title":"Python读取Excel数据转化为字典并另存为josn文件","slug":"Python/Skill/Skills-1","date":"2020-03-13T04:06:04.000Z","updated":"2020-07-14T13:52:12.156Z","comments":true,"path":"/post/Python/Skill/Skills-1/","link":"","permalink":"https://blog.yinuxy.com/post/Python/Skill/Skills-1/","excerpt":"Python读取Excel数据转化为字典并另存为josn文件","text":"Python读取Excel数据转化为字典并另存为josn文件 导入Python所需要的包import pandas as pd import json 使用pandas读取Excel文件 样例数据采集于网上新冠肺炎中药处方，点击此按钮下载， 因为样例数据中有时间格式的文本，所以在读取Excel文件中加入了parse_dates读取日期格式的文本。df=pd.read_excel(filepath ,parse_dates = [&#39;发布时间&#39;]) df.head() 读取的Excel文件格式👇 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 发布医院/机构 省份 早中极恢复期 症状 发布时间 方剂组成 0 广东省中医药局 广东省 早 湿邪郁肺，枢机不利 2020-01-26 藿香10g、 厚朴10g 、法下10g、 茯苓15g、 柴胡15g、 黄芩10g、 党参10... 1 广东省中医药局 广东省 早 邪热入肺，肺湿宣讲 2020-01-26 炙麻黄8g、 杏仁10g、 生石膏30g、 甘草10g、 槟榔10g、 厚朴10g、 草果1... 2 广东省中医药局 广东省 中 热闭肺，腑气不通 2020-01-26 生麻黄 8g、杏仁12g、 生石膏30g、 生大黄10g、 瓜蒌仁30g、 桃仁 10g、赤... 3 广东省中医药局 广东省 中 湿热蕴毒，肺气闭塞 2020-01-26 生麻黄 8g、杏仁12g、 生石膏30g、 生甘草 10g、滑石30g、 茵陈20g、 黄芩... 4 广东省中医药局 广东省 极 NaN 2020-01-26 红参 10g、炮附子10g、 山萸肉30g、 麦冬20g、 三七10g 转换代码def excelToDict(path): # 创建最终返回的空字典 df_dict = {} # 读取Excel文件 # df = pd.read_excel(path) # 替换Excel表格内的空单元格，否则在下一步处理中将会报错 df.fillna(&quot;&quot;, inplace=True) df_list = [] for i in df.index.values: # loc为按列名索引 iloc 为按位置索引，使用的是 [[行号], [列名]] df_line = df.loc[i, [&#39;发布医院/机构&#39;, &#39;省份&#39;, &#39;早中极恢复期&#39;, &#39;症状&#39;,&#39;发布时间&#39;,&#39;方剂组成&#39;]].to_dict() # 将每一行转换成字典后添加到列表 df_list.append(df_line) df_dict[&#39;data&#39;] = df_list return df_list # return df_dict data = excelToDict(df) print(data) 转换后的数据👇 [{&#39;发布医院/机构&#39;: &#39;广东省中医药局&#39;, &#39;省份&#39;: &#39;广东省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;湿邪郁肺，枢机不利&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;藿香10g、 厚朴10g 、法下10g、 茯苓15g、 柴胡15g、 黄芩10g、 党参10g、 杏仁10g、 薏苡仁20g、 猪苓10g、 泽泻10g、 白蔻仁10g、 淡豆鼓10g、 通草 10g、生姜5g、 大枣5g&#39;}, {&#39;发布医院/机构&#39;: &#39;广东省中医药局&#39;, &#39;省份&#39;: &#39;广东省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;邪热入肺，肺湿宣讲&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;炙麻黄8g、 杏仁10g、 生石膏30g、 甘草10g、 槟榔10g、 厚朴10g、 草果10g、 知母10g、 白芍10g、 黄芩15g&#39;}, {&#39;发布医院/机构&#39;: &#39;广东省中医药局&#39;, &#39;省份&#39;: &#39;广东省&#39;, &#39;早中极恢复期&#39;: &#39;中&#39;, &#39;症状&#39;: &#39;热闭肺，腑气不通&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生麻黄 8g、杏仁12g、 生石膏30g、 生大黄10g、 瓜蒌仁30g、 桃仁 10g、赤芍15g、 葶苈子20g、 黄连30g、 黄芩10g、 桑白皮10g、 重楼10g、 丹皮15g、 郁金15g、 石菖蒲15g、 生地15g、玄参15g&#39;}, {&#39;发布医院/机构&#39;: &#39;广东省中医药局&#39;, &#39;省份&#39;: &#39;广东省&#39;, &#39;早中极恢复期&#39;: &#39;中&#39;, &#39;症状&#39;: &#39;湿热蕴毒，肺气闭塞&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生麻黄 8g、杏仁12g、 生石膏30g、 生甘草 10g、滑石30g、 茵陈20g、 黄芩15g、 白蔻仁10g、 藿香15g、 法夏15g、 苍术15g、 葶苈子20g、 连翘15g、 白僵蚕5g、 蝉蜕5g、 姜黄10g、 生大黄5g、 重楼10g、 丹皮 15g、赤芍15g、 郁金15g、 石菖蒲15g、 生地15g、 玄参15g&#39;}, {&#39;发布医院/机构&#39;: &#39;广东省中医药局&#39;, &#39;省份&#39;: &#39;广东省&#39;, &#39;早中极恢复期&#39;: &#39;极&#39;, &#39;症状&#39;: &#39;&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;红参 10g、炮附子10g、 山萸肉30g、 麦冬20g、 三七10g&#39;}, {&#39;发布医院/机构&#39;: &#39;广东省中医药局&#39;, &#39;省份&#39;: &#39;广东省&#39;, &#39;早中极恢复期&#39;: &#39;恢复&#39;, &#39;症状&#39;: &#39;肺脾两虚&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生晒参10g、 炒白术15g、 茯苓15g、 白扁豆30g、 砂仁6g、 莲子30g、 炙甘草6g、 桔梗10g、 山药15g、 薏苡仁30g、 炒麦芽30g、 神曲10g&#39;}, {&#39;发布医院/机构&#39;: &#39;广东省中医药局&#39;, &#39;省份&#39;: &#39;广东省&#39;, &#39;早中极恢复期&#39;: &#39;恢复&#39;, &#39;症状&#39;: &#39;气阴两伤，余邪未尽&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;西洋参20g、 石斛10g、 麦冬10g、 知母10g、 淡竹叶10g、 黄连3g、 甘草6g、 茯苓15g、 法半夏10g、 橘红10g、 陈皮10g、 炒麦芽30g&#39;}, {&#39;发布医院/机构&#39;: &#39;国家卫健委&#39;, &#39;省份&#39;: &#39;&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;寒湿郁肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-28 00:00:00&#39;), &#39;方剂组成&#39;: &#39;苍术15g、陈皮10g、厚朴10g、藿香10g、草果6g、生麻黄6g、羌活10g、生姜10g、槟郎10g&#39;}, {&#39;发布医院/机构&#39;: &#39;国家卫健委&#39;, &#39;省份&#39;: &#39;&#39;, &#39;早中极恢复期&#39;: &#39;中&#39;, &#39;症状&#39;: &#39;疫毒闭肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-28 00:00:00&#39;), &#39;方剂组成&#39;: &#39;杏仁10g、生石膏30g、瓜萎30g、生大黄6g、生炙麻黄各6g、葶苈子10g、桃仁10g、草果6g、槟郎10g、苍术10g&#39;}, {&#39;发布医院/机构&#39;: &#39;国家卫健委&#39;, &#39;省份&#39;: &#39;&#39;, &#39;早中极恢复期&#39;: &#39;重&#39;, &#39;症状&#39;: &#39;内闭外脱&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-28 00:00:00&#39;), &#39;方剂组成&#39;: &#39;人参15g，黑顺片10g，山茱萸15g， 送服苏合香丸或安宫牛黄丸&#39;}, {&#39;发布医院/机构&#39;: &#39;国家卫健委&#39;, &#39;省份&#39;: &#39;&#39;, &#39;早中极恢复期&#39;: &#39;恢复期&#39;, &#39;症状&#39;: &#39;肺脾气虚&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-28 00:00:00&#39;), &#39;方剂组成&#39;: &#39;法半夏9g、陈皮10g、党参15g、炙黄芪30g、茯苓15g、藿香10g、砂仁6g&#39;}, {&#39;发布医院/机构&#39;: &#39;宝鸡市中医医院&#39;, &#39;省份&#39;: &#39;陕西省&#39;, &#39;早中极恢复期&#39;: &#39;预防&#39;, &#39;症状&#39;: &#39;&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生黄芪 9g 炒白术 6g 防 风 3g 玄 参 6g 炙百合 30g 石 斛 10g 梨 皮 30g 桔 梗 10g 芦 根 30g 生甘草 6g&#39;}, {&#39;发布医院/机构&#39;: &#39;宝鸡市中医医院&#39;, &#39;省份&#39;: &#39;陕西省&#39;, &#39;早中极恢复期&#39;: &#39;预防&#39;, &#39;症状&#39;: &#39;&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;太子参 15g 贯 众 6g 银 花 10g 连 翘 10g 大青叶 10g 苏 叶 6g 葛 根 10g 藿 香 10g 苍 术 6g 佩 兰 10g 沙 参 20g 芦 根 10g &#39;}, {&#39;发布医院/机构&#39;: &#39;贵州省中医药管理局&#39;, &#39;省份&#39;: &#39;贵州省&#39;, &#39;早中极恢复期&#39;: &#39;预防&#39;, &#39;症状&#39;: &#39;&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-23 00:00:00&#39;), &#39;方剂组成&#39;: &#39;北沙参10g、玉竹20g、石斛20g、贯众20g、苍术10g、石菖蒲10g。&#39;}, {&#39;发布医院/机构&#39;: &#39;贵州省中医药管理局&#39;, &#39;省份&#39;: &#39;贵州省&#39;, &#39;早中极恢复期&#39;: &#39;儿童预防&#39;, &#39;症状&#39;: &#39;&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-23 00:00:00&#39;), &#39;方剂组成&#39;: &#39;板蓝根20g 贯众15g 藿香10g 薄荷10g\\n菊花15g 荆芥10g 葛根6g 芦根10g\\n甘草6g&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;麻黄9g、炙甘草6g、杏仁9g、生石膏15-30g、桂枝9g、泽泻9g、猪苓9g、白术9g、茯苓15g、柴胡16g、黄芩6g、姜半夏9g、生姜9g、紫菀9g、冬花9g、射干9g、细辛6g、山药12g、枳实6g、陈皮6g、藿香9g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;风热犯肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;金银花15g、连翘15g、防风9g、黄芩15g、牛蒡子9g、桔梗9g、芦根18g、柴胡9g、陈皮9g、生甘草6g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;寒湿郁肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生麻黄6g、生石膏15g、杏仁9g、羌活15g、葶苈子15g、贯众9g、地龙15g、徐长卿15g、藿香15g、佩兰9g、苍术15g、云苓45g、生白术30g、焦三仙各9g、厚朴15g、槟榔9g、草果9g、生姜15g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;湿热蕴肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;槟榔10g、草果10g、厚朴10g、知母10g、黄芩10g、柴胡10g、赤芍10g、连翘15g、青蒿10g、苍术10g、大青叶10g、生甘草5g。呕恶者加黄连3g、苏叶6g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;中&#39;, &#39;症状&#39;: &#39;湿毒郁肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生麻黄6g、苦杏仁15g、生石膏30g、生薏苡仁30g、苍术10g、藿香15g、青蒿12g、虎杖20g、马鞭草30g、干芦根30g、葶苈子15g、化橘红15g、生甘草10g。呕恶者加黄连3g、苏叶6g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;中&#39;, &#39;症状&#39;: &#39;寒湿阻肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;苍术15g、陈皮10g、厚朴10g、藿香10g、草果6g、生麻黄6g、羌活10g、生姜10g、槟榔10g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;重&#39;, &#39;症状&#39;: &#39;热毒闭肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生麻黄6g、杏仁9g、生石膏15g、甘草3g、藿香10g、厚朴10g、苍术15g、草果10g、法半夏9g、茯苓15g、生大黄5g、生黄芪10g、葶苈子10g、赤芍10g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;重&#39;, &#39;症状&#39;: &#39;气营两燔&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生石膏30-60g、知母30g、生地30-60g、水牛角30g、赤芍30g、玄参30g、连翘15g、丹皮15g、黄连6g、竹叶12g、葶苈子15g、生甘草6g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;危重&#39;, &#39;症状&#39;: &#39;内闭外脱&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;人参15g、黑顺片10g、山茱萸15g，送服苏合香丸或安宫牛黄丸。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;恢复&#39;, &#39;症状&#39;: &#39;气阴两虚&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;南北沙参各10g、麦冬15g、西洋参6g，五味子6g、生石膏15g、淡竹叶10g、桑叶10g、芦根15g、丹参15g、生甘草6g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;恢复&#39;, &#39;症状&#39;: &#39;肺脾气虚&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;法半夏9g、陈皮10g、党参15g、炙黄芪30g、炒白术10g、茯苓15g、藿香10g、砂仁6g、甘草6g。&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;急性期&#39;, &#39;症状&#39;: &#39;风热夹湿&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;银花30g连翘30g荆芥15g牛蒡子15g薄荷15g桔梗30g杏仁15g广藿香15g厚朴15g茯苓30g法半夏15g豆蔻15g薏苡仁30g白扁豆30g焦山楂30g建曲15g芦根30g&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;急性期&#39;, &#39;症状&#39;: &#39;风寒夹湿&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;荆芥15g防风15g川芎15g白芷15g薄荷15g桔梗30g广藿香15g紫苏叶15g厚朴15g炒白术30g法半夏15g建曲15g薏苡仁30g茯苓30g豆蔻15g杏仁15g焦山楂30g白扁豆30g芦根30g&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;急性期&#39;, &#39;症状&#39;: &#39;湿邪郁肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;蜜麻黄10g杏仁15g草果10-20g槟榔10-15g蝉蜕5-10g连翘10-30g苍术10-15g桔梗20-30g黄芩15g牛蒡子15g生甘草5-10g。&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;急性期&#39;, &#39;症状&#39;: &#39;湿热蕴肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;陈皮10-15g杏仁10-15g黄芩10-15g瓜蒌皮10-15g茯苓15-30g藿香15g厚朴10-20g青蒿20-30g芦根20-30g金银花15-30g太子参30g生甘草5-10g&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;急性期&#39;, &#39;症状&#39;: &#39;邪热壅肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;蜜麻黄10g杏仁10-15g石膏20-30g桑白皮15g金银花20-30g连翘20-30g黄芩15g浙贝母15g生甘草5-10g&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;急性期&#39;, &#39;症状&#39;: &#39;邪毒闭肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;杏仁15g生石膏20-30g瓜蒌皮15g大黄5g蜜麻黄10g葶苈子15-20g桃仁10g赤芍15g生甘草5-10g&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;急性期&#39;, &#39;症状&#39;: &#39;内闭外脱&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生晒参20-30g,炙附片30-60g，山茱萸15-20g,送服安宫牛黄丸或紫雪散&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;恢复期&#39;, &#39;症状&#39;: &#39;余邪未尽、气阴两虚&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;竹叶15g石膏15-20g太子参20-30g麦冬10-15g半夏10g白术15-20g茯苓15-20g炙甘草5-10g&#39;}, {&#39;发布医院/机构&#39;: &#39;江西中医药管理局&#39;, &#39;省份&#39;: &#39;江西省&#39;, &#39;早中极恢复期&#39;: &#39;预防&#39;, &#39;症状&#39;: &#39;&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-03 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生黄芪12g、防风\\n\\n10g、白术10g、银花10g、连翘10g、贯众6g、佩兰10g、陈皮10g、苍术10g、桔梗10g。&#39;}, {&#39;发布医院/机构&#39;: &#39;江西中医药管理局&#39;, &#39;省份&#39;: &#39;江西省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;寒湿郁肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-03 00:00:00&#39;), &#39;方剂组成&#39;: &#39;苍术15g、陈皮10g、厚朴10g、藿香10g、草果6g、生麻黄6g、羌活10g、生姜10g、槟郎10g&#39;}, {&#39;发布医院/机构&#39;: &#39;江西中医药管理局&#39;, &#39;省份&#39;: &#39;江西省&#39;, &#39;早中极恢复期&#39;: &#39;中&#39;, &#39;症状&#39;: &#39;疫毒闭肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-03 00:00:00&#39;), &#39;方剂组成&#39;: &#39;杏仁10g、生石膏30g、瓜萎30g、生大黄6g、生炙麻黄各6g、葶苈子10g、桃仁10g、草果6g、槟郎10g、苍术10g&#39;}, {&#39;发布医院/机构&#39;: &#39;江西中医药管理局&#39;, &#39;省份&#39;: &#39;江西省&#39;, &#39;早中极恢复期&#39;: &#39;重&#39;, &#39;症状&#39;: &#39;内闭外脱&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-03 00:00:00&#39;), &#39;方剂组成&#39;: &#39;人参15g、黑顺片10g、山茱萸15g，送服苏合香丸或安宫牛黄丸&#39;}, {&#39;发布医院/机构&#39;: &#39;江西中医药管理局&#39;, &#39;省份&#39;: &#39;江西省&#39;, &#39;早中极恢复期&#39;: &#39;恢复&#39;, &#39;症状&#39;: &#39;肺脾气虚&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-03 00:00:00&#39;), &#39;方剂组成&#39;: &#39;法半夏9g、陈皮10g、党参15g、炙黄芪30g、茯苓15g、藿香10g、砂仁6g&#39;}, {&#39;发布医院/机构&#39;: &#39;黑龙江省中医药管理局&#39;, &#39;省份&#39;: &#39;黑龙江省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;寒湿郁肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;藿香15g、苏叶15g、桔梗15g、枳壳15g、生麻黄6g、杏仁10g、陈皮15g、茯苓20g、白术15g、佩兰15g、苍术15g、厚朴15g、半夏15g、草果仁15g、白芷15g、黄芩10g、大青叶15g、葛根15g、甘草15g。&#39;}, {&#39;发布医院/机构&#39;: &#39;黑龙江省中医药管理局&#39;, &#39;省份&#39;: &#39;黑龙江省&#39;, &#39;早中极恢复期&#39;: &#39;中&#39;, &#39;症状&#39;: &#39;疫毒闭肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;水牛角20g、生地15g、丹参25g、玄参20g、金银花30g、连翘20g、桔梗20g、枳壳20g、川芎15g、赤芍25g、地龙20g、桃仁15g、太子参25g、炒白术20g、茯苓25g、生麻黄10g、白果20g、葶苈子20g、黄芩15g、杏仁10g、紫苏子20g、瓜蒌20g、浙贝母15g、生薏米20g、甘草15g。&#39;}, {&#39;发布医院/机构&#39;: &#39;黑龙江省中医药管理局&#39;, &#39;省份&#39;: &#39;黑龙江省&#39;, &#39;早中极恢复期&#39;: &#39;重&#39;, &#39;症状&#39;: &#39;内闭外脱&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;人参15g、干姜10g、附子10g、甘草10g，煎汤送服紫雪丹或至宝丹、安宫牛黄丸、苏合香丸酌情选用。&#39;}, {&#39;发布医院/机构&#39;: &#39;黑龙江省中医药管理局&#39;, &#39;省份&#39;: &#39;黑龙江省&#39;, &#39;早中极恢复期&#39;: &#39;恢复期&#39;, &#39;症状&#39;: &#39;余邪未尽，气阴两伤&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;竹叶15g、石膏20g、太子参15g、麦冬20g、半夏10g、枇杷叶15g、玉竹15g、玄参15g、杏仁10g、陈皮15g、甘草10g。&#39;}]{% raw %}{% endraw %} 保存为json文件格式print(filepath + &#39;共有%d&#39; % (len(data)) + &#39;行数据&#39;) for i in data: i[&#39;发布时间&#39;] = i[&#39;发布时间&#39;].strftime(&quot;%Y %b %d %H:%M:%S&quot;) for i in range(len(data)): filename = filepath+&#39;outfile/&#39; + str(i+1)+&#39;.json&#39; with open(filename, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f: json.dump(data[i], f, ensure_ascii=False, indent=4) # ensure_ascii=False(输出中文)， indent=4(缩进为4)","categories":[{"name":"Python","slug":"Python","permalink":"https://blog.yinuxy.com/categories/Python/"}],"tags":[{"name":"Python小技巧","slug":"Python小技巧","permalink":"https://blog.yinuxy.com/tags/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.40/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"CentOS防火墙配置","slug":"Experience/centosFirewall","date":"2020-03-11T14:06:04.000Z","updated":"2020-07-14T13:52:12.080Z","comments":true,"path":"/post/Experience/centosFirewall/","link":"","permalink":"https://blog.yinuxy.com/post/Experience/centosFirewall/","excerpt":"CentOS防火墙配置","text":"CentOS防火墙配置 查看防火墙服务状态systemctl status firewalld查看防火墙的状态firewall-cmd --state开启、重启、关闭firewalld.service服务 开启service firewalld start 重启service firewalld restart 关闭service firewalld stop查看防火墙规则firewall-cmd --list-all查询、开放、关闭端口 查询端口是否开放firewall-cmd --query-port=8080/tcp 开放端口（以3306端口为例）firewall-cmd --permanent --add-port=3306/tcp 移除端口firewall-cmd --permanent --remove-port=3306/tcp参数说明firewall-cmd:是linux提供的操作firewall的一个工具–permanent:表示设置为持久–add-port:标识添加的端口防火墙配置文件/etc/firewalld/zones/public.xml","categories":[{"name":"Linux","slug":"Linux","permalink":"https://blog.yinuxy.com/categories/Linux/"}],"tags":[{"name":"CentOS","slug":"CentOS","permalink":"https://blog.yinuxy.com/tags/CentOS/"},{"name":"防火墙","slug":"防火墙","permalink":"https://blog.yinuxy.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"Hexo主题美化 | 给你的博客加上GITHUB日历云和分类雷达图","slug":"TechShare/HexoPersonal","date":"2020-03-10T09:13:57.000Z","updated":"2020-07-14T13:52:12.143Z","comments":true,"path":"/post/TechShare/HexoPersonal/","link":"","permalink":"https://blog.yinuxy.com/post/TechShare/HexoPersonal/","excerpt":"Hexo主题美化 | 给你的博客加上GITHUB日历云和分类雷达图","text":"Hexo主题美化 | 给你的博客加上GITHUB日历云和分类雷达图 Previous 环境：Hexo4.2 主题：Volantis 本次主题美化基于blinkfox的hexo-theme-matery 演示 GITHUB日历云 标签云和文章分类雷达图 GITHUB日历云 点击此按钮下载echarts.min.js文件放置于../volantis/source/js文件夹中 点击此按钮下载post-calendar.ejs文件放置于../volantis/layout/_widget文件夹中 打开刚刚下载的post-calendar.ejs文件，将第七行 替换为 &lt;script type=&quot;text/javascript&quot; src=&quot;/js/echarts.min.js&quot;&gt;&lt;/script&gt; 在../volantis/source/less/archive.less里面最后一个括号之前添加如下代码：/*日历云*/ #post-calendar { width: 100%; height: 200px; } 或者下载此&lt;btn&gt;[CSS](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/Hexo/themeConfig/matery.css)&lt;/btn&gt;文件后放置于`../volantis/source/css`文件夹中，然后在`../volantis/layout/_partial/head.ejs`中引入css文件，在`&lt;!-- link --&gt;`标记下方添加一行 ``` ::: danger 使用`volantis`主题的直接在`archive.less`里面添加代码，不要引入`matery.css`文件，`matery.css`与`volantis`主题配置文件`archive.less`部分标签名相同，引入后会更改主题外观。 ::: 5. 在你想让它显示的位置添加如下代码就行啦，例如我是将它放在`../volantis/layout/archive.ejs`中 ``` ``` 6. 演示图： 标签云 点击此按钮下载echarts.min.js文件放置于../volantis/source/js文件夹中 点击此按钮下载tag-cloud.ejs文件放置于../volantis/layout/_widget文件夹中 打开刚刚下载的tag-cloud.ejs文件，将&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- theme.libs.js.echarts %&gt;&quot;&gt;&lt;/script&gt;替换为 &lt;script type=&quot;text/javascript&quot; src=&quot;/js/echarts.min.js&quot;&gt;&lt;/script&gt; 使用volantis主题的可以点击下载按钮替换即可 非volantis主题的需要下载此CSS文件后放置于../volantis/source/css文件夹中，然后在../volantis/layout/_partial/head.ejs中引入css文件，在&lt;!-- link --&gt;标记下方添加一行&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/matery.css&quot;&gt;若引入后博客外观发生改变，则将如下代码复制粘贴于../volantis/source/less/archive.less文件最后一个括号之前。/* tag-cloud */ .chip .tag-length { margin-left: 5px; margin-right: -2px; font-size: 0.5rem; } .chip-default .tag-length { color: #e91e63; margin-top: 1px; } .chip-active .tag-length { color: #fff; } .chip-container .tag-chips { margin: 1rem auto 0.5rem; max-width: 850px; text-align: center; } /*tags边框*/ .chip-container .chip { margin: 10px 10px; padding: 19px 14px; display: inline-flex; line-height: 0; font-size: 1rem; font-weight: 500; border-radius: 5px; cursor: pointer; box-shadow: 0 3px 5px rgba(0, 0, 0, .12); z-index: 0; } .chip-container .chip:hover { color: #fff; background: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%) !important; } 6. 在你想让它显示的位置添加如下代码，例如我是将它放在`../volantis/layout/tag.ejs`中&lt;%- partial(‘_widget/tag-cloud’) %&gt; 添加排版后可能会出现跟主题不搭的情况，可以根据我的&lt;btn&gt;[tag](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/Hexo/themeConfig/myfile/tag.ejs)&lt;/btn&gt;文件适当修改。 7. 演示图 &lt;fancybox&gt; &lt;img src=&#39;https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/img/themePersonalization/output_2.png&#39;&gt; &lt;/fancybox&gt; ## 文章分类雷达图 ## 1. 点击此&lt;btn&gt;[按钮](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/Hexo/themeConfig/echarts.min.js)&lt;/btn&gt;下载`echarts.min.js`文件放置于`../volantis/source/js`文件夹中 2. 点击此&lt;btn&gt;[按钮](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/Hexo/themeConfig/category-radar.ejs)&lt;/btn&gt;下载`category-radar.ejs`文件放置于`../volantis/layout/_widget`文件夹中 3. 打开刚刚下载的`category-radar.ejs`文件，将 &lt;fancybox&gt; &lt;img src=&#39;https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/img/themePersonalization/output_3.png&#39;&gt; &lt;/fancybox&gt; 替换为 4. 在你想让它显示的位置添加如下代码，例如我是将它放在`../volantis/layout/tag.ejs`中&lt;%- partial(‘_widget/category-radar’) %&gt; 5. 演示图 &lt;fancybox&gt; &lt;img src=&#39;https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/img/themePersonalization/output_2.png&#39;&gt; &lt;/fancybox&gt; ## 其它个性化配置 ## 更多个性化配置可参考[TRHX](https://www.itrhx.com/)的博文[Hexo 博客主题个性化](https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/)","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.yinuxy.com/categories/Hexo/"}],"tags":[{"name":"Hexo主题美化","slug":"Hexo主题美化","permalink":"https://blog.yinuxy.com/tags/Hexo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.40/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"使用 Python可视化神器 Plotly 动态演示全球疫情变化趋势","slug":"Python/Visual/2020nCovVisualization","date":"2020-03-09T09:13:57.000Z","updated":"2020-07-14T13:52:12.175Z","comments":true,"path":"/post/Python/Visual/2020nCovVisualization/","link":"","permalink":"https://blog.yinuxy.com/post/Python/Visual/2020nCovVisualization/","excerpt":"使用 Python可视化神器 Plotly 动态演示全球疫情变化趋势","text":"使用 Python可视化神器 Plotly 动态演示全球疫情变化趋势 数据来源疫情的数据来源于开源项目 Akshare。 准备工作运行环境： Windows 10系统 Anaconda（Python 3.7） Jupyter Notebook本次使用到的Python库： akshare, pandas, plotly 数据导入import akshare as ak import pandas as pd import plotly from plotly.offline import iplot, init_notebook_mode import plotly.express as px from datetime import datetime init_notebook_mode()init_notebook_mode()是离线使用plotly，不需注册账号即可使用，但是功能没有在线模式全，下面简单的介绍一下两种模式：plotly的两种模式 离线模式：没有数量限制，图片都在本地。在线模式：最多可以上传25张，可以通过浏览器在线编辑、观看。更好的分享给别，有分为三种情况——公开(public)、私人(private)、秘密(secret)。 # 从 akshare 获取数 # df_all_history = ak.epidemic_history() # 从csv文件获取数据 df_all_history = pd.read_csv(&#39;epidemic_all_20200307.csv&#39;,index_col=0) df_all_history由于使用该项目获取数据时，有时不太稳定，可能会遇到连接失败的情况，所以，这里选用保存好的数据。 提取数据从上面获取的数据，有些数据格式需要加以调整，对于日期，我们这里会组织两列数据，一列是时间格式的日期（ [&#39;date&#39;]），一列是字符串格式的日期 ([&#39;dates&#39;])。这样设置的原因，是因为我们后续分别需要用到这两种格式的日期。 df_all = df_all_history # 将字符串格式的日期 另保存为一列 df_all[&#39;dates&#39;] = df_all_history[&#39;date&#39;] # 将字符串格式的日期转换为 日期格式 df_all[&#39;date&#39;] = pd.to_datetime(df_all[&#39;date&#39;])获取国外的疫情数据上面的数据，是全球的数据，我们可以把其中属于中国的剔除，就可以得到国外的数据了。 # 国外，按国家统计 df_oversea = df_all.query(&quot;country!=&#39;中国&#39;&quot;) df_oversea.fillna(value=&quot;&quot;, inplace=True) df_oversea数据可视化先来用 plotly express 看下国外疫情分国家的整体走势。 fig_oversea = px.line(df_oversea, x=&#39;dates&#39;, y=&#39;confirmed&#39;, line_group=&#39;country&#39;, color=&#39;country&#39;, color_discrete_sequence=px.colors.qualitative.D3, hover_name=&#39;country&#39;, ) fig_oversea.show()效果如下 从上图可以看出，国外的疫情发展情况，大部分国家从2月10日期，发展趋势较为明显，因此，后面我们重点分析这段时间之后的情况。 # 现有数据演示从 2020年2月10日开始 df_oversea_recent = df_oversea.set_index(&#39;date&#39;) df_oversea_recent = df_oversea_recent[&#39;2020-02-10&#39;:] df_oversea_recent由于部分国家的数据不是从2020年2月10日开始记录的，所以要补充数据。我们可以手动新建一个 excel数据表，将补充日期的数值填充为 0 。这里主要补充的是伊朗的数据，因为伊朗实在是发展太快了，必须纳入分析的范围内。其他国家，如果有需要补充的，后续可以继续完善。 # 由于部分国家，数据不是从2020年2月10日开始的，所以要补充数据，数值为 0 # 数据在 excel 表格中进行补充，这里进行读取 df_oversea_buchong = pd.read_excel(&#39;epidemic_buchong.xlsx&#39;) df_oversea_buchong[&#39;dates&#39;] = df_oversea_buchong[&#39;date&#39;].apply(lambda x:x.strftime(&#39;%Y-%m-%d&#39;)) df_oversea_buchong.set_index(&#39;date&#39;, inplace=True) df_oversea_buchong.fillna(value=&quot;&quot;, inplace=True) print(df_oversea_buchong.info()) df_oversea_buchong将需要补充的数据弄好后，我们可以合并上面这两部分数据，一起进行分析。 # 合并补充数据 df_oversea_recent_new = df_oversea_recent.append(df_oversea_buchong) df_oversea_recent_new.sort_index(inplace=True) df_oversea_recent_new得到合并的数据后，首先，用气泡图来对变化情况进行可视化，这里用的是 plotly express 的散点图。 fig_oversea_recent = px.scatter(df_oversea_recent_new, x=&#39;dead&#39;, y=&#39;confirmed&#39;, size=&#39;confirmed&#39;, text=&#39;country&#39;, color=&#39;country&#39;, color_discrete_sequence=px.colors.qualitative.Light24, animation_frame=&#39;dates&#39;,animation_group=&#39;country&#39;, hover_name=&#39;country&#39;, range_x=[-10,260], range_y=[0,8000], size_max=50, template=&#39;plotly_white&#39;, ) fig_oversea_recent.show()效果如下 源码及数据文件 下载源码 下载数据","categories":[{"name":"可视化","slug":"可视化","permalink":"https://blog.yinuxy.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"}],"tags":[{"name":"Python可视化","slug":"Python可视化","permalink":"https://blog.yinuxy.com/tags/Python%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"name":"Plotly","slug":"Plotly","permalink":"https://blog.yinuxy.com/tags/Plotly/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"自用的一些Linux一键脚本（持续更新中···）","slug":"Experience/LinuxScript","date":"2020-03-07T15:55:16.000Z","updated":"2020-07-14T13:52:12.044Z","comments":true,"path":"/post/Experience/LinuxScript/","link":"","permalink":"https://blog.yinuxy.com/post/Experience/LinuxScript/","excerpt":"Linux一键脚本","text":"Linux一键脚本 VPS 性能测试一键脚本SuperBench.sh使用方法wget -qO- --no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash或 curl -Lso- -no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash演示图 下载地址https://github.com/oooldking/script/blob/master/superbench.sh bench.sh使用方法wget -qO- bench.sh | bash或 curl -Lso- bench.sh | bash演示图 下载地址https://github.com/teddysun/across/blob/master/bench.sh ZBench.shZBench 基本上是把上面两个脚本的功能合并了一下，再自己加了些许新的功能，可以说是集大成者，可以一次性测试上面两个脚本的测试项。 使用方法中文版： wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench-CN.sh &amp;&amp; bash ZBench-CN.sh英文版： wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench.sh &amp;&amp; bash ZBench.sh演示图 下载地址https://github.com/FunctionClub/ZBench/blob/master/ZBench.sh VPS 回程路由一键测试使用方法wget -qO- git.io/besttrace | bash演示图 下载地址https://github.com/teddysun/across/blob/master/bench.sh VPS 一键安装脚本一键安装KMS服务脚本适用环境 系统支持：CentOS 6+，Debian 7+，Ubuntu 12+虚拟技术：任意内存要求：≥128M 关于本脚本 本脚本适用于三大 Linux 发行版，其他版本则不支持。 KMS 服务安装完成后会加入开机自启动。 默认记录日志，其日志位于 /var/log/vlmcsd.log。使用方法使用root用户登录，运行以下命令：wget --no-check-certificate https://github.com/teddysun/across/raw/master/kms.sh &amp;&amp; chmod +x kms.sh &amp;&amp; ./kms.sh安装完成后，输入以下命令查看端口号 1688 的监听情况netstat -nxtlp | grep 1688返回值类似于如下这样就表示 OK 了：tcp 0 0 0.0.0.0:1688 0.0.0.0:* LISTEN 3200/vlmcsd tcp 0 0 :::1688 :::* LISTEN 3200/vlmcsd 脚本安装完成后，会将 KMS 服务加入开机自启动。 使用命令/etc/init.d/kms start # 启动 /etc/init.d/kms stop # 停止 /etc/init.d/kms restart # 重启 /etc/init.d/kms status # 状态卸载使用 root 用户登录，运行以下命令： ./kms.sh uninstall使用 KMS 服务KMS 服务，用于在线激活 VOL 版本的 Windows 和 Office。激活的前提是你的系统是批量授权版本，即 VL 版，一般企业版都是 VL 版。而 VL 版本的镜像一般内置 GVLK key，用于 KMS 激活。下面列表里面含有的产品的 VL 版本或者能使用 key 进入 KMS 通道的产品，都支持使用 KMS 激活。使用管理员权限运行 cmd 查看系统版本，命令如下： wmic os get caption使用管理员权限运行 cmd 安装从上面列表得到的 key，命令如下： slmgr /ipk xxxxx-xxxxx-xxxxx-xxxxx-xxxxx使用管理员权限运行 cmd 将 KMS 服务器地址设置为你自己的 IP 或 域名，后面最好再加上端口号（:1688），命令如下： slmgr /skms Your IP or Domain:1688注意：本脚本所做的工作就是此步骤。当你的 KMS 服务出于启动状态，那么此处就可以设置为你自己的 KMS 服务器地址。使用管理员权限运行 cmd 手动激活系统，命令如下： slmgr /ato关于 Office 的激活，要求必须是 VOL 版本，否则无法激活。找到你的 Office 安装目录，32 位默认一般为 C:\\Program Files (x86)\\Microsoft Office\\Office1664 位默认一般为C:\\Program Files\\Microsoft Office\\Office16Office16 是 Office 2016，Office15 就是 Office 2013，Office14 就是Office 2010。打开以上所说的目录，应该有个 OSPP.VBS 文件。使用管理员权限运行 cmd 进入 Office 目录，命令如下： cd &quot;C:\\Program Files (x86)\\Microsoft Office\\Office16&quot;使用管理员权限运行 cmd 注册 KMS 服务器地址： cscript ospp.vbs /sethst:Your IP or Domain使用管理员权限运行 cmd 手动激活 Office，命令如下： cscript ospp.vbs /act注意： KMS 方式激活，其有效期只有 180 天。每隔一段时间系统会自动向 KMS 服务器请求续期，请确保你自己的 KMS 服务正常运行。参考链接:https://03k.org/kms.html","categories":[{"name":"Linux","slug":"Linux","permalink":"https://blog.yinuxy.com/categories/Linux/"}],"tags":[{"name":"Linux Shell","slug":"Linux-Shell","permalink":"https://blog.yinuxy.com/tags/Linux-Shell/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"Linux常用命令大全（整理自用）","slug":"Experience/LinuxShell","date":"2020-03-07T14:48:21.000Z","updated":"2020-07-14T13:52:12.059Z","comments":true,"path":"/post/Experience/LinuxShell/","link":"","permalink":"https://blog.yinuxy.com/post/Experience/LinuxShell/","excerpt":"Linux常用命令大全（整理自用）","text":"Linux常用命令大全（整理自用） ls命令 查看 linux 文件夹包含的文件 查看文件权限(包括目录、文件夹、文件权限) 查看目录信息常用参数搭配ls -a 列出目录所有文件，包含以.开始的隐藏文件 ls -A 列出除.及..的其它文件 ls -r 反序排列 ls -t 以文件修改时间排序 ls -S 以文件大小排序 ls -h 以易读大小显示 ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来实例按易读方式按时间反序排序，并显示文件详细信息ls -lhrt按大小反序显示文件详细信息ls -lrS列出当前目录中所有以”t”开头的目录的详细内容ls -l t*列出文件绝对路径（不包含隐藏文件）ls | sed &quot;s:^:`pwd`/:&quot;列出文件绝对路径（包含隐藏文件）find $pwd -maxdepth 1 | xargs ls -ld cd 命令cd(changeDirectory) 命令语法： cd [dirName] #切换当前目录至 dirName。实例进入上一次工作路径 cd -把上个命令的参数作为cd参数使用。 cd !$pwd 命令pwd 命令用于查看当前工作目录路径。 实例查看当前路径 pwd查看软链接的实际路径 pwd -Pmkdir 命令mkdir 命令用于创建文件夹。可用选项： -m: 对新建目录设置存取权限，也可以用 chmod 命令设置; -p: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。 rm 命令删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。 rm [选项] 文件…实例删除任何 .log 文件，删除前逐一询问确认： rm -i *.log删除 test 子目录及子目录中所有档案删除，并且不用一一确认： rm -rf test删除以 -f 开头的文件 rm -- -f*rmdir 命令从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。 ::: warning不能删除非空目录::: 实例当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除： rmdir -p parent/child/child11mv 命令移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。 实例将文件 test.log 重命名为 test1.txt mv test.log test1.txt将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中 mv llog1.txt log2.txt log3.txt /test3将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖 mv -i log1.txt log2.txt移动当前文件夹下的所有文件到上一级目录 mv * ../cp 命令将源文件复制至目标文件，或将多个源文件复制至目标目录。::: warning命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！::: 参数-i 提示 -r 复制目录及目录内所有项目 -a 复制的文件与原文件时间一样实例复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。 cp -ai a.txt test为 a.txt 建议一个链接（快捷方式） cp -s a.txt link_a.txtcat 命令cat 主要有三大功能： 一次显示整个文件:cat filename 从键盘创建一个文件:cat &gt; filename 将几个文件合并为一个文件:cat file1 file2 &gt; file -b 对非空输出行号 -n 输出所有行号 实例把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里 cat -n log2012.log log2013.log把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里 cat -b log2012.log log2013.log log.log使用 here doc 生成新文件 cat &gt;log.txt &lt;&lt;EOF &gt;Hello &gt;World &gt;PWD=$(pwd) &gt;EOF ls -l log.txt cat log.txt Hello World PWD=/opt/soft/test反向列示 tac log.txt PWD=/opt/soft/test World Hellomore 命令命令参数功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。 +n 从笫 n 行开始显示 -n 定义屏幕大小为n行 +/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 -c 从顶部清屏，然后显示 -d 提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能 -l 忽略Ctrl+l（换页）字符 -p 通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似 -s 把连续的多个空行显示为一行 -u 把文件内容中的下画线去掉常用操作命令Enter 向下 n 行，需要定义。默认为 1 行 Ctrl+F 向下滚动一屏 空格键 向下滚动一屏 Ctrl+B 返回上一屏 = 输出当前行的行号 :f 输出文件名和当前行的行号 V 调用vi编辑器 !命令 调用Shell，并执行命令 q 退出more实例显示文件中从第3行起的内容 more +3 text.txt在所列出文件目录详细信息，借助管道使每次显示 5 行 ls -l | more -5less 命令less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。 常用命令参数-i 忽略搜索时的大小写 -N 显示每行的行号 -o &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来 -s 显示连续空行为一行 /字符串：向下搜索“字符串”的功能 ?字符串：向上搜索“字符串”的功能 n：重复前一个搜索（与 / 或 ? 有关） N：反向重复前一个搜索（与 / 或 ? 有关） -x &lt;数字&gt; 将“tab”键显示为规定的数字空格 b 向后翻一页 d 向后翻半页 h 显示帮助界面 Q 退出less 命令 u 向前滚动半页 y 向前滚动一行 空格键 滚动一行 回车键 滚动一页 [pagedown]： 向下翻动一页 [pageup]： 向上翻动一页 实例ps 查看进程信息并通过 less 分页显示 ps -aux | less -N查看多个文件 less 1.log 2.log可以使用 n 查看下一个，使用 p 查看前一个。 tail 命令用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。 常用参数-f 循环读取（常用于查看递增的日志文件） -n&lt;行数&gt; 显示行数（从后向前）实例循环读取逐渐增加的文件内容 ping 127.0.0.1 &gt; ping.log &amp;后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。 tail -f ping.logwhich 命令在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索： which 查看可执行文件的位置。 whereis 查看文件的位置。 locate 配合数据库查看文件位置。 find 实际搜寻硬盘查询文件名称。which 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。 常用参数-n 指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。实例查看 ls 命令是否存在，执行哪个 which ls查看 which which which查看 cd which cd（显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令）查看当前 PATH 配置 echo $PATH或使用 env 查看所有环境变量及对应值 whereis 命令whereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。 常用参数-b 定位可执行文件。 -m 定位帮助文件。 -s 定位源代码文件。 -u 搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。实例查找 locate 程序相关文件 whereis locate查找 locate 的源码文件 whereis -s locatelocate 命令locate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc/crontab)。locate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找 常用参数-l num（要显示的行数） -f 将特定的档案系统排除在外，如将proc排除在外 -r 使用正则运算式做为寻找条件实例查找和 pwd 相关的所有文件(文件名中包含 pwd） locate pwd搜索 etc 目录下所有以 sh 开头的文件 locate /etc/sh查找 /var 目录下，以 reason 结尾的文件 locate -r &#39;^/var.*reason$&#39; #其中.表示一个字符，*表示任务多个；.*表示任意多个字符find 命令用于在文件树中查找文件，并作出相应的处理。命令格式： find pathname -options [-print -exec -ok ...]命令参数pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。 -print： find命令将匹配的文件输出到标准输出。 -exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为&#39;command&#39; { } \\;，注意{ }和\\；之间的空格。 -ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。命令选项-name 按照文件名查找文件 -perm 按文件权限查找文件 -user 按文件属主查找文件 -group 按照文件所属的组来查找文件。 -type 查找某一类型的文件，诸如： b - 块设备文件 d - 目录 c - 字符设备文件 l - 符号链接文件 p - 管道文件 f - 普通文件 -size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小 -amin n 查找系统中最后N分钟访问的文件 -atime n 查找系统中最后n*24小时访问的文件 -cmin n 查找系统中最后N分钟被改变文件状态的文件 -ctime n 查找系统中最后n*24小时被改变文件状态的文件 -mmin n 查找系统中最后N分钟被改变文件数据的文件 -mtime n 查找系统中最后n*24小时被改变文件数据的文件 (用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 ) -maxdepth n 最大查找目录深度 -prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略 -newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项chmod 命令用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。 每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。以文件 log2012.log 为例： -rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。 常用参数-c 当发生改变时，报告处理信息 -R 处理指定目录以及其子目录下所有文件权限范围u ：目录或者文件的当前的用户 g ：目录或者文件的当前的群组 o ：除了目录或者文件的当前用户或群组之外的用户或者群组 a ：所有的用户及群组权限代号r ：读权限，用数字4表示 w ：写权限，用数字2表示 x ：执行权限，用数字1表示 - ：删除权限，用数字0表示 s ：特殊权限实例增加文件 t.log 所有用户可执行权限 chmod a+x t.log撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息 chmod u=r t.log -c给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限 chmod 751 t.log -c（或者：chmod u=rwx,g=rx,o=x t.log -c)将 test 目录及其子目录所有文件添加可读权限 chmod u+r,g+r,o+r -R text/ -ctar 命令用来压缩和解压文件。 常用参数-c 建立新的压缩文件 -f 指定压缩文件 -r 添加文件到已经压缩文件包中 -u 添加改了和现有的文件到压缩包中 -x 从压缩包中抽取文件 -t 显示压缩文件中的内容 -z 支持gzip压缩 -j 支持bzip2压缩 -Z 支持compress解压文件 -v 显示操作过程实例将文件全部打包成 tar 包 tar -cvf log.tar 1.log,2.log 或tar -cvf log.*/etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩 tar -zcvf /tmp/etc.tar.gz /etc查看刚打包的文件内容（一定加z，因为是使用 gzip 压缩的） tar -ztvf /tmp/etc.tar.gz要压缩打包 /home, /etc ，但不要 /home/dmtsai tar --exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etcln 命令功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。 常用参数-b 删除，覆盖以前建立的链接 -s 软链接（符号链接） -v 显示详细处理过程实例给文件创建软链接，并显示操作信息 ln -sv source.log link.log给文件创建硬链接，并显示操作信息 ln -v source.log link1.log给目录创建软链接 ln -sv /opt/soft/test/test3 /opt/soft/test/test5grep 命令强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。 命令格式grep [option] pattern file|dir常用参数-A n --after-context显示匹配字符后n行 -B n --before-context显示匹配字符前n行 -C n --context 显示匹配字符前后n行 -c --count 计算符合样式的列数 -i 忽略大小写 -l 只列出文件内容符合指定的样式的文件名称 -f 从文件中读取关键词 -n 显示匹配内容的所在文件中行数 -R 递归查找文件夹grep 的规则表达式^ #锚定行的开始 如：&#39;^grep&#39;匹配所有以grep开头的行。 $ #锚定行的结束 如：&#39;grep$&#39;匹配所有以grep结尾的行。 . #匹配一个非换行符的字符 如：&#39;gr.p&#39;匹配gr后接一个任意字符，然后是p。 * #匹配零个或多个先前字符 如：&#39;*grep&#39;匹配所有一个或多个空格后紧跟grep的行。 .* #一起用代表任意字符。 [] #匹配一个指定范围内的字符，如&#39;[Gg]rep&#39;匹配Grep和grep。 [^] #匹配一个不在指定范围内的字符，如：&#39;[^A-FH-Z]rep&#39;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。 \\(..\\) #标记匹配字符，如&#39;\\(love\\)&#39;，love被标记为1。 \\&lt; #锚定单词的开始，如:&#39;\\&lt;grep&#39;匹配包含以grep开头的单词的行。 \\&gt; #锚定单词的结束，如&#39;grep\\&gt;&#39;匹配包含以grep结尾的单词的行。 x\\{m\\} #重复字符x，m次，如：&#39;0\\{5\\}&#39;匹配包含5个o的行。 x\\{m,\\} #重复字符x,至少m次，如：&#39;o\\{5,\\}&#39;匹配至少有5个o的行。 x\\{m,n\\} #重复字符x，至少m次，不多于n次，如：&#39;o\\{5,10\\}&#39;匹配5--10个o的行。 \\w #匹配文字和数字字符，也就是[A-Za-z0-9]，如：&#39;G\\w*p&#39;匹配以G后跟零个或多个文字或数字字符，然后是p。 \\W #\\w的反置形式，匹配一个或多个非单词字符，如点号句号等。 \\b #单词锁定符，如: &#39;\\bgrep\\b&#39;只匹配grep。实例查找指定进程 ps -ef | grep svn查找指定进程个数 ps -ef | grep svn -c从文件中读取关键词 cat test1.txt | grep -f key.log从文件夹中递归查找以grep开头的行，并只列出文件 grep -lR &#39;^grep&#39; /tmp查找非x开关的行内容 grep &#39;^[^x]&#39; test.txt显示包含 ed 或者 at 字符的内容行 grep -E &#39;ed|at&#39; test.txtps 命令ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top linux上进程有5种状态: 运行(正在运行或在运行队列中等待) 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号) 不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生) 僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放) 停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)ps 工具标识进程的5种状态码:D 不可中断 uninterruptible sleep (usually IO) R 运行 runnable (on run queue) S 中断 sleeping T 停止 traced or stopped Z 僵死 a defunct (”zombie”) process命令参数``` -A 显示所有进程a 显示所有进程-a 显示同一终端下所有进程c 显示进程真实名称e 显示环境变量f 显示进程间的关系r 显示当前终端运行的进程-aux 显示所有包含其它使用的进程 ### 实例 ### 显示当前所有进程环境变量及进程间关系ps -ef 显示当前所有进程ps -A 与grep联用查找某进程ps -aux | grep apache 找出与 cron 与 syslog 这两个服务有关的 PID 号码ps aux | grep ‘(cron|syslog)’ ## kill 命令 ## 发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用&quot;-KILL&quot; 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。 ### 常用参数 ###-l 信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称-a 当处理当前进程时，不限制命令名和进程号的对应关系-p 指定kill 命令只打印相关进程的进程号，而不发送任何信号-s 指定发送信号-u 指定用户 ### 实例 ### 使用ps查找进程pro1，然后用kill杀掉kill -9 $(ps -ef | grep pro1)","categories":[{"name":"Linux","slug":"Linux","permalink":"https://blog.yinuxy.com/categories/Linux/"}],"tags":[{"name":"Linux Shell","slug":"Linux-Shell","permalink":"https://blog.yinuxy.com/tags/Linux-Shell/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"使用Python爬取知乎上的高颜值小姐姐","slug":"Script/zhihuPrettyGril","date":"2020-03-06T14:17:17.000Z","updated":"2020-07-14T13:52:12.124Z","comments":true,"path":"/post/Script/zhihuPrettyGril/","link":"","permalink":"https://blog.yinuxy.com/post/Script/zhihuPrettyGril/","excerpt":"“你见过的有些人能漂亮到什么程度？”","text":"“你见过的有些人能漂亮到什么程度？” 爬取链接原问题在这儿你见过的有些人能漂亮到什么程度？ 爬取思路使用Python爬虫爬取这个问题下的高赞照片。 爬虫爬了下这个问题下的高赞照片。在欣赏小姐姐的美照之前，我们先来分享一下思路。 通过知乎回答的url，先把回答一页一页的爬下来，存到本地数据库。随后从数据库里读取数据，筛选出高赞的回答，把回答里的图片解析出来。 函数解析def get_answers_by_page(page_no): offset = page_no * 10 url = &quot;&lt;answer url&gt;&amp;offset={}&amp;limit=10&amp;sort_by=default&amp;platform=desktop&quot;.format(offset) headers = { &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&quot;, } r = requests.get(url, verify=False, headers=headers) content = r.content.decode(&quot;utf-8&quot;) data = json.loads(content) is_end = data[&quot;paging&quot;][&quot;is_end&quot;] items = data[&quot;data&quot;] client = pymongo.MongoClient() db = client[&quot;beauty&quot;] if len(items) &gt; 0: db.answers.insert_many(items) return is_end def get_answers(): page_no = 0 client = pymongo.MongoClient() while True: print(page_no) is_end = get_answers_by_page(page_no) page_no += 1 if is_end: break def query(): client = pymongo.MongoClient() db = client[&quot;beauty&quot;] items = db.answers.find({&quot;voteup_count&quot;: {&quot;$gte&quot;: 100}}).sort([(&quot;voteup_count&quot;, pymongo.DESCENDING)]) count = 0 for item in items: content = item[&quot;content&quot;] vote_num = item[&quot;voteup_count&quot;] author = item[&quot;author&quot;][&quot;name&quot;] matched = re.findall(r&#39;data-original=&quot;([^&quot;]+)&quot;&#39;, content) print(&quot;&gt; 来自 {}\\n&quot;.format(item[&quot;url&quot;])) print(&quot;&gt; 作者 {}\\n&quot;.format(author)) print(&quot;&gt; 赞数 {}\\n&quot;.format(vote_num)) img_urls = [] for img_url in matched: if img_url not in img_urls: print(&quot;![]({})&quot;.format(img_url)) img_urls.append(img_url) count += len(img_urls) print(&quot;\\n\\n&quot;) print(count)get_answers_by_page - 这个函数用于获取一页的回答内容，获取的内容会存到本地MongoDB里get_answers - 这个函数用于获取所有页的内容，它会调用上面的函数，循环获取每一页的内容query - 这个函数用于从MongoDB里查询数据，筛选高赞回答，并且把结果打印出来 如果要完整的运行这个项目，大家可以下载源代码后，在本地运行。运行项目后，程序会筛选出所有赞数大于100的回答，并且把回答里的图片整理出来。赞数越高的回答，小姐姐的颜值越高。 源码下载 源码下载","categories":[{"name":"Python","slug":"Python","permalink":"https://blog.yinuxy.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blog.yinuxy.com/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://blog.yinuxy.com/tags/%E7%88%AC%E8%99%AB/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"Maven学习心得（情人节快乐！）","slug":"Experience/MavenShell","date":"2020-02-14T11:43:16.000Z","updated":"2020-07-14T13:52:12.069Z","comments":true,"path":"/post/Experience/MavenShell/","link":"","permalink":"https://blog.yinuxy.com/post/Experience/MavenShell/","excerpt":"Maven学习心得（祝天下码农终成眷属！）","text":"Maven学习心得（祝天下码农终成眷属！） Maven介绍及环境搭建Maven是什么 Maven是基于项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件。 Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。 Maven这个单词来自于意第绪语（犹太语），意为知识的积累，最初在Jakata Turbine项目中用来简化构建过程。当时有一些项目（有各自Ant build文件），仅有细微的差别，而JAR文件都由CVS来维护。于是希望有一种标准化的方式构建项目，一个清晰的方式定义项目的组成，一个容易的方式发布项目的信息，以及一种简单的方式在多个项目中共享JARs。 Maven环境搭建参考maven 安装以及环境变量配置 Maven案例创建Maven目录结构 首先创建文件夹命名为src 在src目录下分别创建子目录main和test 在main和test目录下各创建一个子目录java 创建HelloMaven 在main目录的java目录下创建如下目录并创建HellowWorld.javaJava类文件 public class HelloWorld { public String sayHello(){ return &quot;Hello World!&quot;; } } 在test目录的java目录下创建如下目录并创建testHello.javaJava类文件 import org.junit.*; import org.junit.Assert.*; public class HellOWorldTest { @Test public void testHello() { Assert.assertEquals(&quot;Hello World!&quot;,new HelloWorld().sayHello()); } } 在src根目录下创建pom.xml编写代码如下： &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;!-- 模型版本。maven2.0必须是这样写，现在是maven2唯一支持的版本 --&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.winner.trade，maven会将该项目打成的jar包放本地路径：/com/winner/trade --&gt; &lt;groupId&gt;com.study&lt;/groupId&gt; &lt;!-- 本项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt; &lt;artifactId&gt;study-model&lt;/artifactId&gt; &lt;!-- 本项目目前所处的版本号 --&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;!-- 打包的机制，如pom,jar, maven-plugin, ejb, war, ear, rar, par，默认为jar --&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;!-- 定义本项目的依赖关系 --&gt; &lt;dependencies&gt; &lt;!-- 每个dependency都对应这一个jar包 --&gt; &lt;dependency&gt; &lt;!--一般情况下，maven是通过groupId、artifactId、version这三个元素值（俗称坐标）来检索该构件， 然后引入你的工程。如果别人想引用你现在开发的这个项目（前提是已开发完毕并发布到了远程仓库），--&gt; &lt;!--就需要在他的pom文件中新建一个dependency节点，将本项目的groupId、artifactId、version写入， maven就会把你上传的jar包下载到他的本地 --&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.10&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; ``` 4. 打开命令提示行，进入到HelloWorld项目的根目录中输入`mvn compile`回车运行对该项目进行编译（如果是第一次运行Maven会在运行之前下载很多第三方的插件和Maven所依赖的jar）. ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_5.png) 出现`BUILD SUCCESS`即表示项目运行成功~ ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_6.png) 5. 运行测试例，输入`mvn test`: ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_7.png) 测试例成功运行，并且无任何报错~ 6. 接下来看一下项目的根目录下会有哪些变化： ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_8.png) 它默认生成了一个`target`文件夹，打开它，在`classes`目录下存放着生成的字节码文件;`surefire-reports`下存放着生成的测试报告； ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_9.png) 7. 下面再去命令行键入`mvn package`： ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_10.png) 完美运行！ 可以看到在`target`目录下生成了一个`study-model-1.0.0-SNAPSHOT.jar`的jar包 ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_11.png)","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blog.yinuxy.com/categories/Docker/"}],"tags":[],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"Docker常用命令","slug":"Experience/DockerShell","date":"2020-02-13T11:43:16.000Z","updated":"2020-07-14T13:52:12.048Z","comments":true,"path":"/post/Experience/DockerShell/","link":"","permalink":"https://blog.yinuxy.com/post/Experience/DockerShell/","excerpt":"Docker常用命令","text":"Docker常用命令 帮助命令 查看Docker 版本信息 docker version 查看Docker 系统信息，包括镜像和容器数 docker info 查看Docker 常用命令 docker --help镜像命令 列出镜像 docker images [OPTIONS]参数说明： REPOSITORY 表示镜像的仓库源 TAG 镜像的标签 IMAGE ID 镜像ID SIZE 镜像大小 [OPTIONS]说明： -a 列出本地所有的镜像（含中间映像层） -q 只显示镜像ID --digests 显示镜像的摘要信息 --no-trunc 显示完整的镜像信息 查询镜像 docker search [OPTION] imagename[OPTION]说明： --no-trunc 显示完整的镜像描述 -s 列出收藏数不少于指定数的镜像 --automated 只列出automated bulid类型的镜像 下载镜像 docker pull imagename [:TAG] 删除镜像 docker rmi imageID删除单个 docker rmi -f imageID删除多个 docker rmi -f imagename1:TAG1 imagename2:TAG2删除全部 docker rmi -f$(docker images -qa)容器命令有镜像才能创建容器！ 新建并启动容器docker run [OPTION] IMAGE [COMMAND] ARG...[OPTION]说明： --name=\"\" 为容器制定一个新名称 -d 后台运行容器，并返回容器ID，即启动守护式容器 -i 以交互模式运行容器，通常与-t同时使用 -t 为容器重新分配一个伪输入终端。通常与-i同时使用 -P 随机端口映射 -p 指定端口映射 -p有以下四种格式：ip:hostPort:containerPortip::containerPorthostPort:containerPortcontainerPort 列出当前正在运行的容器 docker ps [OPTION][OPTION]说明： -a 列出当前正在运行的容器+历史上运行过的 -l 显示最近创建的容器 -n 显示n个最近创建的容器 -q 静默模式，只显示容器编号 --no-trunc 不截断退出 退出容器： exit #容器停止退出 Ctrl+P+Q #容器不停止退出 启动容器 docker start continerID/continerName 重启容器 docker restart continerID/continerName 停止容器 docker stop continerID/continerName 强制停止容器 docker kill continerID/continerName 删除已停止的容器 docker rm continerID docker rm -f$(docker ps -a -q) #一次性删除多个容器 docker ps -a -q | xargs docker rm #一次性删除多个容器 容器命令-重要 启动守护式容器： docker run -d containerName 使用镜像centos:latsext以后台模式启动一个容器docker run -d centos问题：使用docker ps -a进行查看，会发现容器已经退出很重要的说明一点：Docker容器后台运行，就必须有一个前台进程容器运行的命令如果不是那些一直挂起的命令（比如运行top、tail），就会自动退出这个是Docker的机制问题，比如说以你的web容器，我们以nginx为例，正常情况下，我们配置启动服务只需启动相应的service即可。例如service nginx start，但是这样做，nginx为后台进程模式运行，就导致docker前台没有运行的应用，这样的容器后台启动后，会立即自杀以为他觉得她没事可做了。所以，最佳的解决方案是：将你要运行的程序以前台进程的形式运行。 查看容器日志```docker logs -d -t –tail containerID -t 加入时间戳-f 跟随最新的日志打印–tail 数字显示最后多少条 3. 查看容器内运行的进程docker top containerID 4. 查看容器内部细节docker inspect containerID 5. 进入正在运行的容器并以命令行交互docker exec it containerID bashShelldocker attach containerID #重新进入 &gt; 区别 &gt; attach 直接进入容器命令的终端，不启动新的进程 &gt; exec 在容器中打开新的终端，并可以启动新的进程 6. 从容器内拷贝文件到主机上docker cp containerID:容器内路径 目的主机地址","categories":[{"name":"Docker","slug":"Docker","permalink":"https://blog.yinuxy.com/categories/Docker/"}],"tags":[],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"Anaconda中的python版本降级","slug":"TechShare/condaDown","date":"2020-02-11T06:55:16.000Z","updated":"2020-07-14T13:52:12.151Z","comments":true,"path":"/post/TechShare/condaDown/","link":"","permalink":"https://blog.yinuxy.com/post/TechShare/condaDown/","excerpt":"Anaconda中的python版本降级","text":"Anaconda中的python版本降级 打开anaconda navigato 最左侧边栏选择Environments,搜索python并找到python，查看红框处python版本（我的已经降级为3.5，新安装的情况下会看到的是3.6） 左键点击python前方绿色箭头（红框处），选择Mark for specific version installation，选择对应的python版本（3.5） 等待安装完成后（时间有点长，res改成中国的话可以得到改善）,运行下python并检查下版本是否已经降级到了3.5","categories":[{"name":"Python","slug":"Python","permalink":"https://blog.yinuxy.com/categories/Python/"}],"tags":[{"name":"Anaconda","slug":"Anaconda","permalink":"https://blog.yinuxy.com/tags/Anaconda/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"解决No module named 'mpl_toolkits.basemap'问题","slug":"CodeError/basemap","date":"2020-02-10T03:37:16.000Z","updated":"2020-07-14T13:52:12.037Z","comments":true,"path":"/post/CodeError/basemap/","link":"","permalink":"https://blog.yinuxy.com/post/CodeError/basemap/","excerpt":"解决No module named 'mpl_toolkits.basemap'问题","text":"解决No module named 'mpl_toolkits.basemap'问题 问题描述Python3.x版本导入from mpl_toolkits.basemap import Basemap包时出现问题： 解决方法 安装pyproj：pip install pyproj -i https://pypi.tuna.tsinghua.edu.cn/simple 进入https://www.lfd.uci.edu/~gohlke/pythonlibs/#basemap ctrl + F 搜索 basemap，下载下载时请与自身系统所用python版本对应；如python版本为3.6.X、amd64可选用图中红框版本 下载完后使用Shell命令进入文件根目录运行pip install packagename即可安装成功！","categories":[{"name":"Python","slug":"Python","permalink":"https://blog.yinuxy.com/categories/Python/"}],"tags":[{"name":"basemap","slug":"basemap","permalink":"https://blog.yinuxy.com/tags/basemap/"},{"name":"pyproj","slug":"pyproj","permalink":"https://blog.yinuxy.com/tags/pyproj/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"Word2Vec——使用GloVe训练中文词向量","slug":"Algorithm/word2vec","date":"2020-01-16T03:37:16.000Z","updated":"2020-07-14T13:52:12.033Z","comments":true,"path":"/post/Algorithm/word2vec/","link":"","permalink":"https://blog.yinuxy.com/post/Algorithm/word2vec/","excerpt":"Word2Vec——使用GloVe训练中文词向量","text":"Word2Vec——使用GloVe训练中文词向量 准备语料准备好中文语料：中文语料库，或者使用Leavingseason准备好的语料进行训练：http://pan.baidu.com/s/1jHZCvvo 准备源码到斯坦福GloVe开源代码gihub地址下载代码；解压后将语料×××.txt添加到GloVe-master文件夹下 修改训练语料地址打开demo.sh文件，修改相应的内容因为demo默认是下载网上的语料来训练的，因此如果要训练自己的语料，需要注释掉修改参数设置，将CORPUS设置成语料的名字 CORPUS=text8 要生成词向量的文本 VOCAB_FILE=vocab.txt 得到的词和词频 COOCCURRENCE_FILE=cooccurrence.bin COOCCURRENCE_SHUF_FILE=cooccurrence.shuf.bin BUILDDIR=build SAVE_FILE=vectors VERBOSE=2 MEMORY=4.0 内存 VOCAB_MIN_COUNT=5 最小词频数 VECTOR_SIZE=50 词向量维度 MAX_ITER=15 训练迭代次数 WINDOW_SIZE=15 上下文窗口数 BINARY=2 保存文件类型（2进制） NUM_THREADS=8 线程数 X_MAX=10执行bash文件进入到主文件夹下 make bash demo.sh注意，如果训练数据较大，则训练时间较长，那么建议使用nohup来运行程序 nohup bash demo.sh &gt;output.txt 2&gt;&amp;1 &amp;训练后会得到vetors.txt，打开后在第一行加上vacob_size vector_size，这样才能用word2vec的load函数加载成功vacob_size vector_size可在训练时看到： 参数说明进入glove目录下，首先先参考README.txt,里面主要介绍这个程序包含了四部分子程序，按步骤分别是vocab_count、cooccur、shuffle、glove： vocab_count:用于计算原文本的单词统计（生成vocab.txt,每一行为：单词 词频） cooccur：用于统计词与词的共现，类似word2vec的窗口内的任意两个词（生成的是cooccurrence.bin,二进制文件） shuffle：对于2中的共现结果重新整理 glove：glove算法的训练模型，会运用到之前生成的相关文件（1&amp;3），最终会输出vectors.txt和vectors.bin（前者直接可以打开，下文主要针对它做研究，后者还是二进制文件）","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://blog.yinuxy.com/categories/Algorithm/"}],"tags":[{"name":"Word2Vec","slug":"Word2Vec","permalink":"https://blog.yinuxy.com/tags/Word2Vec/"},{"name":"词向量","slug":"词向量","permalink":"https://blog.yinuxy.com/tags/%E8%AF%8D%E5%90%91%E9%87%8F/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"活动线报001——京东炸年兽脚本","slug":"Activity/jdzns","date":"2020-01-02T16:00:00.000Z","updated":"2020-07-14T13:52:12.017Z","comments":true,"path":"/post/Activity/jdzns/","link":"","permalink":"https://blog.yinuxy.com/post/Activity/jdzns/","excerpt":"活动线报001——京东炸年兽脚本","text":"活动线报001——京东炸年兽脚本 使用电脑端登录一下http://m.jd.com登录自己账号 登陆成功后再打开如下链接：https://bunearth.m.jd.com/babelDiy/SGFJVMOZADGTQCZWGEYU/4PWgqmrFHunn8C38mJA712fufguU/index.html#/wxhome 进入活动界面有按下F12进入开发者模式 点击Console下粘贴下面红色的脚本 按回车键eval(function(p,a,c,k,e,d){e=function(c){return(c&lt;a?&quot;&quot;:e(parseInt(c/a)))+((c=c%a)&gt;35?String.fromCharCode(c+29):c.toString(36))};if(!&#39;&#39;.replace(/^/,String)){while(c--)d[e(c)]=k[c]||e(c);k=[function(e){return d[e]}];e=function(){return&#39;\\\\w+&#39;};c=1;};while(c--)if(k[c])p=p.replace(new RegExp(&#39;\\\\b&#39;+e(c)+&#39;\\\\b&#39;,&#39;g&#39;),k[c]);return p;}(&#39;6 0=1.5(\\&#39;0\\&#39;);0.7=&quot;2/3&quot;;0.4=&quot;b://c.d/8&quot;;1.9.a(0);&#39;,14,14,&#39;script|document|text|javascript|src|createElement|var|type|ATmFCV|body|appendChild|https|6url|cn&#39;.split(&#39;|&#39;),0,{})) 接下来点击右上角三个点 选择More tools-&gt;Network conditions运行会出现一个ʚ福利鸭ɞ 如下图 复制下面红色的user-Agent粘贴到箭头1位置;再重复一次步骤3。jdapp;android;8.4.2;8.0.0;;network/wifi;model/Mi Note 2;osVer/26;appBuild/71043;psn/|7;psq/1;uid/;adk/;ads/;pap/JA2015_311210|8.4.2|ANDROID 8.0.0;osv/8.0.0;pv/2.23;jdv/;ref/com.jingdong.app.mall.WebActivity;partner/huawei;apprpd/Home_Main;Mozilla/5.0 (Linux; Android 8.0.0; Mi Note 2 Build/OPR1.170623.032; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/71.0.3578.99 Mobile Safari/537.36 点击左侧的所有按钮完成任务。","categories":[{"name":"活动线报","slug":"活动线报","permalink":"https://blog.yinuxy.com/categories/%E6%B4%BB%E5%8A%A8%E7%BA%BF%E6%8A%A5/"}],"tags":[],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"算法笔记（0002） - 【贪心算法】活动安排问题","slug":"Algorithm/Algorithm-2","date":"2019-10-31T12:31:54.000Z","updated":"2020-07-14T13:52:12.028Z","comments":true,"path":"/post/Algorithm/Algorithm-2/","link":"","permalink":"https://blog.yinuxy.com/post/Algorithm/Algorithm-2/","excerpt":"算法笔记（0002） - 【贪心算法】活动安排问题","text":"算法笔记（0002） - 【贪心算法】活动安排问题 贪心算法原理在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。 特性贪心算法采用自顶向下，以迭代的方法做出相继的贪心选择，每做一次贪心选择就将所求问题简化为一个规模更小的子问题，通过每一步贪心选择，可得到问题的一个最优解，虽然每一步上都要保证能获得局部最优解，但由此产生的全局解有时不一定是最优的，所以贪婪法不要回溯。能够用贪心算法求解的问题一般具有两个重要特性：贪心选择性质和最优子结构性质。 1、贪心选择性质所谓贪心选择性质是指所求问题的整体最优解可以通过一系列局部最优的选择，即贪心选择来达到。这是贪心算法可行的第一个基本要素。贪心算法则通常以自顶向下的方式进行，以迭代的方式作出相继的贪心选择，每作一次贪心选择就将所求问题简化为规模更小的子问题。 对于一个具体问题，要确定它是否具有贪心选择性质，必须证明每一步所作的贪心选择最终导致问题的整体最优解。证明的大致过程为：首先考察问题的一个整体最优解，并证明可修改这个最优解，使其以贪心选择开始。做了贪心选择后，原问题简化为规模更小的类似子问题。然后用数学归纳法证明通过每一步做贪心选择，最终可得到问题的整体最优解。其中，证明贪心选择后的问题简化为规模更小的类似子问题的关键在于利用该问题的最优子结构性质。 2、最优子结构性质当一个问题的最优解包含其子问题的最优解时，称此问题具有最优子结构性质。 3、贪心算法与动态规划算法的差异动态规划和贪心算法都是一种递推算法，均有最优子结构性质，通过局部最优解来推导全局最优解。两者之间的区别在于：贪心算法中作出的每步贪心决策都无法改变，因为贪心策略是由上一步的最优解推导下一步的最优解，而上一部之前的最优解则不作保留，贪心算法每一步的最优解一定包含上一步的最优解。动态规划算法中全局最优解中一定包含某个局部最优解，但不一定包含前一个局部最优解，因此需要记录之前的所有最优解。 4、基本思路： 建立数学模型来描述问题。 把求解的问题分成若干个子问题。 对每一子问题求解，得到子问题的局部最优解。 把子问题的解局部最优解合成原来解问题的一个解。 活动安排问题活动安排问题就是要在所给的活动集合中选出最大的相容活动子集合，是可以用贪心算法有效求解的很好例子。该问题要求高效地安排一系列争用某一公共资源的活动。贪心算法提供了一个简单、漂亮的方法使得尽可能多的活动能兼容地使用公共资源。 问题描述 设有n个活动的集合E={1,2,…,n}，其中每个活动都要求使用同一资源，如演讲会场等，而在同一时间内只有一个活动能使用这一资源。每个活动i都有一个要求使用该资源的起始时间si和一个结束时间fi,且si &lt;fi。如果选择了活动i，则它在半开时间区间[si, fi)内占用资源。若区间[si, fi)与区间[sj, fj)不相交,则称活动i与活动j是相容的。也就是说，当si≥fj或sj≥fi时，活动i与活动j相容。活动安排问题就是要在所给的活动集合中选出最大的相容活动子集合。 求解思路将活动按照结束时间进行从小到大排序。然后用i代表第i个活动，s[i]代表第i个活动开始时间，f[i]代表第i个活动的结束时间。按照从小到大排序，挑选出结束时间尽量早的活动，并且满足后一个活动的起始时间晚于前一个活动的结束时间，全部找出这些活动就是最大的相容活动子集合。事实上系统一次检查活动i是否与当前已选择的所有活动相容。若相容活动i加入已选择活动的集合中，否则，不选择活动i，而继续下一活动与集合A中活动的相容性。若活动i与之相容，则i成为最近加入集合A的活动，并取代活动j的位置。 下面给出求解活动安排问题的贪心算法，各活动的起始时间和结束时间存储于数组s和f中，且按结束时间的非减序排列。如果所给的活动未按此序排列，可以用O(nlogn)的时间重排。具体代码如下： #include &quot;stdafx.h&quot; #include &lt;iostream&gt; using namespace std; template&lt;class Type&gt; void GreedySelector(int n, Type s[], Type f[], bool A[]); const int N = 11; int main() { //下标从1开始,存储活动开始时间 int s[] = {0,1,3,0,5,3,5,6,8,8,2,12}; //下标从1开始,存储活动结束时间 int f[] = {0,4,5,6,7,8,9,10,11,12,13,14}; bool A[N+1]; cout&lt;&lt;&quot;各活动的开始时间,结束时间分别为：&quot;&lt;&lt;endl; for(int i=1;i&lt;=N;i++) { cout&lt;&lt;&quot;[&quot;&lt;&lt;i&lt;&lt;&quot;]:&quot;&lt;&lt;&quot;(&quot;&lt;&lt;s[i]&lt;&lt;&quot;,&quot;&lt;&lt;f[i]&lt;&lt;&quot;)&quot;&lt;&lt;endl; } GreedySelector(N,s,f,A); cout&lt;&lt;&quot;最大相容活动子集为：&quot;&lt;&lt;endl; for(int i=1;i&lt;=N;i++) { if(A[i]){ cout&lt;&lt;&quot;[&quot;&lt;&lt;i&lt;&lt;&quot;]:&quot;&lt;&lt;&quot;(&quot;&lt;&lt;s[i]&lt;&lt;&quot;,&quot;&lt;&lt;f[i]&lt;&lt;&quot;)&quot;&lt;&lt;endl; } } return 0; } template&lt;class Type&gt; void GreedySelector(int n, Type s[], Type f[], bool A[]) { A[1]=true; int j=1;//记录最近一次加入A中的活动 for (int i=2;i&lt;=n;i++)//依次检查活动i是否与当前已选择的活动相容 { if (s[i]&gt;=f[j]) { A[i]=true; j=i; } else { A[i]=false; } } }由于输入的活动以其完成时间的非减序排列，所以算法greedySelector每次总是选择具有最早完成时间的相容活动加入集合A中。直观上，按这种方法选择相容活动为未安排活动留下尽可能多的时间。也就是说，该算法的贪心选择的意义是使剩余的可安排时间段极大化，以便安排尽可能多的相容活动。算法greedySelector的效率极高。当输入的活动已按结束时间的非减序排列，算法只需O(n)的时间安排n个活动，使最多的活动能相容地使用公共资源。如果所给出的活动未按非减序排列，可以用O(nlogn)的时间重排。 例：设待安排的11个活动的开始时间和结束时间按结束时间的非减序排列如下：算法greedySelector 的计算过程如下图所示。图中每行相应于算法的一次迭代。阴影长条表示的活动是已选入集合A的活动，而空白长条表示的活动是当前正在检查相容性的活动。若被检查的活动i的开始时间Si小于最近选择的活动j的结束时间fi，则不选择活动i，否则选择活动i加入集合A中。贪心算法并不总能求得问题的整体最优解。但对于活动安排问题，贪心算法greedySelector却总能求得的整体最优解，即它最终所确定的相容活动集合A的规模最大。这个结论可以用数学归纳法证明。 证明如下：设E=｛0，1，2，…，n-1｝为所给的活动集合。由于E中活动安排安结束时间的非减序排列，所以活动0具有最早完成时间。首先证明活动安排问题有一个最优解以贪心选择开始，即该最优解中包含活动0.设a是所给的活动安排问题的一个最优解，且a中活动也按结束时间非减序排列，a中的第一个活动是活动k。如k=0，则a就是一个以贪心选择开始的最优解。若k&gt;0，则我们设b=a-｛k｝∪｛0｝。由于end[0] ≤end[k],且a中活动是互为相容的，故b中的活动也是互为相容的。又由于b中的活动个数与a中活动个数相同，且a是最优的，故b也是最优的。也就是说b是一个以贪心选择活动0开始的最优活动安排。因此，证明了总存在一个以贪心选择开始的最优活动安排方案，也就是算法具有贪心选择性质。 例题练手题目地址：点击打开链接 题目描述有若干个活动，第i个开始时间和结束时间是[Si,fi)，只有一个教室，活动之间不能交叠，求最多安排多少个活动？ 问题分析 开始最早的活动优先，目标是想尽早结束活动，让出教室。 然而， 这个显然不行，因为最早的活动可能很长，影响我们进行后面的活动。例如活动开始和结束时间分别为[0, 100), [1,2) ,[2, 3), [3, 4),[4,5]，安排［0，100)的这个活动之后，其他活动无法安排，可是最优解是安排除它外的4个活动。2. 短活动优先， 目标也是尽量空出教室。但是不难构造如下反例： [0,5) [5,10) [3, 7), 这里[3,7)最短，但如果我们安排了[3,7)，其它两个无法安排了。但是最优解显然是安排其它两个，而放弃[3,7)，可见这个贪心策略也是不行的。3. 最少冲突的活动优先， 既然上面安排活动是想减少冲突，那么如果我们优先安排冲突最少的活动可以么？至少从（1）和（2）看来，这个策略是有效的。真是对的么？ 尝试这个例子：[0,2) [2,4) [4,6) [6,8)[1,3) [1,3) [1,3) [3,5) [5,7) [5,7) [5,7)看一下[0,2) 和3个活动冲突——3个[1,3) [2,4)和4个活动冲突3个[1,3)和一个[3,5)[4,6)和也和4个活动冲突3个[5,7)和一个[3,5)[6,8)和3个活动冲突——3个[5,7) 下面[1,3)和[5,7)每个都和5个活动冲突，而[3,5)只和两个活动冲突——[2,4)和[4,6)。 那按照我们的策略应该先安排[3,5), 可是一旦选择了[3,5)，我们最多只可能安排3个活动。但明显第一行的4个活动都可以安排下来，所以这种策略也是不对的。4. 看似最不对的策略——结束时间越早的活动优先。这个策略是有效的，我们可以证明。假设最优解OPT中安排了m个活动，我们把这些活动也按照结束时间由小到大排序，显然是不冲突的。假设排好顺序后，这些活动是a(1) , a(2), a(3)….am 假设按照我们的贪心策略，选出的活动自然是按照结束时间排好顺序的，并且也都是不冲突的，这些活动是b(1), b(2) …b(n) 问题关键是，假设a(1) = b(1), a(2) = b(2)…. a(k) = b(k)，但是a(k+1) != b(k+1)，回答几个问题： b(k+1)会在a(k+2), a(k+3), …. a(m)中出现么？不会。因为b(k+1)的结束时间是最早的，即f(b(k+1)) &lt;= f(a(k+1)),而a(k+2), a(k+3), …. a(m)的开始时间和结束时间都在f(a(k+1))之后，所以b(k+1)不在其中。 b(k+1)和a(1), a(2), …. a(k) 冲突么？不冲突，因为a(1), a(2), …. a(k)就是b(1), b(2), …. b(k) b(k+1)和a(k+2), a(k+3), …. a(m)冲突么？不冲突，因为f(b(k+1)) &lt;= f(a(k+1))，而a(k+2), a(k+3), …. a(m)的开始时间都在f(a(k+1))之后，更在f(b(k+1))之后。 因此我们可以把a(k+1) 换成b(k+1)， 从而最优解和我们贪心得到的解多了一个相同的，经过一个一个替换，我们可以把最优解完全替换成我们贪心策略得到的解。 从而证明了这个贪心策略的最优性。最后，我们来提供输入输出数据，由你来写一段程序，实现这个算法，只有写出了正确的程序，才能继续后面的课程。 输入第1行：1个数N，线段的数量(2 &lt;= N &lt;= 10000)第2 - N + 1行：每行2个数，线段的起点和终点(-10^9 &lt;= S,E &lt;= 10^9) 输出输出最多可以选择的线段数量。 输入示例31 52 33 6 输出示例2 代码#include&lt;iostream&gt; #include&lt;cstdio&gt; #include&lt;cstring&gt; #include&lt;algorithm&gt; using namespace std; struct Node{ int start; int end; } a[10001]; /** 自定义的排序规则 */ bool cmp(Node x,Node y){ if(x.end&lt;y.end) return true; else if(x.end==y.end&amp;&amp;x.start&gt;y.start) return true; return false; } int main(){ int n; cin&gt;&gt;n; for(int i=0;i&lt;n;i++){ cin&gt;&gt;a[i].start&gt;&gt;a[i].end; } //a是待排序的数组的首地址，a+n是尾地址 //cmp是自定义排序规则 sort(a,a+n,cmp); int ans =0; int end = -1000000000; for(int i=0;i&lt;n;i++){ if(a[i].start&gt;=end){ ans++; end=a[i].end; } } cout&lt;&lt;ans&lt;&lt;endl; return 0; }参考文档 贪心算法与活动安排问题ACM–贪心算法–活动安排问题 我的博客即将同步至腾讯云+社区，邀请大家一同入驻：https://cloud.tencent.com/developer/support-plan?invite_code=1mf6rgkiph5g5","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://blog.yinuxy.com/categories/Algorithm/"}],"tags":[{"name":"最优子结构","slug":"最优子结构","permalink":"https://blog.yinuxy.com/tags/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84/"},{"name":"贪心算法","slug":"贪心算法","permalink":"https://blog.yinuxy.com/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"算法笔记（0001） - 【动态规划】图像压缩问题","slug":"Algorithm/Algorithm-1","date":"2019-10-26T03:37:16.000Z","updated":"2020-07-14T13:52:12.021Z","comments":true,"path":"/post/Algorithm/Algorithm-1/","link":"","permalink":"https://blog.yinuxy.com/post/Algorithm/Algorithm-1/","excerpt":"算法笔记（0001） - 【动态规划】图像压缩问题","text":"算法笔记（0001） - 【动态规划】图像压缩问题 问题描述在计算机中，常用像素点的灰度值序列{p1,p1,……pn}表示图像。其中整数pi,1&lt;=i&lt;=n，表示像素点i的灰度值。通常灰度值的范围是0-255。因此需要8位二进制数来表示一个像素。这个时候大家应该有了一些小的疑问：我能不能用更少的位数来表示灰度值？（因为有的灰度值并没有达到255这么大）所以我们引入了图像压缩算法来解决这个问题。不过在引入问题之前，我要在这里介绍一些算法设计的知识——我们要将灰度值序列分组，而每一组中所有的数就有可能是&lt;255的，所以我们就不需要用8位数字去表示像素大小了，但是分组会带来一个新的问题：我如何表示当前组中像素的个数和像素的位数呢（因为不是八位，所以要有一个数据来记录真正的位数）？这里我们引入两个固定位数的值来表示，①我们用3位数字来表示当前组的每一位像素的的位数②我们引入8来表示当前组中像素点的个数 因为我们在这里规定了一组中最多存储–&gt;0~255个数字，而一个灰度值最多有8位（2^3），所以我们可以用即3位数字来表示当前组的像素位数（注意这里都是二进制）压缩的原理就是把序列{p1,p1,……pn}进行设断点，将其分割成一段一段的。分段的过程就是要找出断点，让一段里面的像素的最大灰度值比较小，那么这一段像素(本来需要8位)就可以用较少的位(比如7位)来表示，从而减少存储空间。b代表bits,l代表length,分段是，b[i]表示每段一个像素点需要的最少存储空间(少于8位才有意义)，l[i]表示每段里面有多少个像素点，s[i]表示从0到i压缩为一共占多少存储空间。如果限制l[i]&lt;=255,则需要8位来表示l[i]。而b[i]&lt;=8，需要3位表示b[i]。所以每段所需的存储空间为l[i]*b[i]+11位。假设将原图像分成m段，那么需要位的存储空间。图像压缩问题就是要确定像素序列{p1,p1,……pn}的最优分段，使得依此分段所需的存储空间最小。 最优子结构设l[i],b[i],1&lt;=i&lt;=m是{p1,p1,……pn}的一个最优分段，则l[1],b[1]是{p1,……,pl[1]}的一个最优分段，且l[i],b[i],2&lt;=i&lt;=m是{pl[1]+1,……,pn}的一个最优分段。即图像压缩问题满足最优子结构性质。 递推关系设s[i],1&lt;=i&lt;=n是像素序列{p1,p1,……pi}的最优分段所需的存储位数，则s[i]为前i-k个的存储位数加上后k个的存储空间。由最优子结构性质可得：)式中 构造最优解数组l[i],b[i]记录了最优分段所需的信息最优分段的最后一段的段长度和像素位数分别存储在l[n]和b[n]中,其前一段的段长度和像素位数存储于l[n-l[n]]和b[n-l[n]]中，依此类推，可在O(n)时间内构造最优解。 算法设计{6, 5, 7,5, 245, 180, 28,28,19, 22, 25,20}这是一组灰度值序列。我们按照默认的解体方法来看—-一共12个数字，所以12*8=96位来表示。而下面我们将其进行分组：这里我们将他们分为三组： 第一组4个数，最大是7所以用3位表示； 第二组2个数，最大是245所以用8位表示； 第三组6个数，最大是28所以用5位表示； 这个时候，我们最后得到了最后的位数结果为：43+28+65+113=91。是不是优化了？？那我们算法应该怎么做来找最优的值呢？？下面我一步一步介绍。压缩过程中的数组存储：既然是DP问题，所以我们肯定需要数组来记录每一步的最优值。这里我们用S[i]来记录前i个数字的最优处理方式得到的最优解。l[i]中来记录第当前第i个数所在组中有多少个数。(因而只有每一组的最后一个l[x],存储有效)（这句话，暂时看不懂也没关系）b[i]中存第i个数的像素位数。 下面我写出来具体的递推过程–&gt;例题: 求像素序列4，6，5，7，129，138，1的最优分段。在解体过程中，我们知道在我们求s[3]的时候，我们是分三种情况—- 前三个数为一组，这个时候我需要的存储位数是3(位数)*3（每一组中数的个数）+11（每分一组所必须的固定位数） s[1]为单独一组，剩下的两个数字为一组，此时我所需要的空间为s[1]+2*3+11 前两个数字为一组，最后一个数为一组。此时我们要用s[2]（前面已经计算出的最优值）+3*1+11然后比较三个数的大小，取最小的那一种分组情况，然后记下l[3]=3（当前最优分组中是三个数在同一组中），b[3]=3（每一个像素所用的存储位数）递归到最后得到最优解为 58. 伪代码写完奉上压缩部分代码void Compress(int n,int p[],int s[],int l[],int b[]) { int Lmax = 256,header = 11; s[0] = 0; for(int i=1; i&lt;=n; i++) { b[i] = length(p[i]);//计算像素点p需要的存储位数 int bmax = b[i]; s[i] = s[i-1] + bmax + header; l[i] = 1; for(int j=2; j&lt;=i &amp;&amp; j&lt;=Lmax;j++) //最后一段含有一个像素，两个像素，所有像素 { //if(bmax&lt;b[i-j+1]) //最后一个b[i-j+1]有效，是前一段当中的最大值，并不是后一段中的最大值 if(bmax&lt;length(p[i-j+1])) { bmax = length(p[i-j+1]); } if(s[i]&gt;s[i-j]+j*bmax+header) { s[i] = s[i-j] + j*bmax+header; l[i] = j; b[i] = bmax; //我加，跟新当前组，所需的存储位数 } } } } 完整代码//代码参考：https://www.cnblogs.com/caiyishuai/p/8876077.html //dacao 2019/6/25 #include&lt;iostream&gt; #include&lt;cmath&gt; #include&lt;stack&gt; using namespace std; const int N = 7; int length(int i); void Compress(int n,int p[],int s[],int l[],int b[]); int TraceBack(int n,int l[],int b[]); //返回有多少个段 void Out(int m,int min_len,int l[],int b[]); int main() { //int p[] = {0,10,12,15,255,1,2};//图像灰度数组 下标从1开始计数 int p[] = {0,255,1,5,2,1,2}; int s[N]={0},l[N]={0},b[N]={0}; cout&lt;&lt;&quot;图像的灰度序列为：&quot;&lt;&lt;endl; for(int i=1;i&lt;N;i++) { cout&lt;&lt;p[i]&lt;&lt;&quot; &quot;; } cout&lt;&lt;endl; Compress(N-1,p,s,l,b); int m=TraceBack(N-1,l,b); Out(m,s[N-1],l,b); return 0; } void Compress(int n,int p[],int s[],int l[],int b[]) { int Lmax = 256,header = 11; s[0] = 0; for(int i=1; i&lt;=n; i++) { b[i] = length(p[i]);//计算像素点p需要的存储位数 int bmax = b[i]; s[i] = s[i-1] + bmax + header; l[i] = 1; for(int j=2; j&lt;=i &amp;&amp; j&lt;=Lmax;j++) //最后一段含有一个像素，两个像素，所有像素 { //if(bmax&lt;b[i-j+1]) //最后一个b[i-j+1]有效，是前一段当中的最大值，并不是后一段中的最大值 if(bmax&lt;length(p[i-j+1])) { bmax = length(p[i-j+1]); } if(s[i]&gt;s[i-j]+j*bmax+header) { s[i] = s[i-j] + j*bmax+header; l[i] = j; b[i] = bmax; //我加，跟新当前组，所需的存储位数 } } } } int length(int i) { int k=1; i = i/2; while(i&gt;0) { k++; i=i/2; } return k; //return ceil(log(i+1)/log(2)); } int TraceBack(int n,int l[],int b[]) //从后向前检查，因而之后对应段的，最后一个存储有效 { stack&lt;int&gt;ss; ss.push(l[n]); ss.push(b[n]); while (n!=0) { n=n-l[n]; ss.push(l[n]); //l[0]=0,也被压入栈中 ss.push(b[n]); } int i=0; while (!ss.empty()) { b[i]=ss.top(); ss.pop(); l[i]=ss.top(); //此时 ｌ[]，用来存储，第ｉ组中，元素个数 ss.pop(); i++; } return i-1; } void Out(int m,int min_len,int l[],int b[]) { int i=0; cout&lt;&lt;&quot;最小长度：&quot;&lt;&lt;min_len&lt;&lt;endl; cout&lt;&lt;&quot;共分成：&quot;&lt;&lt;m&lt;&lt;&quot;段&quot;&lt;&lt;endl; for(i=i+1;i&lt;=m;i++) { cout&lt;&lt;&quot;第一个段含有&quot;&lt;&lt;l[i]&lt;&lt;&quot;元素. &quot;&lt;&lt;&quot;需要存储位数&quot;&lt;&lt;b[i]&lt;&lt;endl; } } 参考文章 0016算法笔记——【动态规划】图像压缩问题图像压缩－－－动态规划动态规划之–图像压缩","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://blog.yinuxy.com/categories/Algorithm/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"https://blog.yinuxy.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"最优子结构","slug":"最优子结构","permalink":"https://blog.yinuxy.com/tags/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84/"},{"name":"重叠子问题","slug":"重叠子问题","permalink":"https://blog.yinuxy.com/tags/%E9%87%8D%E5%8F%A0%E5%AD%90%E9%97%AE%E9%A2%98/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"kettle 利用 HTTP Client 获取猫眼电影API近期上映相关信息，并解析json","slug":"TechShare/Kettle","date":"2019-10-17T11:13:47.000Z","updated":"2020-07-14T13:52:12.148Z","comments":true,"path":"/post/TechShare/Kettle/","link":"","permalink":"https://blog.yinuxy.com/post/TechShare/Kettle/","excerpt":"kettle 利用 HTTP Client 获取猫眼电影API近期上映相关信息，并解析json","text":"kettle 利用 HTTP Client 获取猫眼电影API近期上映相关信息，并解析json 前言Kettle 除了常规的数据处理之外，还可以模拟发送HTTP client/post ，REST client。 实验背景这周二老师布置了一项实验： 建立一个转换，实现一个猫眼API热映电影的json，生成为xls文件。猫眼的热门电影接口为： http://m.maoyan.com/#movie，从里面找到API接口：http://m.maoyan.com/ajax/movieOnInfoList。需要获取里面的：电影名、评分、主演、信息。 处理流程我使用的是kettle的HTTP GET 请求访问了猫眼电影提供的接口 HTTP Client 组件在kettle中的位置是： kettle 的处理流程为： 参数设置HTTP Client 为设置请求，HTTP client 通过url调用接口，有两种方式。第一种是直接给定 url，第二种通过步骤从前一步当中传 url 过来。调用之后返回的数据一般会以json的形式存在一个字段当中。我们可以通过设定“结果字段名”对获取后的 json 进行命名，方便下面操作。在调用HTTP client 时如果被拒绝访问时可以添加请求头。 kettle 解析jsonkettle 解析json主要通过 输入内的组件 json input 。使用该组件时，必须保证解析的json的格式完全符合自己编写的解析规则。读取本地文件解析无需勾选 源定义在一个字段里 。勾选之后可以从上个步骤当中获取包含json的字段 ，对其解析。该字段一般会是 http client 的 结果输出字段名 。HTTP client 解析时json 结构未知,需要我们自己书写解析规则。以下面的json 为例 ，我们需要获取 results 中的nm 、star、sc、showInfo、rt等信息对应的json解析规则如下 { &quot;coming&quot;:[] ,&quot;movieIds&quot;:[503342,1230121,1249366,342146,1277939,345419,1250700,1227005,1219701,1215348,1256872,1225993,1251174,296020,1178432,359377,1211270,345397,1190383,1260354,1245196,1243361,1277982,1240752,334625,78519,668097,1197625,1291398,1180993,1242130] ,&quot;stid&quot;:&quot;576591972453269000&quot; ,&quot;stids&quot;:[{&quot;movieId&quot;:503342,&quot;stid&quot;:&quot;576591972453269000_a503342_c0&quot;} ,{&quot;movieId&quot;:1230121,&quot;stid&quot;:&quot;576591972453269000_a1230121_c1&quot;} ,{&quot;movieId&quot;:1249366,&quot;stid&quot;:&quot;576591972453269000_a1249366_c2&quot;} ,{&quot;movieId&quot;:342146,&quot;stid&quot;:&quot;576591972453269000_a342146_c3&quot;} ,{&quot;movieId&quot;:1277939,&quot;stid&quot;:&quot;576591972453269000_a1277939_c4&quot;} ,{&quot;movieId&quot;:345419,&quot;stid&quot;:&quot;576591972453269000_a345419_c5&quot;} ,{&quot;movieId&quot;:1250700,&quot;stid&quot;:&quot;576591972453269000_a1250700_c6&quot;} ,{&quot;movieId&quot;:1227005,&quot;stid&quot;:&quot;576591972453269000_a1227005_c7&quot;} ,{&quot;movieId&quot;:1219701,&quot;stid&quot;:&quot;576591972453269000_a1219701_c8&quot;} ,{&quot;movieId&quot;:1215348,&quot;stid&quot;:&quot;576591972453269000_a1215348_c9&quot;} ,{&quot;movieId&quot;:1256872,&quot;stid&quot;:&quot;576591972453269000_a1256872_c10&quot;} ,{&quot;movieId&quot;:1225993,&quot;stid&quot;:&quot;576591972453269000_a1225993_c11&quot;}] ,&quot;total&quot;:31 ,&quot;movieList&quot;:[ {&quot;id&quot;:503342,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/c437c3e340eff266f5cc7dcc79bead6b2406517.jpg&quot;,&quot;version&quot;:&quot;v3d imax&quot;,&quot;nm&quot;:&quot;双子杀手&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:102860,&quot;star&quot;:&quot;威尔·史密斯,玛丽·伊丽莎白·温斯特德,克里夫·欧文&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;今天51家影院放映58场&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0} ,{&quot;id&quot;:1230121,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/cddf92d0ac6a0db837a1bc488b241c42267927.jpg&quot;,&quot;version&quot;:&quot;v2d imax&quot;,&quot;nm&quot;:&quot;中国机长&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:9.4,&quot;globalReleased&quot;:true,&quot;wish&quot;:561040,&quot;star&quot;:&quot;张涵予,欧豪,杜江&quot;,&quot;rt&quot;:&quot;2019-09-30&quot;,&quot;showInfo&quot;:&quot;今天126家影院放映1637场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0} ,{&quot;id&quot;:1249366,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/moviemachine/ff399baffe786445b96e4e3d24fe1eeb675719.jpg&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;航海王：狂热行动&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:337092,&quot;star&quot;:&quot;田中真弓,冈村明美,中井和哉&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;今天4家影院放映4场&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0} ,{&quot;id&quot;:342146,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/6392cd350d00860921042cdac7f2ed797389667.jpg&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;犯罪现场&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:8.9,&quot;globalReleased&quot;:true,&quot;wish&quot;:110692,&quot;star&quot;:&quot;古天乐,张继聪,宣萱&quot;,&quot;rt&quot;:&quot;2019-10-12&quot;,&quot;showInfo&quot;:&quot;今天125家影院放映1369场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0} ,{&quot;id&quot;:1277939,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/moviemachine/b2c5c74d33e45745fd3462e44b3698e18336620.jpg&quot;,&quot;version&quot;:&quot;v2d imax&quot;,&quot;nm&quot;:&quot;我和我的祖国&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:9.7,&quot;globalReleased&quot;:true,&quot;wish&quot;:578308,&quot;star&quot;:&quot;黄渤,张译,韩昊霖&quot;,&quot;rt&quot;:&quot;2019-09-30&quot;,&quot;showInfo&quot;:&quot;今天126家影院放映1201场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0} ,{&quot;id&quot;:345419,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p1.meituan.net/w.h/moviemachine/c68e3fff79463952b33cbc1e1b45442b1772992.jpg&quot;,&quot;version&quot;:&quot;v3d imax&quot;,&quot;nm&quot;:&quot;沉睡魔咒2&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:227645,&quot;star&quot;:&quot;安吉丽娜·朱莉,艾丽·范宁,切瓦特·埃加福特&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;今天34家影院放映34场&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0} ,{&quot;id&quot;:1250700,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/4c01895cfd53e82f7c3048c407974a6b4739229.jpg&quot;,&quot;version&quot;:&quot;v2d imax&quot;,&quot;nm&quot;:&quot;攀登者&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:9.4,&quot;globalReleased&quot;:true,&quot;wish&quot;:558579,&quot;star&quot;:&quot;吴京,章子怡,张译&quot;,&quot;rt&quot;:&quot;2019-09-30&quot;,&quot;showInfo&quot;:&quot;今天124家影院放映700场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0} ,{&quot;id&quot;:1227005,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/980cddbf2fe1296ae3657c968e536ea56541174.png&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;侠路相逢&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:24896,&quot;star&quot;:&quot;姜武,邵兵,姚娆&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;2019-10-18 本周五上映&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0} ,{&quot;id&quot;:1219701,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/c8c17eb7c9c82d189771e3bfdd4d95061444262.jpg&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;急速逃脱&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:7.7,&quot;globalReleased&quot;:true,&quot;wish&quot;:24799,&quot;star&quot;:&quot;沃坦·维尔克·默林,汉娜·赫茨施普龙,克里斯蒂安娜·保罗&quot;,&quot;rt&quot;:&quot;2019-10-12&quot;,&quot;showInfo&quot;:&quot;今天41家影院放映106场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0} ,{&quot;id&quot;:1215348,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/6bce8da6f1daa7f69bed91cd00b049a42186478.jpg&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;天作谜案&quot;,&quot;preShow&quot;:true,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:18799,&quot;star&quot;:&quot;西达尔特·马尔霍特拉,索娜什·辛哈,阿克夏耶·坎纳&quot;,&quot;rt&quot;:&quot;2019-10-25&quot;,&quot;showInfo&quot;:&quot;2019-10-25 下周五上映&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0} ,{&quot;id&quot;:1256872,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/db82e48befc1c7e2e98425165b2500d76222872.jpg&quot;,&quot;version&quot;:&quot;v3d&quot;,&quot;nm&quot;:&quot;为国而歌&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:8700,&quot;star&quot;:&quot;王雷,古力娜扎,海一天&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;2019-10-18 本周五上映&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0} ,{&quot;id&quot;:1225993,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/cbfd89ee598b5837c7d6b7bb6f6d9e0a1744668.jpg&quot;,&quot;version&quot;:&quot;v3d&quot;,&quot;nm&quot;:&quot;雪人奇缘&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:9.3,&quot;globalReleased&quot;:true,&quot;wish&quot;:59473,&quot;star&quot;:&quot;汪可盈,张子枫,丹增·诺盖·特雷纳&quot;,&quot;rt&quot;:&quot;2019-10-01&quot;,&quot;showInfo&quot;:&quot;今天38家影院放映57场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0}] }注意：在字段-&gt;路径中如果要传递的值在第二层，那么$后面有2个点号，不加的话可能会传递不了值","categories":[],"tags":[{"name":"kettle","slug":"kettle","permalink":"https://blog.yinuxy.com/tags/kettle/"},{"name":"HTTP Client","slug":"HTTP-Client","permalink":"https://blog.yinuxy.com/tags/HTTP-Client/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"POJ 1067-取石子游戏","slug":"OJContest/AlgorithmNote-2","date":"2019-10-09T12:30:00.000Z","updated":"2020-07-14T13:52:12.115Z","comments":true,"path":"/post/OJContest/AlgorithmNote-2/","link":"","permalink":"https://blog.yinuxy.com/post/OJContest/AlgorithmNote-2/","excerpt":"威佐夫博弈（Wythoff Game）/巴什博弈（Bash Game）","text":"威佐夫博弈（Wythoff Game）/巴什博弈（Bash Game） DescriptionTime Limit: 1000MS Memory Limit: 10000K Total Submissions: 1 Accepted: 1 有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。 Input输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。 Output输出对应也有若干行，每行包含一个数字1或0，如果最后你是胜者，则为1，反之，则为0。 Sample Input2 18 44 7 Sample Output010 SourceNOI 解题思路威佐夫博弈（Wythoff’s game），是ACM题中常见的组合游戏中的一种，大致上是这样的：比如有两堆石子，先设定一堆有 10，另一堆有 15 个，双方轮流取走一些石子，合法的取法有如下两种： 在一堆石子中取走任意多颗； 在两堆石子中取走相同多的任意颗； 约定取走最后一颗石子的人为赢家，求必胜策略。有两堆各若干个物品，两个人轮流从某一堆或同时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜。如果甲面对（0，0），那么甲已经输了，这种局势我们称为奇异局势。前几个奇异局势是：（0，0）、（1，2）、（3，5）、（4，7）、（6，10）.可以看出,a0=b0=0,ak是未在前面出现过的最小自然数,而 bk=ak+k. 那么任给一个局势（a，b），怎样判断它是不是奇异局势呢？我们有如下公式： ak =[k（1+√5）/2]，bk= ak + k （k=0，1，2，…,n 方括号表示取整函数)奇妙的是其中出现了黄金分割数（1+√5）/2 = 1。618…,因此,由ak，bk组成的矩形近似为黄金矩形，由于2/（1+√5）=（√5-1）/2，可以先求出j=[a（√5-1）/2]，若a=[j（1+√5）/2]，那么a = aj，bj = aj + j，若不等于，那么a = aj+1，bj+1 = aj+1+ j + 1，若都不是，那么就不是奇异局势。然后再按照上述法则进行，一定会遇到奇异局势。 奇异局势的性质 任何自然数都包含在一个且仅有一个奇异局势中。由于a[k]是未在前面出现过的最小自然数，所以有a[k] &gt; a[k-1] ，而 b[k]= a[k] + k &gt; a[k-1] + k &gt; a[k-1] + k - 1 = b[k-1] &gt; a[k-1] 。所以性质1成立。 任意操作都可将奇异局势变为非奇异局势。事实上，若只改变奇异局势（a[k]，b[k]）的某一个分量，那么另一个分量不可能在其他奇异局势中，所以必然是非奇异局势。如果使（a[k]，b[k]）的两个分量同时减少，则由于其差不变，且不可能是其他奇异局势的差，因此也是非奇异局势。 采用适当的方法，可以将非奇异局势变为奇异局势。假设面对的局势是（a,b），若 b = a，则同时从两堆中取走 a 个物体，就变为了奇异局势（0，0）；如果a = a[k] ，b &gt; b[k] 那么，取走b - b[k]个物体，即变为奇异局势；如果 a = a[k] ， b &lt; b[k] 则同时从两堆中拿走a-a[b-a]（注：这里b-a是a的下标， 不是a*(b-a)） 个物体变为奇异局势（ a[b-a], b-a+a[b-a]）；如果a &gt; a[k] ，b= a[k] + k 则从第一堆中拿走多余的数量a - a[k] 即可；如果a &lt; a[k] ，b= b[k],分两种情况，第一种，a=a[n] （n&lt; k）从第二堆里面拿走 b - b[n] 即可；第二种，a=b[n] （n &lt; k）从第二堆里面拿走 b - a[n] 即可。 源码Pythonfrom math import sqrt import sys def solution(a ,b): a = int(a) b = int(b) if a&lt;b : a ^= b b ^= a a ^= b k = a - b a = int(k * (1 + sqrt(5)) / 2.0) if a == b: print(&quot;0\\n&quot;) else: print(&quot;1\\n&quot;) for line in sys.stdin: line = line.strip() a, b = line.strip().split(&#39; &#39;) solution(a, b)C#include&lt;iostream&gt; #include&lt;cstdio&gt; #include&lt;cstring&gt; #include&lt;cmath&gt; using namespace std; int a,b; int main(){ //freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin); while(~scanf(&quot;%d%d&quot;,&amp;a,&amp;b)){ if(a&lt;b){ a^=b; b^=a; a^=b; } int k=a-b; a=(int)(k*(1+sqrt(5))/2.0); if(a==b) printf(&quot;0\\n&quot;); else printf(&quot;1\\n&quot;); } return 0;","categories":[{"name":"ACM解题报告","slug":"ACM解题报告","permalink":"https://blog.yinuxy.com/categories/ACM%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"}],"tags":[{"name":"ACM","slug":"ACM","permalink":"https://blog.yinuxy.com/tags/ACM/"},{"name":"Wythoff's game","slug":"Wythoff-s-game","permalink":"https://blog.yinuxy.com/tags/Wythoff-s-game/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"热烈庆祝中华人民共和国成立70周年","slug":"Activity/70th","date":"2019-10-01T00:30:00.000Z","updated":"2020-07-14T13:52:12.011Z","comments":true,"path":"/post/Activity/70th/","link":"","permalink":"https://blog.yinuxy.com/post/Activity/70th/","excerpt":"热烈庆祝中华人民共和国成立七十周年","text":"热烈庆祝中华人民共和国成立七十周年 热烈庆祝中华人民共和国成立七十周年 祝祖国母亲七十华诞生日快乐！","categories":[],"tags":[],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"Comet OJ - Contest  \\#11 eon题解","slug":"OJContest/AlgorithmNote-1","date":"2019-09-20T12:30:00.000Z","updated":"2020-07-14T13:52:12.111Z","comments":true,"path":"/post/OJContest/AlgorithmNote-1/","link":"","permalink":"https://blog.yinuxy.com/post/OJContest/AlgorithmNote-1/","excerpt":"在一上来动不动就用循环体我就剁手！","text":"在一上来动不动就用循环体我就剁手！ 题目描述「这次练习用的数也太大了吧，我怎么记得住。」线段树小声嘀咕着，「我用所有的手指也只能数到 10231023 。」 「这可不是数据结构会作出的发言。」链表指引着面前的少女把数写进她的本体——一棵二叉树的图样中。有光自最浅的节点倾泻而下。「接下来你应该把这个十进制数按数位拆开，重新排列出一个最大的数，然后算出这个数和原数的差。」她正要问线段树是否听懂了任务，却被线段树的发问打断了。 「上一代数据结构，他们会区间排序，能轻松地击溃那些题目，是这样吗？他们于代码的溪流中降生，在算法的庇佑下抽枝长叶，以天赐的技巧征服了我们一代至今无法涉足的外界，是这样吗？」 链表沉默半晌，转移了话题：「你还不会输出，那便直接告诉我练习的答案对 10 取模的值。」 你对这个种族的历史毫无兴趣，只想知道练习题的答案，也就是说—— 简洁题意：对于一个数 nn ，记 mm 为把 nn 的各数位重排序得到的最大的数，求 m-nm−n 对 1010 取模的值(也就是 m-nm−n 除以 10 的余数)。 举例来说，当 n=213 时， 各数位重排序有 123、132、213、231、312、321 六种可能，其中最大的数字是 321 ，所以 m=321，输出的答案即为 (m-n) = 108 对 10 取模的结果，也就是 8。 输入描述一行一个整数 n (0 &lt; n &lt; 10106 ,也就是说 n 是位数不超过 10n6 的正整数。)。 输出描述一个整数，表示答案。 样例输入 1 样例输出 1 213 8 样例解释 1此样例的解释在题目描述里。 样例输入 2 样例输出 2 71806291 9 样例解释 2答案为 98762110−71806291=26955819≡9(mod10) 。 样例输入 2 样例输出 2 12345678912345678912345 6 样例解释 3请特别注意， n 的值可能非常大，无法用 32-bits 或 64-bits 整数储存。 解题思路一看到这个题第一眼我以为就是卡数据想都没想就选了Python用了两个循环就交了，结果当然是WA了，结果卡出1900ms，后来仔细审了下题，因本题数据非常大，而且所求只与数位有关，然后结果就是最大数的最低位（即原数的数位的最小值）和原数最低位的差。这样它的时间复杂度就为O(n)。 源码Pythonnum = input() num = list(num) for i in num: i = int(i) minnum = min(num) print((int(minnum) - int(num[len(num)-1]))%10)C#include &lt;bits/stdc++.h&gt; using namespace std; typedef unsigned long long ull; const int N=1e7; int a[N]; int main(){ string s; cin&gt;&gt;s; int x=s.size(); int y; y=s[x-1]-&#39;0&#39;; int minn=0x3f3f3f3f; for(int i=0;i&lt;s.size();i++) { if(s[i]-&#39;0&#39;&lt;minn) minn=s[i]-&#39;0&#39;; } int p=minn-y; if(p==0) cout&lt;&lt;0; else cout&lt;&lt;p+10; }","categories":[{"name":"ACM解题报告","slug":"ACM解题报告","permalink":"https://blog.yinuxy.com/categories/ACM%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://blog.yinuxy.com/tags/%E6%95%B0%E8%AE%BA/"},{"name":"ACM","slug":"ACM","permalink":"https://blog.yinuxy.com/tags/ACM/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"用Python来分析一波周董新曲《说好不哭》为何如此火爆！","slug":"Script/dontCry","date":"2019-09-20T12:30:00.000Z","updated":"2020-07-14T13:52:12.122Z","comments":true,"path":"/post/Script/dontCry/","link":"","permalink":"https://blog.yinuxy.com/post/Script/dontCry/","excerpt":"用Python来分析一波周董新曲《说好不哭》为何如此火爆！","text":"用Python来分析一波周董新曲《说好不哭》为何如此火爆！ 9 月 16 日晚间，周董在朋友圈发布了最新单曲《说好不哭》 发布后，真的让一波人哭了 一群想抢鲜听的小伙伴直接泪奔 因为 QQ 音乐直接被搞崩了 没想到干翻 QQ 音乐的不是网易云音乐 也不是虾米音乐 而是周董！ 周董成成功地凭一己之力干翻了 QQ 音乐 那么听过周董新歌后的小伙伴都是怎么评价的呢？ 这里，我们获取了 QQ 音乐的近 20W 条评论数据进行分析 看看其中有哪些有趣的东西 一、数据获取1、请求分析在 QQ 网页版直接搜索『说好不哭』很容易就能找到单曲页面 说好不哭 拉到页面最下方可以看到评论的分页查看按钮 分页查看 按下 F12 点击第二页在请求流中就可以看到对应的请求 评论请求 其中可以看到两个重要参数：&lt;fontcolor = “FF0000”&gt;pagenum 和 &lt;fontcolor = “FF0000”&gt;pagesize 将请求 copy 到 Postman 中进行测试 Postman测试 发现可以直接获取到数据连 Header 都不需要添加这里尝试对请求参数进行了精简最终只需要如下几个参数即可 参数精简 从 Postman 中可以直接获取到对应的代码 import requests url = &quot;https://c.y.qq.com/base/fcgi-bin/fcg_global_comment_h5.fcg&quot; querystring = {&quot;biztype&quot;:&quot;1&quot;,&quot;topid&quot;:&quot;237773700&quot;,&quot;cmd&quot;:&quot;8&quot;,&quot;pagenum&quot;:&quot;1&quot;,&quot;pagesize&quot;:&quot;25&quot;} response = requests.request(&quot;GET&quot;, url, params=querystring) print(response.text)这里是单页评论的获取所有评论的获取只需递增 pagenum 即可 2、数据解析返回数据中有很多暂时不需要的字段这里我们只取其中的用户名、评论时间、评论内容、点赞数对应如下字段 { &quot;nick&quot;: &quot;丨那壹刻永遠消失\\&quot;\\&quot;&quot;, &quot;praisenum&quot;: 1, &quot;rootcommentcontent&quot;: &quot;越听越好听怎么回事！&quot;, &quot;time&quot;: 1568729836, }由于数据量较大 这里我们暂时将数据存放在 Excel 中一来无须依赖外部数据库二来可以使用 Excel 对数据进行二次处理数据存储代码如下： def file_do(list_info, file_name): # 获取文件大小 if not os.path.exists(file_name): wb = openpyxl.Workbook() page = wb.active page.title = &#39;jay&#39; page.append([&#39;昵称&#39;,&#39;时间&#39;,&#39;点赞数&#39;,&#39;评论&#39;]) else: wb = openpyxl.load_workbook(file_name) page = wb.active for info in list_info: try: page.append(info) except Exception: print(info) wb.save(filename=file_name)二、数据可视化1、各时段的评论数首先我们对评论按小时区间进行汇总由于时间粒度比较小，这里对时间粒度进行了一些处理 评价人数走势图 周董的新曲是在 9.16 号 23 点准时发布的可以看出在发布后的一个小时内（23:00-24:00）评论数量达到了高峰占了总评论数的一半以上另外看了一眼 9.16 23 点之前的评论也很有意思 一种搬好小板凳嗑着瓜子坐等的既视感 2、大家都在说什么词云生成的方法有很多可以用代码生成也可以用一些在线工具这里我就使用了在线词云工具：wordart后续可以给大家单独再普及一下生成效果如下 词云 周杰伦、杰伦字眼很明显还有大量跑来『打卡』的『好听』、『来了』、『哭了』、『爱了』其中少不了的还有『青春』另外『阿信』的出现估计给了很多人惊喜 3、大家都点赞了哪些评论我们以点赞数对评论进行了排序排名靠前的评论是如下一些 评论排名 另外，QQ 音乐官方也会放出精彩评论 热心网友昀恺丶 凉城 蜗牛.. 对比下可以看出和我们获取到的数据是比较一致的只不过官方并不是按点赞个数进行排名的看得出来这些排名靠前的大都是在回忆青春这些评论之所以能够得到大家的共鸣也许他们的青春里都有一个周杰伦吧 三、附件QQ音乐《说好不哭》评论抓取 四、源码1、评论爬取源码import requests,json,time,uuid,os,openpyxl import re from openpyxl.cell.cell import ILLEGAL_CHARACTERS_RE info_list = [] def get_comment_info(): global info_list pagenum = 1 while(True): print(pagenum) url = &quot;https://c.y.qq.com/base/fcgi-bin/fcg_global_comment_h5.fcg&quot; querystring = {&quot;biztype&quot;:&quot;1&quot;,&quot;topid&quot;:&quot;237773700&quot;,&quot;cmd&quot;:&quot;8&quot;,&quot;pagenum&quot;:pagenum,&quot;pagesize&quot;:&quot;25&quot;} response = requests.request(&quot;GET&quot;, url, params=querystring) resp = json.loads(response.text) commentlist = resp.get(&#39;comment&#39;).get(&#39;commentlist&#39;) if not commentlist or len(commentlist) == 0: return for comment in commentlist: info = [] one_name = comment.get(&#39;nick&#39;) # 将 UNIX 时间戳转化为普通时间格式 if comment.get(&#39;time&#39;) &lt; 1568735760: return time_local = time.localtime(comment.get(&#39;time&#39;)) one_time = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time_local) one_praisenum = comment.get(&#39;praisenum&#39;) one_comment = comment.get(&#39;rootcommentcontent&#39;) ILLEGAL_CHARACTERS_RE.sub(r&#39;&#39;, one_comment) ILLEGAL_CHARACTERS_RE.sub(r&#39;&#39;, one_name) info = [one_name, one_time, one_praisenum, one_comment] # print(info) info_list.append(info) pagenum += 1 # print(comment.get(&#39;nick&#39;)) # print(comment.get(&#39;rootcommentcontent&#39;)) # print(comment.get(&#39;time&#39;)) # print(comment.get(&#39;praisenum&#39;)) def file_do(file_name): # 获取文件大小 if not os.path.exists(file_name): wb = openpyxl.Workbook() page = wb.active page.title = &#39;jay&#39; page.append([&#39;昵称&#39;,&#39;时间&#39;,&#39;点赞数&#39;,&#39;评论&#39;]) else: wb = openpyxl.load_workbook(file_name) page = wb.active for info in info_list: try: page.append(info) except Exception: print(info) pass continue wb.save(filename=file_name) if __name__ == &quot;__main__&quot;: file_name = str(uuid.uuid1()) + &#39;.xlsx&#39; get_comment_info() file_do(file_name) print(&#39;data has saved in {}&#39;.format(file_name)) 2、生成HTML图表源码# 导入Style类，用于定义样式风格 from pyecharts import Style import json # 导入Geo组件，用于生成柱状图 from pyecharts import Bar # 导入Counter类，用于统计值出现的次数 from collections import Counter import fileinput,re # 设置全局主题风格 from pyecharts import configure configure(global_theme=&#39;wonderland&#39;) # 数据可视化 dates = [] comment_text = &quot;&quot; def render(): global comment_text with open(&#39;jay.csv&#39;, mode=&#39;r&#39;, encoding=&#39;utf-8&#39;) as f: rows = f.readlines() for row in rows[1:]: if row.count(&#39;,&#39;) != 3: continue elements = row.split(&#39;,&#39;) user = elements[0] date = elements[1] if &#39;2019&#39; not in date: continue like = elements[2] comment = elements[3] if &#39;2019-09-14&#39; in date: dates.append(&#39;2019-09-14&#39;) elif &#39;2019-09-15&#39; in date: dates.append(&#39;2019-09-15&#39;) elif &#39;2019-09-16 0&#39; in date or &#39;2019-09-16 1&#39; in date or &#39;2019-09-16 20&#39; in date or &#39;2019-09-16 21&#39; in date: dates.append(&#39;2019-09-16 0-21&#39;) elif &#39;2019-09-18&#39; in date: continue else: dates.append(date) comment_text += comment with open(&quot;comment_text.txt&quot;,&quot;w&quot;, encoding=&#39;utf-8&#39;) as f: f.write(comment_text) date_data = Counter(dates).most_common() # 按日期进行排序 date_data = sorted(date_data) # print(data) # 根据评分数据生成柱状图 bar = Bar(&#39;评价人数走势图&#39;, &#39;数据来源：QQ音乐网页版&#39;, title_pos=&#39;center&#39;, width=800, height=600) attr, value = bar.cast(date_data) bar.add(&#39;&#39;, attr, value, is_visualmap=False, visual_range=[0, 3500], visual_text_color=&#39;#fff&#39;, is_more_utils=True, xaxis_interval=0, xaxis_rotate=30,is_label_show=True,xaxis_label_textsize=8, label_text_size=8) bar.render( &#39;picture\\评价人数走势图.html&#39;) render() 最后，一起来听一下这首歌吧~ 土豪通道平民通道","categories":[{"name":"Python","slug":"Python","permalink":"https://blog.yinuxy.com/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blog.yinuxy.com/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://blog.yinuxy.com/tags/%E7%88%AC%E8%99%AB/"},{"name":"数据分析","slug":"数据分析","permalink":"https://blog.yinuxy.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"Windows(10)环境下搭建JSP开发环境","slug":"Experience/jspEnvBulid","date":"2019-09-04T00:30:00.000Z","updated":"2020-04-01T05:11:16.342Z","comments":true,"path":"/post/Experience/jspEnvBulid/","link":"","permalink":"https://blog.yinuxy.com/post/Experience/jspEnvBulid/","excerpt":"JSP是Java Server Page的缩写，是由Sun Microsystems公司主导创建的一种动态网页技术标准。JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成HTML、XML或其他格式文档的Web网页，然后返回给请求者。JSP技术以Java语言作为脚本语言，为用户的HTTP请求提供服务，并能与服务器上的其它Java程序共同处理复杂的业务需求。目前，JSP已经成为开发动态网站的主流技术。","text":"JSP是Java Server Page的缩写，是由Sun Microsystems公司主导创建的一种动态网页技术标准。JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成HTML、XML或其他格式文档的Web网页，然后返回给请求者。JSP技术以Java语言作为脚本语言，为用户的HTTP请求提供服务，并能与服务器上的其它Java程序共同处理复杂的业务需求。目前，JSP已经成为开发动态网站的主流技术。 安装配置JSP运行环境一、 安装配置JDK进入JDK官网选择Java SE Development Kit 8u172，根据自己的电脑选择32位或者64位进行下载。具体配置教程参考《java环境变量 的配置与详解（全网最详细教程）》 二、 安装配置Tomcat1、进入Tomcat官网安装下载,点击“32-bit/64-bit Windows Service Installer (pgp, sha512)”。2、下载完毕后，就可以在需要编译和运行Java程序的计算机安装Tomcat服务器，具体步骤如下：（1） 双击“apache-tomcat-9.0.24.exe”文件开始安装。在弹出的安装向导对话框中，单击“Next”按钮，将弹出如下图所示的“许可协议”对话框。一直next就行 （2） 这里采用默认的组件安装，如果不懂就按默认的设置。 （3） 这里是Tomcat默认的端口号，不喜欢这个可以自己设置成别的，但是千万别与系统端口号重复！（4）接下来就一直next就行，路径默认就行。 三、 Tomcat环境变量Catalina_Home配置1、CATALINA_HOME是TOMCAT安装路径的别名，目的是为了方便使用TOMCAT 2、计算机&gt;属性&gt;环境变量, 新建环境变量。变量名为CATALINA_HOME ,变量值tomcat的解压目录，我电脑上的为：“D:\\Function\\Apache Software Foundation\\Tomcat 9.0”，注意后面不用多加“\\”或者“;” 3、在环境变量Path中，新增加“%CATALINA_HOME%\\bin\\”4、打开你放置刚才下载的Tomcat的bin目录，找到“startup.bat”文件双击，然后就会弹出一个DOS窗口显示Tomcat启动的进程状态。 5、测试Tomcat是否配置成功：打开浏览器，输入在地址栏中输入：localhost:8080运行结果如下图所示即为配置成功！（因为Tomcat已经在运行再次打开会报错）6、关闭tomcat:进入命令行cmd，输入shutdown.bat 四、Eclipse的安装配置1、进入eclipse官网下载eclipse-inst-win64.exe 根据自己的系统版本选择镜像下载选择国内镜像下载 2、运行eclipse-inst-win64.exe 选择第一个选择Java目录和eclipse安装目录，然后点击install 3、安装完成后打开eclipse如果新建项目中没有Web选项，这时候就需要我们自己去添加web插件 4、添加Web插件：依次点击【Help】-&gt;【Install New Software】，在【work with】下拉框中选择自己的eclipse版本在下面的下拉框中勾选 Web, XML, Java EE and OSGi Enterprise Development； 然后点击next，耐心等待下载在这一步的时候点击同意，然后点击finish 安装这几个插件，耐心等待……..安装完成之后，会自动弹出对话框让你重启eclipse，重启下就行，此时，就可以新建web项目了 五、新建jsp文件1、新建jsp文件：依次点击【File】-&gt;【New】-&gt;【Project】；在弹出的列表中点击Web，选择 【Dynamic Web Project】 然后点击【Next】输入项目名，然后点击【Finish】 然后打开创建的项目，选择【WebContent】右键新建【JSP File】 新建的文件报错 接下来添加Tomcat：点击【Server】，再点击蓝色字体，在弹出的列表框中点击【Apache】，选择你安装的Tomcat，这里我安装的是【Tomcat v9.0.24】，然后点击next 右键点击项目—&gt;【Build Path】—&gt;【Configure Build Path】点击【libraries】-&gt;【Add Library】-&gt;【Server Runtime】-&gt;【Next】-&gt;【Finish】-&gt;【Apply and Close】 接下来更改编码：导航栏点击【Windows】-&gt;【Preference】-&gt;【JSP File】 Encoding选择“UTF-8”，然后点击应用并关闭 在这里需要选择安装的Tomcat的文件路径，填好后点击Next 点击创建的项目名即可添加到配置中，然后点击Finish 接下来就可以创建一个简单的JSP实例来测试拉； &lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; contentType=&quot;text/html; charset=UTF-8&quot;%&gt; &lt;% String path = request.getContextPath(); String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;; %&gt; &lt;% //计算1-100之间的和,并输出 到客户端浏览器中 int sum=0; for(int i=1;i&lt;=100;i++) sum+=i; out.print(&quot;1-100的和为：&quot;+sum+&quot;\\n&quot;); %&gt; &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt; &lt;html&gt; &lt;head&gt; &lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt; &lt;title&gt;My JSP &#39;GreetingJsp.jsp&#39; starting page&lt;/title&gt; &lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt; &lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt; &lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt; &lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&gt; &lt;meta http-equiv=&quot;description&quot; content=&quot;This is my page&quot;&gt; &lt;!-- &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt; --&gt; &lt;/head&gt; &lt;body&gt; &lt;br&gt;这是我的第一个JSP页面 &lt;br&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;7&lt;/td&gt; &lt;td&gt;8&lt;/td&gt; &lt;td&gt;9&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;5&lt;/td&gt; &lt;td&gt;6&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;3&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt;右键【Run As】-&gt;【Run on Server】运行成功！一个简单的JSP页面就生成啦 复制蓝色背景内的链接，打开浏览器即可预览啦","categories":[{"name":"网站开发","slug":"网站开发","permalink":"https://blog.yinuxy.com/categories/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"JSP","slug":"JSP","permalink":"https://blog.yinuxy.com/tags/JSP/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"matplotlib - Pyplot 教程","slug":"Experience/matplotlib-2","date":"2019-08-10T00:30:00.000Z","updated":"2020-07-14T13:52:12.092Z","comments":true,"path":"/post/Experience/matplotlib-2/","link":"","permalink":"https://blog.yinuxy.com/post/Experience/matplotlib-2/","excerpt":"提供类似MATLAB的绘图框架。","text":"提供类似MATLAB的绘图框架。 Pyplot 教程关于pylot接口的介绍。 pyplot 简介matplotlib.pyplot 是命令样式函数的集合，使matplotlib像MATLAB一样工作。 每个pyplot函数对图形进行一些更改：例如，创建图形，在图形中创建绘图区域，在绘图区域中绘制一些线条，用标签装饰图形等。 在matplotlib.pyplot中，各种状态在函数调用中保留，以便跟踪当前图形和绘图区域等内容，并且绘图函数指向当前轴（请注意“轴”在此处以及在大多数位置 文档是指图形的轴部分，而不是多个轴的严格数学术语。 注意: pyplot API通常不如面向对象的API灵活。您在此处看到的大多数函数调用也可以作为Axes对象中的方法调用。 我们建议您浏览教程和示例以了解其工作原理。 使用pyplot生成可视化非常快速： import matplotlib.pyplot as plt plt.plot([1, 2, 3, 4]) plt.ylabel(&#39;some numbers&#39;) plt.show() &lt;Figure size 640x480 with 1 Axes&gt;您可能想知道为什么x轴的范围是0-3，y轴的范围是1-4。如果为plot()命令提供单个列表或数组，则matplotlib假定它是一系列y值，并自动为您生成x值。由于python范围以0开头，因此默认的x向量与y具有相同的长度，但从0开始。因此x数据为 [0,1,2,3]。 plt.plot([1, 2, 3, 4], [1, 4, 9, 16]) [&lt;matplotlib.lines.Line2D at 0x1de069a2a20&gt;] 格式化绘图的样式对于每对x，y对的参数，有一个可选的第三个参数，它是指示绘图的颜色和线型的格式字符串。格式字符串的字母和符号来自MATLAB，您可以将颜色字符串与线型字符串连接起来。默认格式字符串为“b-”，为蓝色实线。例如，要用红色圆圈绘制上述内容，您将发出： #plt.plot(x,y,format_string,**kwargs) #x轴数据，y轴数据，format_string控制曲线的格式字串 #format_string 由颜色字符，风格字符，和标记字符 plt.plot([1, 2, 3, 4], [1, 4, 9, 16], &#39;ro&#39;) plt.axis([0, 6, 0, 20]) plt.show() 有关线型和格式字符串的完整列表，请参阅 plot() 文档。 上例中的 axis() 命令采用 [xmin, xmax, ymin, ymax] 列表并指定轴的视口。 如果matplotlib仅限于使用列表，那么数字处理将毫无用处。通常，您将使用numpy数组。实际上，所有序列都在内部转换为numpy数组。 下面的示例说明了使用数组在一个命令中绘制具有不同格式样式的多行。 import numpy as np # 每隔200ms均匀采样一次 t = np.arange(0., 5., 0.2) # 红色的破折号，蓝色的正方形和绿色的三角形 plt.plot(t, t, &#39;r--&#39;, t, t**2, &#39;bs&#39;, t, t**3, &#39;g^&#39;) plt.show() 使用关键字字符串绘图在某些情况下，您可以使用允许您使用字符串访问特定变量的格式的数据。例如，使用 numpy.recarray 或pandas.DataFrame。 Matplotlib允许您使用data关键字参数提供此类对象。如果提供，那么您可以生成包含与这些变量对应的字符串的图。 matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, *, data=None, **kwargs)x，y：表示的是大小为(n,)的数组，也就是我们即将绘制散点图的数据点s:是一个实数或者是一个数组大小为(n,)，这个是一个可选的参数。c:表示的是颜色，也是一个可选项。默认是蓝色’b’,表示的是标记的颜色，或者可以是一个表示颜色的字符，或者是一个长度为n的表示颜色的序列等等，感觉还没用到过现在不解释了。但是c不可以是一个单独的RGB数字，也不可以是一个RGBA的序列。可以是他们的2维数组（只有一行）。marker:表示的是标记的样式，默认的是’o’。cmap:Colormap实体或者是一个colormap的名字，cmap仅仅当c是一个浮点数数组的时候才使用。如果没有申明就是image.cmapnorm:Normalize实体来将数据亮度转化到0-1之间，也是只有c是一个浮点数的数组的时候才使用。如果没有申明，就是默认为colors.Normalize。vmin,vmax:实数，当norm存在的时候忽略。用来进行亮度数据的归一化。alpha：实数，0-1之间。linewidths:也就是标记点的长度。 data = {&#39;a&#39;: np.arange(50), &#39;c&#39;: np.random.randint(0, 50, 50), &#39;d&#39;: np.random.randn(50)} data[&#39;b&#39;] = data[&#39;a&#39;] + 10 * np.random.randn(50) data[&#39;d&#39;] = np.abs(data[&#39;d&#39;]) * 100 plt.scatter(&#39;a&#39;, &#39;b&#39;, c=&#39;c&#39;, s=&#39;d&#39;, data=data) plt.xlabel(&#39;entry a&#39;) plt.ylabel(&#39;entry b&#39;) plt.show() data = {&#39;a&#39;: np.arange(50), &#39;c&#39;: np.random.randint(0, 50, 50), &#39;d&#39;: np.random.randn(50)} print(data) data[&#39;b&#39;] = data[&#39;a&#39;] + 10 * np.random.randn(50) data[&#39;d&#39;] = np.abs(data[&#39;d&#39;]) * 100 print(data) {&#39;a&#39;: array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), &#39;c&#39;: array([47, 5, 29, 21, 15, 12, 29, 23, 10, 25, 26, 45, 32, 30, 37, 27, 43, 9, 26, 45, 48, 14, 23, 30, 22, 0, 5, 47, 21, 26, 35, 7, 2, 19, 24, 41, 26, 9, 20, 16, 15, 29, 23, 4, 21, 12, 23, 30, 41, 19]), &#39;d&#39;: array([ 0.91474741, 1.4102975 , -0.09708013, -1.47629846, -1.57769092, -0.46290149, 1.23430367, 0.38467709, -0.01272562, -1.44240598, -0.21927709, -0.30498565, -0.11862153, -1.24972745, -1.32424128, -1.5610827 , 1.26963903, 0.62084676, -1.0549506 , 0.37044246, -0.39299613, 0.42897231, -0.33461671, -0.86706857, -0.76486767, -1.3074562 , -0.33973554, -1.08680383, 0.27878669, 1.0599157 , -0.38176051, 0.79680669, -0.6874751 , 1.38240815, -0.1344723 , 0.7627456 , 0.36115735, 0.83799247, 0.02523584, 0.81839594, -0.77025921, -0.06682006, 0.06934268, 0.36251595, -0.99875799, 1.23386736, -0.32016664, 0.45225071, 0.55994446, 0.47643056])} {&#39;a&#39;: array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), &#39;c&#39;: array([47, 5, 29, 21, 15, 12, 29, 23, 10, 25, 26, 45, 32, 30, 37, 27, 43, 9, 26, 45, 48, 14, 23, 30, 22, 0, 5, 47, 21, 26, 35, 7, 2, 19, 24, 41, 26, 9, 20, 16, 15, 29, 23, 4, 21, 12, 23, 30, 41, 19]), &#39;d&#39;: array([ 91.4747409 , 141.02975036, 9.70801323, 147.6298458 , 157.76909222, 46.29014854, 123.43036704, 38.46770907, 1.27256168, 144.24059782, 21.92770893, 30.49856537, 11.86215303, 124.972745 , 132.42412769, 156.10827022, 126.96390267, 62.0846764 , 105.49506 , 37.0442464 , 39.29961326, 42.89723069, 33.46167088, 86.70685708, 76.48676738, 130.74561997, 33.97355351, 108.68038257, 27.87866927, 105.9915699 , 38.17605117, 79.68066907, 68.74750955, 138.2408153 , 13.44723023, 76.27455996, 36.1157352 , 83.79924741, 2.52358383, 81.83959391, 77.02592105, 6.68200567, 6.93426756, 36.25159505, 99.87579944, 123.38673588, 32.01666378, 45.22507109, 55.99444581, 47.6430561 ]), &#39;b&#39;: array([ 4.62276015, 7.74528096, -4.77823695, -11.7847356 , 18.05816585, -8.1731315 , 4.98414606, 18.1539417 , 11.06732176, 15.32465307, 5.923213 , 6.77520583, -8.72986134, 19.414693 , 22.05933889, 10.92443259, 16.1005237 , 28.55305548, 7.16710341, 19.82975597, 35.25631478, 13.32137703, 9.26598849, 14.25528353, 17.70779422, 18.62234998, 41.83152657, 26.02409203, 23.25997035, 20.38161932, 2.84095495, 36.00225335, 46.69340509, 22.75167791, 34.33249818, 25.09595488, 41.37140253, 16.54690243, 32.4532621 , 31.12442736, 40.99257063, 49.49197597, 55.91868808, 55.13338215, 33.1365961 , 48.95821962, 25.50538193, 58.72572039, 49.63841177, 41.7925894 ])}用分类变量绘图也可以使用分类变量创建绘图。Matplotlib允许您将分类变量直接传递给许多绘图函数。例如： names = [&#39;group_a&#39;, &#39;group_b&#39;, &#39;group_c&#39;] values = [1, 10, 100] # 表示figure 的大小为宽、长（单位为inch） plt.figure(1, figsize=(18, 6)) # plt.subplot(ABC)表示第A行,B图形的总数量，C第几个图形 plt.subplot(131) # 直方图 plt.bar(names, values) plt.subplot(132) #散点图 plt.scatter(names, values) plt.subplot(133) #折线图 plt.plot(names, values) plt.suptitle(&#39;Categorical Plotting&#39;) plt.show() 控制线的属性线可以设置许多属性：linewidth，dash style，antialiased等; 请参阅 matplotlib.lines.Line2D。 有几种方法可以设置线属性。 使用关键字args： plt.plot(x, y, linewidth=2.0)使用Line2D实例的setter方法。 plot返回Line2D对象列表; 例如，line1，line2 = plot（x1，y1，x2，y2）。 在下面的代码中，我们假设我们只有一行，因此返回的列表的长度为1.我们使用tuple解压缩为line，以获取该列表的第一个元素： line, = plt.plot(x, y, &#39;-&#39;) line.set_antialiased(False) # turn off antialising使用 setp() 命令。 下面的示例使用MATLAB样式命令在行列表上设置多个属性。setp透明地使用对象列表或单个对象。您可以使用python关键字参数或MATLAB样式的字符串/值对： lines = plt.plot(x1, y1, x2, y2) # use keyword args plt.setp(lines, color=&#39;r&#39;, linewidth=2.0) # or MATLAB style string value pairs plt.setp(lines, &#39;color&#39;, &#39;r&#39;, &#39;linewidth&#39;, 2.0)以下是可用的Line2D属性。 属性 值类型 alpha float animated [True | False] antialiased 或 aa [True | False] clip_box matplotlib.transform.Bbox实例 clip_on [True | False] clip_path 路径实例和变换实例(修补程序) color 或 c 任何Matplotlib颜色 contains the hit testing function dash_capstyle ['butt' | 'round' | 'projecting'] dash_joinstyle ['miter' | 'round' | 'bevel'] dashes 以点为单位的开/关油墨顺序 data (np.array xdata, np.array ydata) figure matplotlib.quire.Figure实例 label 任何字符串 linestyle or ls [ '-' | '--' | '-.' | ':' | 'steps' | ...] linewidth or lw 浮点值 lod [True | False] marker [ '+' | ',' | '.' | '1' | '2' | '3' | '4' ] markeredgecolor or mec 任何Matplotlib颜色 markeredgewidth or mew 浮点值 markerfacecolor or mfc 任何Matplotlib颜色 markersize or ms 浮点数 markevery [ None | integer | (startind, stride) ] picker 用于交互式选线 pickradius 线拾取选择半径 solid_capstyle ['butt' | 'round' | 'projecting'] solid_joinstyle ['miter' | 'round' | 'bevel'] transform matplotlib.transforms.Transform实例 visible [True | False] xdata np.array ydata np.array zorder 任意数字 若要获取可设置行属性的列表，请使用一行或多行作为参数调用setp() 函数。 使用多个图形和轴MATLAB和pyplot，都有当前图形和当前轴的概念。所有打印命令都适用于当前轴。函数gca() 返回当前轴(matplotlib.axes.Axes实例)，gcf() 返回当前地物(matplotlib.figure.Figure实例)。通常情况下，你不必担心这一点，因为这一切都是在幕后处理的。下面是创建两个子图的脚本。 def f(t): return np.exp(-t) * np.cos(2*np.pi*t) t1 = np.arange(0.0, 5.0, 0.1) t2 = np.arange(0.0, 5.0, 0.02) plt.figure(1) plt.subplot(211) plt.plot(t1, f(t1), &#39;bo&#39;, t2, f(t2), &#39;k&#39;) plt.subplot(212) plt.plot(t2, np.cos(2*np.pi*t2), &#39;r--&#39;) plt.show() 这里的 figure() 命令是可选的，因为默认情况下将创建 figure(1)，就像默认情况下创建 subplot(111) 一样，如果不手动指定任何轴。subplot()命令指定numrows, numcols, plot_number，其中 plot_number 的范围 从1到numrows*numcols。如果 numrows * numcols &lt;10，则subplot命令中的逗号是可选的。因此 subplot(211) 与 subplot(2, 1, 1) 相同。 您可以创建任意数量的子图和轴。如果要手动放置轴，即不在矩形网格上，请使用 axes() 命令，该命令允许您将位置指定为axes([left，bottom，width，height])，其中所有值均为小数（0到1）坐标。有关手动放置轴的示例，请参阅Axes Demo;有关具有大量子图的示例，请参阅 Basic Subplot Demo。 您可以使用具有增加的图号的多个figure() 调用来创建多个数字。当然，每个图形可以包含您心中所需的轴和子图： import matplotlib.pyplot as plt plt.figure(1) # the first figure plt.subplot(211) # the first subplot in the first figure plt.plot([1, 2, 3]) plt.subplot(212) # the second subplot in the first figure plt.plot([4, 5, 6]) plt.figure(2) # a second figure plt.plot([4, 5, 6]) # creates a subplot(111) by default plt.figure(1) # figure 1 current; subplot(212) still current plt.subplot(211) # make subplot(211) in figure1 current plt.title(&#39;Easy as 1, 2, 3&#39;) # subplot 211 title Text(0.5, 1.0, &#39;Easy as 1, 2, 3&#39;) 您可以使用 clf() 清除当前图形，使用 cla() 清除当前轴。如果您发现在幕后为您维护状态（特别是当前图像，图形和轴）很烦人，请不要绝望：这只是围绕面向对象API的瘦状态包装器，您可以使用它（见Artist tutorial） 如果你要制作大量的图像，你还需要注意一件事：在用 close() 显式关闭数字之前，数字所需的内存不会完全释放。删除对图的所有引用，和/或使用窗口管理器来杀死屏幕上出现图形的窗口是不够的，因为pyplot会保持内部引用，直到调用close()。 使用文本text() 命令可用于在任意位置添加文本，而xlabel(), ylabel() 和 title() 用于在指定位置添加文本(有关更详细的示例，请参见Matplotlib图中的文本) mu, sigma = 100, 15 x = mu + sigma * np.random.randn(10000) # the histogram of the data n, bins, patches = plt.hist(x, 50, density=1, facecolor=&#39;g&#39;, alpha=0.75) plt.xlabel(&#39;Smarts&#39;) plt.ylabel(&#39;Probability&#39;) plt.title(&#39;Histogram of IQ&#39;) plt.text(60, .025, r&#39;$\\mu=100,\\ \\sigma=15$&#39;) plt.axis([40, 160, 0, 0.03]) plt.grid(True) plt.show() 所有text() 命令都返回一个matplotlib.text.Text实例。与上面的行一样，您可以通过将关键字参数传递给文本函数或使用setp()来自定义属性： t = plt.xlabel(&#39;my data&#39;, fontsize=14, color=&#39;red&#39;)文本属性和布局中更详细地介绍了这些属性。 在文本中使用数学表达式matplotlib在任何文本表达式中接受TeX方程表达式。 例如，要在标题中写入表达式σi= 15，您可以编写由美元符号包围的TeX表达式： plt.title(r&#39;$\\sigma_i=15$&#39;)标题字符串前面的r很重要 - 它表示该字符串是一个原始字符串，而不是将反斜杠视为python转义。matplotlib有一个内置的TeX表达式解析器和布局引擎，并提供自己的数学字体 - 有关详细信息，请参阅编写数学表达式。因此，您可以跨平台使用数学文本，而无需安装TeX。 对于安装了LaTeX和dvipng的用户，您还可以使用LaTeX格式化文本并将输出直接合并到显示图或保存的postscript中 - 请参阅使用LaTeX进行文本渲染。 注释文本上面的基本text() 命令的使用将文本放在Axes上的任意位置。文本的常见用途是注释绘图的某些功能，而annotate()方法提供帮助功能以使注释变得容易。在注释中，有两点需要考虑：由参数xy表示的注释位置和文本xytext的位置。 这两个参数都是（x，y）元组。 ax = plt.subplot(111) t = np.arange(0.0, 5.0, 0.01) s = np.cos(2*np.pi*t) line, = plt.plot(t, s, lw=2) plt.annotate(&#39;local max&#39;, xy=(2, 1), xytext=(3, 1.5), arrowprops=dict(facecolor=&#39;red&#39;, shrink=0.05), ) plt.ylim(-2, 2) plt.show() 在此基本示例中，xy（箭头提示）和xytext位置（文本位置）都在数据坐标中。 可以选择各种其他坐标系 - 有关详细信息，请参阅基本注释和高级注释。更多示例可以在Annotating Plots中找到。 对数和其他非线性轴matplotlib.pyplot 不仅支持线性轴刻度，还支持对数和logit刻度。 如果数据跨越许多数量级，则通常使用此方法。 更改轴的比例很容易： plt.xscale(&#39;log&#39;)下面显示了具有相同数据和y轴不同比例的四个图的示例。 from matplotlib.ticker import NullFormatter # useful for `logit` scale # Fixing random state for reproducibility np.random.seed(19680801) # make up some data in the interval ]0, 1[ y = np.random.normal(loc=0.5, scale=0.4, size=1000) y = y[(y &gt; 0) &amp; (y &lt; 1)] y.sort() x = np.arange(len(y)) # plot with various axes scales plt.figure(1) # linear plt.subplot(221) plt.plot(x, y) plt.yscale(&#39;linear&#39;) plt.title(&#39;linear&#39;) plt.grid(True) # log plt.subplot(222) plt.plot(x, y) plt.yscale(&#39;log&#39;) plt.title(&#39;log&#39;) plt.grid(True) # 对称 log plt.subplot(223) plt.plot(x, y - y.mean()) plt.yscale(&#39;symlog&#39;, linthreshy=0.01) plt.title(&#39;symlog&#39;) plt.grid(True) # logit plt.subplot(224) plt.plot(x, y) plt.yscale(&#39;logit&#39;) plt.title(&#39;logit&#39;) plt.grid(True) # 使用“NullFormatter”将y轴上的小标记标签格式化为空字符串，以避免轴上有太多标签。 plt.gca().yaxis.set_minor_formatter(NullFormatter()) # 调整subplot布局，因为logit 1可能比平常占用更多的空间，这是由于像“1 - 10^{-3}”这样的y-tick标签造成的。 plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25, wspace=0.35) plt.show() 您也可以添加自己的比例，有关详细信息，请参阅开发人员指南以创建比例和转换。","categories":[{"name":"可视化","slug":"可视化","permalink":"https://blog.yinuxy.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"}],"tags":[{"name":"Python可视化","slug":"Python可视化","permalink":"https://blog.yinuxy.com/tags/Python%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"name":"matplotlib","slug":"matplotlib","permalink":"https://blog.yinuxy.com/tags/matplotlib/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"matplotlib - matplotlib 教程","slug":"Experience/matplotlib-1","date":"2019-08-03T16:00:00.000Z","updated":"2020-07-14T13:52:12.088Z","comments":true,"path":"/post/Experience/matplotlib-1/","link":"","permalink":"https://blog.yinuxy.com/post/Experience/matplotlib-1/","excerpt":"Matplotlib 是 Python 的绘图库。 它可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。","text":"Matplotlib 是 Python 的绘图库。 它可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。 Pyplot 教程关于pylot接口的介绍。 matplotlib 教程这个图库包含了使用Matplotlib可以做的许多事情的示例。可以点击任何图像，以查看完整的图像和源代码。 有关更短的示例，请参见示例页。你还可以在我们的用户指南中找到外部资源和常见问题解答。 matplotlib 入门这些教程介绍了使用Matplotlib创建可视化效果的基础知识，以及有效使用该包的一些最佳实践。 使用指南本教程介绍一些基本的使用模式和最佳实践，以帮助您开始使用Matplotlib。 一般概念matplotlib有一个广泛的代码库，对于许多新用户来说，这个代码库可能会让人望而生畏。然而，大多数Matplotlib可以用相当简单的概念框架和几个要点的知识来理解。 打印需要在一系列级别上执行操作，从最一般的级别(例如“轮廓此二维阵列”)到最具体的级别(例如“将此屏幕像素涂成红色”)。绘图软件包的目的是通过所有必要的控制，帮助您尽可能轻松地可视化您的数据-也就是说，在大多数情况下使用相对较高级别的命令，并且在需要时仍然能够使用低级别命令。 因此，matplotlib中的所有内容都是按照层次结构组织的。层次结构的顶部是matplotlib“状态机环境”，它是由matplotlib.pylot模块提供的。在这个级别上，使用简单的函数来添加打印元素(线、图像、文本等)。到当前地物中的当前轴。 注意：Pyplot的状态机环境的行为类似于MATLAB，并且对于具有MATLAB经验的用户来说应该是最熟悉的。 层次结构中的下一级是面向对象的接口的第一级，其中pyplot仅用于少数功能，例如图形创建，并且用户显式创建并跟踪图形和轴对象。 在此级别，用户使用pyplot来创建图形，并且通过这些图形，可以创建一个或多个轴对象。 然后，这些轴对象用于大多数绘图操作。 对于更多的控制 - 这对于在GUI应用程序中嵌入matplotlib图表这一点至关重要 - 可以完全删除pyplot级别，从而留下纯粹面向对象的方法。 # 导入matplotlib模块 import matplotlib.pyplot as plt import numpy as np import pandas as pd 一个图的一部分 Figure该图记录了所有子轴，一些 “特殊” 的艺术家（标题，图形图例等）和画布。（不要过于担心画布，它是至关重要的，因为它实际上是绘图的对象，以获得你绘制的图像，但作为用户它或多或少是你不可见的）。一个数字可以有任意数量的Axes，但是有用的应该至少有一个。创建一个图像的最简单方法是使用pylot： # 没有坐标轴的空图形 fig = plt.figure() # 为图形添加一个标题 fig.suptitle(&#39;No axes on this figure&#39;) # 带有2x2坐标轴网格的图形 fig, ax_lst = plt.subplots(2, 2) Axes对象这就是你想象中的“一幅图”，它是具有数据空间的图像区域。给定的图形可以包含许多轴，但给定的Axes对象只能在一个图中。 Axes包含两个（或3D的三个）Axis对象（注意Axes和Axis之间的差异），它们负责数据限制（数据限制也可以通过 set_xlim() 和 set_ylim() 来设置Axes方法）。每个Axes都有一个标题（通过 set_title() 设置），一个x标签（通过 set_xlabel() 设置）和一个通过 set_ylabel() 设置的y标签。 Axis 类及其成员函数是使用 OO 接口的主要入口点。 Axis对象这些是类似数字的对象。它们负责设置图形限制并生成刻度线（轴上的标记）和ticklabels（标记刻度线的字符串）。刻度线的位置由Locator对象确定，ticklabel字符串由Formatter格式化。正确的定位器和格式化器的组合可以非常精确地控制刻度位置和标签。 Artist对象基本上你在图上看到的一切都是艺术家（Artist）对象（甚至是图，轴和轴对象）。这包括Text对象，Line2D对象，集合对象，Patch对象……（现在你明白了）。渲染图形时，所有艺术家都被绘制到画布（canvas）上。大多数艺术家（Artist）都与轴有关; 这样的艺术家（Artist）不能被多个轴共享，也不能从一个轴移动到另一个轴。 绘制函数的输入类型所有绘图函数都需要np.array或np.ma.masked_array对象作为输入类型。如果是 “类数组（array-like）” 对象（如pandas数据对象和np.matrix）可能会或可能不会按预期工作。最好在绘图之前将它们转换为np.array对象。 例如，要转换pandas.DataFrame a = pd.DataFrame(np.random.rand(4,5), columns = list(&#39;abcde&#39;)) a_asndarray = a.values 以及转换np.matrix b = np.matrix([[1,2],[3,4]]) b_asarray = np.asarray(b) Matplotlib，pyplot和pylab：它们之间有什么关系？Matplotlib是整个包; matplotlib.pyplot 是 matplotlib中的一个模块; 和pylab是一个与 matplotlib 一起安装的模块。 Pyplot为底层面向对象的绘图库提供状态机接口。 状态机隐式地自动创建图形和轴以实现所需的图形。例如： x = np.linspace(0, 2, 100) #创建图形和轴,实现绘图 plt.plot(x, x, label=&#39;linear&#39;) plt.plot(x, x**2, label=&#39;quadratic&#39;) plt.plot(x, x**3, label=&#39;cubic&#39;) #x/y轴标签 plt.xlabel(&#39;x label&#39;) plt.ylabel(&#39;y label&#39;) #表名 plt.title(&quot;Simple Plot&quot;) plt.legend() plt.show() 第一次调用 plt.plot 将自动创建必要的图形和轴以实现所需的绘图。随后对plt.plot的调用会重新使用当前轴，并且每次都会添加另一行。设置标题，图例和轴标签还会自动使用当前轴并设置标题，创建图例并分别标记轴。 pylab是一个便利模块，它在单个名称空间中批量导入 matplotlib.pyplot（用于绘图）和numpy一样（用于数学和使用数组）。不过不推荐使用pylab，并且由于命名空间污染而强烈建议不要使用它。请改用pyplot。 对于非交互式绘图，建议使用pyplot创建图形，然后使用OO界面进行绘图。 代码风格查看此文档和示例时，您将找到不同的代码样式和使用模式。这些风格完全没有问题，各有利弊。几乎所有示例都可以转换为另一种样式并实现相同的结果。唯一需要注意的是避免为自己的代码混合了别的代码风格，尽量保持风格的统一。 注意：matplotlib的开发人员必须遵循特定的编程风格和指导原则。请参见Matplotlib开发人员手册。 在不同的风格中，有两种是官方支持的。因此，这些是使用matplotlib的首选方法。 对于pyplot样式，脚本顶部的通常导入： import matplotlib.pyplot as plt import numpy as np 然后调用一次，例如，np.arange，np.zeros，np.pi，plt.figure，plt.plot，plt.show等。使用pyplot接口创建图像，然后使用对象方法：然后使用对象方法： plt.figure(figsize = (10, 6)) x = np.arange(0, 10, 0.2) y = np.sin(x) fig, ax = plt.subplots() ax.plot(x, y) plt.show() 那么，为什么所有都是额外的类型而不是MATLAB样式(依赖于全局状态和平面名称空间)呢？对于像这个例子这样非常简单的事情，唯一的好处是学术性的：更冗长的风格更明确，更清楚地说明事物从何而来，以及正在发生的事情。对于更复杂的应用程序，这种明确性和明确性变得越来越有价值，而更丰富和更完整的面向对象接口可能会使程序更易于编写和维护。 def my_plotter(ax, data1, data2, param_dict): &quot;&quot;&quot; 用来制作图表的辅助函数 参数 ---------- ax:Axes 要画的坐标轴 data1:数组 x数据 data2:数组 y数据 param_dict: dict类型 要传递给ax.plot的kwargs字典 Returns ------- list: list of artists added &quot;&quot;&quot; out = ax.plot(data1, data2, **param_dict) return out # which you would then use as: plt.figure(figsize = (10, 6)) data1, data2, data3, data4 = np.random.randn(4, 100) fig, ax = plt.subplots(1, 1) my_plotter(ax, data1, data2, {&#39;marker&#39;: &#39;x&#39;}) 或者如果你想有两个小子图： # 创建带有1x2坐标轴网格的图形 fig, (ax1, ax2) = plt.subplots(1, 2) my_plotter(ax1, data1, data2, {&#39;marker&#39;: &#39;x&#39;}) my_plotter(ax2, data3, data4, {&#39;marker&#39;: &#39;o&#39;}) 同样，对于这些简单的例子来说，这种风格看起来有点过头了，但是一旦图形变得稍微复杂一些，就会有回报。 后端(Backends)什么是后端？网站和邮件列表中的许多文档都提到了“后端（Backends）”，许多新用户对这个术语感到困惑。matplotlib针对许多不同的用例和输出格式。有些人在python shell中以交互方式使用matplotlib，并在键入命令时弹出绘图窗口。有些人运行Jupyter笔记本并绘制内联图以进行快速数据分析。其他人将matplotlib嵌入到图形用户界面（如wxpython或pygtk）中以构建丰富的应用程序。有些人在批处理脚本中使用matplotlib从数值模拟生成postscript图像，还有一些人运行Web应用程序服务器来动态提供图形。 为了支持所有这些用例，matplotlib可以针对不同的输出，并且这些功能中的每一个都称为后端（Backends）; “前端（frontend）”是面向用户的代码，即绘图代码，而“后端（Backends）”完成幕后的所有艰苦工作以制作图形。 有两种类型的后端：用户界面后端（用于pygtk，wxpython，tkinter，qt4或macosx;也称为“交互式后端”）和硬拷贝后端来制作图像文件（PNG，SVG，PDF，PS; 也被称为“非交互式后端”）。 配置后端有四种方法。如果它们彼此冲突，将使用以下列表中最后提到的方法，例如，调用 use() 将覆盖 matplotlibrc 中的设置。 matplotlibrc文件中的后端参数（请参阅[使用样式表和rcParams自定义Matplotlib](https://matplotlib.org/tutorials/introductory/customizing.html)）：backend : WXAgg #使用带有反纹理(agg)呈现的wxpython在Unix系统上，为当前shell或单个脚本设置[MPLBACKEND](https://matplotlib.org/faq/environment_variables_faq.html#envvar-MPLBACKEND)环境变量：&gt; export MPLBACKEND=module://my_backend &gt; python simple_plot.py &gt; MPLBACKEND=&quot;module://my_backend&quot; python simple_plot.py在Windows上，只有前者是可用的： &gt; set MPLBACKEND=module://my_backend &gt; python simple_plot.py设置此环境变量将覆盖任何 matplotlibrc 中的后端参数，即使当前工作目录中存在matplotlibrc也是如此。 因此，全局设置MPLBACKEND ，例如 在.bashrc 或 .profile 中，不鼓励它，因为它可能导致反常的行为。如果您的脚本依赖于特定的后端，则可以使用 use() 函数： import matplotlib # 默认情况下生成postscript输出 matplotlib.use(&#39;PS&#39;) 如果使用 use() 函数，则必须在输入 matplotlib.pyplot 之前完成此操作。导入 pyplot 后调用 use() 将不起作用。如果用户希望使用不同的后端，则使用 use() 将需要更改代码。因此，除非绝对必要，否则应避免显式调用 use()。 注意：后端名称规范不区分大小写；例如，‘GTK3Agg’ 和 ‘gtk3agg’ 是等效的。 通过典型的方式安装matplotlib，例如：从二进制安装程序或Linux发行包安装的话，可以设置好一个默认的后端，允许交互式工作和从脚本绘图，输出到屏幕和/或文件，所以至少一开始的时候你不需要使用上面给出的任何方法。 但是，如果您想编写图形用户界面或Web应用程序服务器（Web应用程序服务器中的Matplotlib），或者需要更好地了解正在发生的事情，请继续阅读。为了使图形用户界面可以更加自定义，matplotlib将画布（绘图所在的位置）中的渲染器（实际绘制的东西）的概念分开。用户界面的规范渲染器是Agg，它使用 Anti-Grain Geometry C++库来制作图形的光栅（像素）图像。除macosx之外的所有用户界面都可以与agg渲染一起使用，例如WXAgg，GTK3Agg，QT4Agg，QT5Agg，TkAgg。此外，一些用户界面支持其他渲染引擎。 例如，使用GTK + 3，您还可以选择Cairo渲染（后端GTK3Cairo）。 对于渲染引擎，还可以区分矢量(vector)或光栅(raster)渲染器。矢量图形语言发出绘图命令，例如“从此点到此点绘制线”，因此无标度，并且栅格后端生成线的像素表示，其精度取决于DPI设置。 下面是matplotlib渲染器的摘要(每个渲染器都有一个同名的后端；它们是非交互式后端，能够写入文件)： 渲染格式 文件类型 描述 AGG png raster graphics – 使用反纹理几何（Anti-Grain Geometry）引擎的高质量图像。 PS ps eps vector graphics – Postscript output PDF pdf vector graphics – Portable Document Format SVG svg vector graphics – Scalable Vector Graphics Cairo png ps pdf svg raster graphics 和 vector graphics – 使用 Cairo图形库(Cairo graphics)库 以下是支持的用户界面和渲染器组合; 这些是交互式后端，能够显示到屏幕并使用上表中的适当渲染器写入文件： 渲染格式 文件类型 Qt5Agg 在Qt5画布中进行Agg渲染(需要PyQt5)。可以在IPython中使用 %matplotlib qt5 激活此后端。 ipympl 嵌入在Jupyter小部件中的Agg渲染。（需要ipympl）。这个后端可以在带有％matplotlib ipympl 的Jupyter笔记本中启用。 GTK3Agg Agg渲染到GTK 3.x画布（需要PyGObject，pycairo或cairocffi）。 可以使用％matplotlib gtk3 在 IPython中激活此后端。 macosx 将AGG渲染到OSX中的Cocoa画布中。可以在IPython中使用 %matplotlib OSX 激活此后端。 TkAgg Agg渲染到Tk画布（需要TkInter）。可以使用 ％matplotlib tk 在IPython中激活此后端。 nbAgg 在经典的Jupyter笔记本中嵌入一个交互式界面。 可以通过％matplotlib 笔记本 在Jupyter笔记本中启用此后端。 WebAgg show() 将启动一个带有交互式图形的 tornado 服务。 GTK3Cairo 在GTK 3.x画布上呈现cairo(需要PyGObject 和 pycairo 或 cairocffi )。 Qt4Agg Agg渲染到 Qt4 画布（需要 PyQt4 或pyside）。可以使用 ％matplotlib qt4 在IPython中激活此后端。 WXAgg Agg渲染到 wxWidgets 画布（需要wxPython 4）。可以使用 ％matplotlib wx 在IPython中激活此后端。 ipymplJupyter小部件生态系统的移动速度太快，无法直接在Matplotlib中支持。安装ipympl pip install ipympl jupyter nbextension enable --py --sys-prefix ipympl # 或者 conda install ipympl -c conda-forge 请参阅 jupyter-matplotlib 了解更多细节。 GTK 和 CairoGTK3 后端 (包括 GTK3Agg 和 GTK3Cairo) 依赖于 Cairo (pycairo&gt;=1.11.0 或 cairocffi). 如何选择PyQt4或PySide？QT_API环境变量可以设置为 pyqt 或 pyside，分别使用 PyQt4 或 PySide。 由于要使用的绑定的默认值是PyQt4，matplotlib 首先尝试导入它，如果导入失败，它会尝试导入 PySide。 什么是交互模式？###使用交互式后端（请参阅什么是后端？）允许但本身并不需要或确保绘制到屏幕上。是否以及何时绘制到屏幕，以及在屏幕上绘制绘图后是否继续脚本或shell会话取决于调用的函数和方法，以及确定matplotlib是否处于“交互模式”的状态变量”。默认的布尔值由matplotlibrc文件设置，并且可以像任何其他配置参数一样进行自定义（请参阅使用样式表和rcParams自定义Matplotlib）。它也可以通过matplotlib.interactive() 设置，并且可以通过matplotlib.is_interactive() 查询其值。无论是在脚本还是在shell中，在绘图命令流的中间打开和关闭交互模式很少需要并且可能令人困惑，因此在下文中我们将假设所有绘图都是以交互模式打开或关闭。 注意：与交互性相关的主要更改，特别是show()的角色和行为，在向matplotlib 1.0版的过渡中进行了更改，并在1.0.1中修复了错误。这里我们描述主要交互式后端的1.0.1版行为，但MacOSX除外。 交互模式也可以通过matplotlib.pyplot.ion()打开，并通过matplotlib.pyplot.ioff()关闭。 注意：交互模式在ipython和普通的python shell中使用合适的后端，但它在IDLE IDE中不起作用。如果默认后端不支持交互性，则通过“可以使用什么是后端？”这个话题中讨论的任何方法显式激活交互式后端。 交互例子从普通的python提示符，或者在没有选项的情况下调用ipython之后，试试这个： import matplotlib.pyplot as plt plt.ion() plt.plot([1.6, 2.7]) [&lt;matplotlib.lines.Line2D at 0x20712cf1828&gt;] 假设您运行的是1.0.1或更高版本，并且默认情况下安装并选择了交互式后端，您应该看到一个图，并且您的终端提示也应该是活动的; 您可以键入其他命令，例如： plt.title(&quot;interactive test&quot;) plt.xlabel(&quot;index&quot;) Text(0.5, 0, &#39;index&#39;) 然后你会看到每一行后都要更新绘图。从版本1.5开始，通过其他方式修改绘图也应该自动更新大多数后端的显示。获取对Axes实例的引用，并调用该实例的方法： ax = plt.gca() ax.plot([3.1, 2.2]) [&lt;matplotlib.lines.Line2D at 0x20712a740f0&gt;] 如果你使用的是某些后端（如macosx）或旧版本的matplotlib，则可能无法立即将新行添加到绘图中。在这种情况下，您需要显式调用draw() 以更新绘图： plt.draw() &lt;Figure size 432x288 with 0 Axes&gt;非交互式示例像上一个示例中一样开始一个新会话，但现在关闭交互模式： import matplotlib.pyplot as plt plt.ioff() plt.plot([1.6, 2.7]) [&lt;matplotlib.lines.Line2D at 0x20712a9afd0&gt;] 什么都没发生 - 或者至少没有任何东西出现在屏幕上（除非你使用macosx后端，这是异常的）。要显示绘图，您需要执行以下操作： plt.show() 现在你看到图像，但你的终端命令行没有响应; show() 命令会阻止其他命令的输入，直到您手动终止绘图窗口。 被迫使用阻塞功能？这有什么用，假设您需要一个脚本，将文件内容绘制到屏幕上。您想查看该图，然后结束脚本。如果没有一些阻塞命令（如show()），脚本会闪现图像，然后立即结束，屏幕上不显示任何内容。 此外，非交互模式会将所有图形延迟到调用show()；这比每次在脚本中添加新功能时重新绘制打印更有效。 在版本1.0之前，show()通常不能在单个脚本中调用多次(尽管有时可以不受限制)；对于版本1.0.1及更高版本，此限制已解除，因此可以编写如下脚本： import numpy as np import matplotlib.pyplot as plt plt.ioff() for i in range(3): plt.plot(np.random.rand(10)) plt.show() 这就形成了三个阴谋，一次一个。即。第一个地块关闭后，将显示第二个地块。 摘要在交互模式下，pyplot功能会自动绘制到屏幕上。 交互式绘制时，如果除了pyplot函数之外还使用对象方法调用，则只要想要刷新绘图，就调用draw() 。 在要生成一个或多个图形的脚本中使用非交互模式，并在结束或生成一组新图形之前显示它们。在这种情况下，使用show()显示图形并阻止执行，直到您手动销毁它们。 性能无论是以交互模式探索数据还是以编程方式保存大量绘图，渲染性能都可能成为您管道中的一个痛苦瓶颈。Matplotlib提供了几种方法来大大减少渲染时间，但代价是绘图外观略有变化（达到可设置的容差）。可用于缩短渲染时间的方法取决于正在创建的绘图类型。 线段简化对于具有直线段的打印(例如，典型的直线打印、多边形轮廓等)，渲染性能可以由matplotLibrc文件中的path.Simplify和path.Simplify_Threshold参数控制(有关matplotlib文件的详细信息，请参见使用样式表和rcParams自定义Matplotlib)。Simplify参数是一个布尔值，用于指示是否简化了直线段。path.Simplify_Threshold参数控制简化线段的程度；阈值越高，渲染速度越快。 以下脚本将首先显示数据而不进行任何简化，然后简化显示相同的数据。 尝试与它们互动： import numpy as np import matplotlib.pyplot as plt import matplotlib as mpl # 设置并创建要绘图的数据 y = np.random.rand(100000) y[50000:] *= 2 y[np.logspace(1, np.log10(50000), 400).astype(int)] = -1 mpl.rcParams[&#39;path.simplify&#39;] = True mpl.rcParams[&#39;path.simplify_threshold&#39;] = 0.0 plt.plot(y) plt.show() mpl.rcParams[&#39;path.simplify_threshold&#39;] = 1.0 plt.plot(y) plt.show() Matplotlib目前默认为1/9的保守简化阈值。如果要更改默认设置以使用其他值，可以更改matplotlibrc文件。或者，您可以为交互式绘图（具有最大简化）创建新样式，并为出版质量绘图创建另一种样式（最小化简化）并根据需要激活它们。有关如何执行这些操作的说明，请参阅使用样式表和rcParams自定义Matplotlib。 简化通过将线段迭代地合并为单个矢量直到下一个线段与矢量的垂直距离（在显示坐标空间中测量）大于 path.simplify_threshold 参数来工作。 注意：与版本细分如何简化相关的更改在版本2.1中进行。 2.1之前的这些参数仍将改善渲染时间，但2.1版及更高版本的某些类型数据的渲染时间将大大改善。 标记简化标记也可以简化，尽管不如线段强大。标记简化仅适用于Line2D对象（通过市场营销属性）。无论在哪里传递Line2D构造参数，例如matplotlib.pyplot.plot() 和 matplotlib.axes.Axes.plot()，都可以使用markevery参数： plt.plot(x, y, markevery=10) 市场营销论证允许天真的子采样，或尝试均匀间隔（沿x轴）采样。 有关更多信息，请参阅Markevery演示。 将线分割成较小的块如果您正在使用Agg后端（请参阅什么是后端？），那么您可以使用 agg.path.chunksize rc参数。这允许您指定块大小，并且任何具有大于该多个顶点的行将被分割成多行，每行不超过 agg.path.chunksize 许多顶点。（除非agg.path.chunksize为零，在这种情况下没有分块。）对于某种类型的数据，将线条分成合理的大小可以大大减少渲染时间。 以下脚本将首先显示没有任何块大小限制的数据，然后显示块大小为10,000的相同数据。当数字很大时，可以最好地看到差异，尝试最大化GUI然后与它们进行交互： import numpy as np import matplotlib.pyplot as plt import matplotlib as mpl mpl.rcParams[&#39;path.simplify_threshold&#39;] = 1.0 # Setup, and create the data to plot y = np.random.rand(100000) y[50000:] *= 2 y[np.logspace(1,np.log10(50000), 400).astype(int)] = -1 mpl.rcParams[&#39;path.simplify&#39;] = True mpl.rcParams[&#39;agg.path.chunksize&#39;] = 0 plt.plot(y) plt.show() mpl.rcParams[&#39;agg.path.chunksize&#39;] = 10000 plt.plot(y) plt.show() 图例轴的默认图例行为尝试查找覆盖最少数据点的位置（loc =’best’）。 如果有大量数据点，这可能是非常昂贵的计算。 在这种情况下，您可能希望提供特定位置。 使用快速的风格快速样式可用于自动将简化和分块参数设置为合理的设置，以加快绘制大量数据的速度。它可以通过运行简单地使用： import matplotlib.style as mplstyle mplstyle.use(&#39;fast&#39;) 它的重量非常轻，因此它可以很好地与其他风格配合使用，只需确保最后应用快速样式，以便其他样式不会覆盖设置： mplstyle.use([&#39;dark_background&#39;, &#39;ggplot&#39;, &#39;fast&#39;])","categories":[{"name":"可视化","slug":"可视化","permalink":"https://blog.yinuxy.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"}],"tags":[{"name":"Python可视化","slug":"Python可视化","permalink":"https://blog.yinuxy.com/tags/Python%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"name":"matplotlib","slug":"matplotlib","permalink":"https://blog.yinuxy.com/tags/matplotlib/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"Seaborn中文教程（转）","slug":"Experience/Seaborn","date":"2019-07-25T00:30:00.000Z","updated":"2020-07-14T13:52:12.073Z","comments":true,"path":"/post/Experience/Seaborn/","link":"","permalink":"https://blog.yinuxy.com/post/Experience/Seaborn/","excerpt":"Seaborn是基于matplotlib的图形可视化python包。它提供了一种高度交互式界面，便于用户能够做出各种有吸引力的统计图表。Seaborn是在matplotlib的基础上进行了更高级的API封装，从而使得作图更加容易，在大多数情况下使用seaborn能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。应该把Seaborn视为matplotlib的补充，而不是替代物。同时它能高度兼容numpy与pandas数据结构以及scipy与statsmodels等统计模式。","text":"Seaborn是基于matplotlib的图形可视化python包。它提供了一种高度交互式界面，便于用户能够做出各种有吸引力的统计图表。Seaborn是在matplotlib的基础上进行了更高级的API封装，从而使得作图更加容易，在大多数情况下使用seaborn能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。应该把Seaborn视为matplotlib的补充，而不是替代物。同时它能高度兼容numpy与pandas数据结构以及scipy与statsmodels等统计模式。 章节概要 Seaborn介绍： 安装Seaborn 加载库和数据文件 Seaborn的绘图功能 用Matplotlib定制 Pandas的作用 Seaborn 主题 调色盘 图形重叠 融合数据 迷你画廊 安装Seaborn首先确定你的电脑已安装以下应用 Python 2.7+ or Python 3 Pandas Matplotlib Seaborn Jupyter Notebook(可选) 打开Jupyter Notebook, 过几秒钟会弹出网页窗口Home。点击右侧的New，新建一个Notebook，弹出一个新的网页窗口，点击上方可命名文件。 Seaborn介绍：Seaborn属于Matplotlib的一个高级接口，为我们进行数据的可视化分析提供了极大的方便。 加载库和数据文件加载pandas、matplotlib、seaborn。 # coding: utf-8 #加载pandas import pandas as pd #加载matplotlib from matplotlib import pyplot as plt #在notebook中显示数据点 %matplotlib inline #加载seaborn import seaborn as sb 这里提供了一个数据文件，下载链接为Pokemon.csv 用pandas读取数据文件，并显示前五行。 #用pandas读取Pokemon.csv df = pd.read_csv(&quot;f:/Pokemon.csv&quot;, encoding = &quot;unicode_escape&quot;) #读取前五行，编译后的结果为一个列表。 df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } # Name Type 1 Type 2 Total HP Attack Defense Sp. Atk Sp. Def Speed Stage Legendary 0 1 Bulbasaur Grass Poison 318 45 49 49 65 65 45 1 False 1 2 Ivysaur Grass Poison 405 60 62 63 80 80 60 2 False 2 3 Venusaur Grass Poison 525 80 82 83 100 100 80 3 False 3 4 Charmander Fire NaN 309 39 52 43 60 50 65 1 False 4 5 Charmeleon Fire NaN 405 58 64 58 80 65 80 2 False #绘制散点图 sb.lmplot(x = &#39;Attack&#39;, y = &#39;Defense&#39;, data = df) D:\\Function\\Anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval &lt;seaborn.axisgrid.FacetGrid at 0x2ea94d27c50&gt; Seaborn的绘图功能Seaborn最大的优点之一在于其种类繁多的绘图功能，下面我们利用lmplot()函数，用一行代码来绘制散点图。我们希望x轴显示Attack数据，y轴显示Defense数据，则可以编写代码。 事实上seaborn并没有专门用来绘制散点图的功能，实际上我们用它来拟合和绘制回归线。幸运的是，我们可以通过设置函数的参数来得到我们想要的散点图。用fit_reg = False 移去回归线，用hug参数来用不同颜色显示Pokemon进化阶段的信息。 #移去回归线，用不同颜色来表示pokemon的进化阶段，即刻得到散点图： sb.lmplot(x = &#39;Attack&#39;, y = &#39;Defense&#39;, data = df, fit_reg = False, hue = &#39;Stage&#39;) &lt;seaborn.axisgrid.FacetGrid at 0x2ea950e4278&gt; 从散点图可以看出，所有的数据点都分布在数轴的正半轴，然而散点图的数轴从负数开始的，我们可以对它进行改进。 用Matplotlib定制虽然Seaborn是Matplotlib的一个高级接口，但是我们有时候也需要用到Matplotlib。其中包括设置数轴的范围。我们利用Matplotlib的ylim()和xlim()函数来设置数轴的范围。 #设置数轴范围 plt.gca().set(xlim = (0, None), ylim = (0, None), xlabel=&#39;Attack&#39;, ylabel=&#39;Defense&#39;) [(0, 1.0), Text(0, 0.5, &#39;Defense&#39;), (0, 1.0), Text(0.5, 0, &#39;Attack&#39;)] Pandas的作用尽管这是一个Seaborn教程，pandas依然在实际应用中起到了十分重要的作用。下面我们根据Pokemon的攻击数据来绘制箱形图 sb.boxplot(data = df) #得到的箱形图： &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea950c99b0&gt; 很好，这是一个良好的开端，但是我们可以移除不需要的几列数据。 移除掉Total，因为我们有独立的统计数据。 移除掉Stage跟Legendary，因为它们不是攻击统计数据。 我们可以创建一个新的数据集stats_df，满足我们上述的要求。#创建新数据集 stats_df = df.drop([&#39;Total&#39;, &#39;Stage&#39;, &#39;Legendary&#39;], axis = 1) #Boxplot sb.boxplot(data = stats_df) &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea962be358&gt; 得到了一个改进了的箱形图。 Seaborn 主题Seaborn的另一个好处就是其恰到好处、开箱即用的风格主题。其默认的主题为“darkgrid”下一步，我们把主题改为“whitegrid”来创建一个小提琴图 小提琴图常常作为箱形图的替代 小提琴图通过小提琴的厚度展示了数据的分布，而不仅仅是总结数据。 根据Pokemon的主要类型，我们可以将Attack数据的分布可视化。 #设置主题 sb.set_style(&#39;whitegrid&#39;) #violin plot sb.violinplot(x = &#39;Type 1&#39;, y = &#39;Attack&#39;, data = df) &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea96343828&gt; 可以得到小提琴图，x轴显示的是Pokemon的Type1，y轴显示的是不同Pokemon的攻击数值。 调色盘Seaborn可以根据我们的需求，来设置颜色。我们可以创建一个python命令列表，用颜色的十六进制数值来设置。数值可以在Bulbapedia中寻找。 #创建颜色列表 pkmn_type_colors = [&#39;#78C850&#39;, &#39;#F08030&#39;, &#39;#6890F0&#39;, &#39;#A8B820&#39;, &#39;#A8A878&#39;, &#39;#A040A0&#39;, &#39;#F8D030&#39;, &#39;#E0C068&#39;, &#39;#EE99AC&#39;, &#39;#C03028&#39;, &#39;#F85888&#39;, &#39;#B8A038&#39;, &#39;#705898&#39;, &#39;#98D8D8&#39;, &#39;#7038F8&#39; ] #导入小提琴图中 sb.violinplot(x = &#39;Type 1&#39;, y = &#39;Attack&#39;, data = df, palette = pkmn_type_colors) D:\\Function\\Anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea94d24470&gt; 为了能够让数据文件中的151个Pokemon都能够在图中简单展示，我们可以用群集图 swarm plot达到这一目的。 sb.swarmplot(x = &#39;Type 1&#39;, y = &#39;Attack&#39;, data = df, palette = pkmn_type_colors) &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea96d5bda0&gt; 图形重叠我们已经绘制出了小提琴图和群集图，Seaborn允许我们将这两张图整合在一张图上，步骤如下： 首先，我们用Matplotlib设置图形比例。 然后，我们绘制小提琴图，用inner = None将小提琴中间的木杆移去。 接着，我们绘制群集图，并将数据点的颜色变为黑色。 最后，我们可以用Matplotlib设置一个标题。#设置图形比例 plt.figure(figsize = (10, 6)) #创建violinplot sb.violinplot(x = &#39;Type 1&#39;, y = &#39;Attack&#39;, data = df, inner = None, palette = pkmn_type_colors) #创建swarmplot sb.swarmplot(x = &#39;Type 1&#39;, y = &#39;Attack&#39;, data = df, color = &#39;k&#39;, palette = pkmn_type_colors) #设置标题 plt.title(&#39;Attack by Type&#39;) #其中alpha为透明度。 编译后可以得到如下图形。 Text(0.5, 1.0, &#39;Attack by Type&#39;) 现在我们可以清晰的看到不同Pokemon的攻击值了。那么我们怎么看其他的数值呢？ 融合数据为了展现其他的数据，我们当然可以重复以上的步骤，绘制多张图。但是我们同样也可以在一张图上表示所有的数据，这时候pandas就派上用场了。我们可以利用pandas的melt()函数来将一些数据进行融合，这样就可以在不同Pokemon之间直接进行比对，melt()需要导入3个参数，分别为： 需要融合的数据列表 需要保留的ID变量，其他变量将会被Pandas融合。 融合而成的新变量的名字。#数据融合 melted_df = pd.melt(stats_df, id_vars = [&#39;Name&#39;, &#39;Type 1&#39;, &#39;Type 2&#39;], var_name = &#39;Stat&#39;) #前五行 melted_df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Name Type 1 Type 2 Stat value 0 Bulbasaur Grass Poison # 1 1 Ivysaur Grass Poison # 2 2 Venusaur Grass Poison # 3 3 Charmander Fire NaN # 4 4 Charmeleon Fire NaN # 5 我们为已经融合的数据列表melted_df绘制群集图。 #数据融合 melted_df = pd.melt(stats_df, id_vars = [&#39;Name&#39;, &#39;Type 1&#39;, &#39;Type 2&#39;], var_name = &#39;Stat&#39;) #前五行 melted_df.head() #绘制群集图 sb.swarmplot(x = &#39;Stat&#39;, y = &#39;value&#39;, data = melted_df, hue = &#39;Type 1&#39;) #就可以得到如下的群集图。x轴为Stat中融合的六个变量，y轴为Stat的值，不同颜色代表不同的Pokemon Type 1。 &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea9887da58&gt; 这张图表有一些细节需要完善： 扩大图表。 使用split = True 来分隔色调。 使用我们自定义的颜色。 调整y轴的范围 将图例放在右侧。#扩大图表 plt.figure(figsize = (10, 8)) #绘制群集图，使用split = True 来分割，使用自定义的颜色 sb.swarmplot(x = &#39;Stat&#39;, y = &#39;value&#39;, data = melted_df, hue = &quot;Type 1&quot;, split = True, palette = pkmn_type_colors) #调整Y轴的范围 plt.ylim(0,260) #将图例放在右侧 plt.legend(bbox_to_anchor = (1,1), loc = 2) D:\\Function\\Anaconda3\\lib\\site-packages\\seaborn\\categorical.py:2974: UserWarning: The `split` parameter has been renamed to `dodge`. warnings.warn(msg, UserWarning) &lt;matplotlib.legend.Legend at 0x2ea98a7f0b8&gt; 即可得到一个已经细节完善后的图表。 迷你画廊HeatmapHeatmap可以帮助可视化矩阵状的数据。 #计算相关性 corr = stats_df.corr() #Hteatmap sb.heatmap(corr) &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea98dac4e0&gt; HistogramHistogram能够绘制变量的数值分布。 #绘制直方图 sb.distplot(df.Attack) &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea988d2da0&gt; Bar Plot条形图可以帮助分类变量的可视化。 #绘制条形图abs sb.countplot(x = &#39;Type 1&#39;, data = df, palette = pkmn_type_colors) #倾斜x轴的标签 plt.xticks(rotation = -45) (array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), &lt;a list of 15 Text xticklabel objects&gt;) Factor plotsFactor plots能够根据类别分离图表。 #分离图表 g = sb.factorplot(x = &#39;Type 1&#39;, y = &#39;Attack&#39;, data = df, hue = &#39;Stage&#39;, #用不同的颜色表示Stage col = &#39;Stage&#39;, #根据Stage来分离图表 kind = &#39;swarm&#39;, #创建群集图 ) #倾斜x轴的标签 plt.xticks(rotation = -45) D:\\Function\\Anaconda3\\lib\\site-packages\\seaborn\\categorical.py:3666: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`&#39;point&#39;`) has changed `&#39;strip&#39;` in `catplot`. warnings.warn(msg) (array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), &lt;a list of 15 Text xticklabel objects&gt;) 可以得到根据Stage分离的三个图表，分别用不同颜色的点表示不同的Pokemon。 Density Plot密度图显示的是两个变量之间的分布。曲线越密集的地方说明两个变量的关系越近，越稀疏的地方说明关系越远。 #创建密度图 sb.kdeplot(df.Attack, df.Defense) D:\\Function\\Anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval &lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea9a8d6f60&gt; Joint Distribution Plot联合分布图将散点图和直方图的信息结合起来，提供双变量分布的详细信息。 #创建联合分布图 sb.jointplot(x = &#39;Attack&#39;, y = &#39;Defense&#39;, data = df) &lt;seaborn.axisgrid.JointGrid at 0x2ea9ab74da0&gt; 这里只是介绍了Seaborn常用的绘图功能，还有更强大的功能Example gallery需要我们去学习，去探索。","categories":[{"name":"可视化","slug":"可视化","permalink":"https://blog.yinuxy.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"}],"tags":[{"name":"Python可视化","slug":"Python可视化","permalink":"https://blog.yinuxy.com/tags/Python%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"name":"seaborn","slug":"seaborn","permalink":"https://blog.yinuxy.com/tags/seaborn/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"SQL学习日记（二）","slug":"Experience/sqlShell-2","date":"2019-07-21T00:30:00.000Z","updated":"2020-07-14T13:52:12.101Z","comments":true,"path":"/post/Experience/sqlShell-2/","link":"","permalink":"https://blog.yinuxy.com/post/Experience/sqlShell-2/","excerpt":"","text":"章节导航 SQL语句的多表查询方式 创建和管理DLL 数据处理 DML 约束 SQL语句的多表查询方式例如：按照 department_id 查询 employees(员工表)和 departments(部门表)的信息。 方式一( 通用型):SELECT ... FROM ... WHERE SELECT e.last_name, e.department_id, d.department_name FROM employees e, departments d WHERE e.`department_id` = d.`department_id`; 方式二：SELECT ... FROM ... NATURAL JOIN ...有局限性：会自动连接两个表中相同的列(可能有多个:department_id 和manager_id) SELECT last_name,department_id,department_name FROM employees NATURAL JOIN departments方式三： SELECT ... JOIN ... USING ...有局限性：好于方式二，但若多表的连接列列名不同，此法不合适 SELECT last_name,department_id,department_name FROM employees JOIN departments USING(department_id)方式四： SELECT ... FROM ... JOIN ... ON ...常用方式，较方式一，更易实现外联接(左、右、满) SELECT last_name,e.department_id,department_name FROM employees e JOIN departments d ON e.department_id = d.department_id 内连接 –等值连接 –不等值连接 –非自连接 –自连接 外连接 –左外连接、右外连接、满外连接 创建和管理DLL CRAETE TABLE /TRUNCATE TABLE /ALTER TABLE /REANME…TO/DROP TABLE ..操作完以后，自动 commit;所以，rollback 对其操作，没有效果 创建表 直接创建create table emp1( name varchar2(20), salary number(8,2)default 1000, id number(4), hire_date date ); 通过子查询的方式创建create table emp2 as select last_name name,employee_id id,hire_date from employees;或者create table emp2 as select last_name name,employee_id id,hire_date from employees where department_id = 80;/where 1=2; 修改表 增加新的列alter table emp1 add(birthday date) 修改现有的列alter table emp1 modify(name varchar2(25) default &#39;abc&#39;) 重命名现有的列alter table emp1 rename column salary to sal; 删除现有的列alter table emp1 drop column birthday; 清空表中的数据(与 与 delete from table_name truncate table emp2; 重命名表 rename emp2 to emp3; 删除表 drop table emp3;数据处理 增 增添一条记录insert into [表名](,,,,,) values(,,,,,) 从其它表中拷贝数据insert into [表名] select .... from [另一个表] where .... 改 update [表名] set ..... where .... 删 delete from [表名] where .... 查(最常用的数据库操作) select .... from … where …. group by … having … order by ….约束对创建的表的列属性、字段进行的限制。诸如:not null/unique/primarykey/foreign key/check 如何定义约束— 在创建表的同时，添加对应属性的约束 表级约束 &amp; 列级约束 create table emp1( employee_id number(8), salary number(8), -- 列级约束 hire_date date not null, dept_id number(8), email varchar2(8) constraint emp1_email_uk unique, name varchar2(8) constaint emp1_name_uu not null, first_name varchar2(8), -- 表级约束 constraint emp1_emp_id_pk primary key(employee_id), constraint emp1_fir_name_uk unique(first_name), constraint emp1_dept_id_fk foreign key(dept_id) references departments(department_id) ON DELETE CASCADE ) 只有 not null 时只能使用列级约束，其他的约束两种方式皆可 添加和删除表的约束– 在创建表以后，只能添加和删除，不能修改 添加alter table emp1 add constaint emp1_sal_ck check(salary &gt; 0) 对于 not null 来说，不用 add ，需要 modify ：alter table emp1 modify (salary not null) 删除alter table emp1 drop constaint emp1_sal_ck 使某一个约束失效：此约束还存在于表中，只是不起作用alter table emp1 disable constraint emp1_email_uk; 使某一个约束激活：激活以后，此约束具有约束力alter table emp1 enable constraint emp1_email_uk;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://blog.yinuxy.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://blog.yinuxy.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"SQL","slug":"SQL","permalink":"https://blog.yinuxy.com/tags/SQL/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"SQL学习日记（一）","slug":"Experience/sqlShell-1","date":"2019-07-18T00:30:00.000Z","updated":"2020-07-14T13:52:12.095Z","comments":true,"path":"/post/Experience/sqlShell-1/","link":"","permalink":"https://blog.yinuxy.com/post/Experience/sqlShell-1/","excerpt":"","text":"数据库的好处1.持久化数据到本地 2.可以实现结构化查询，方便管理数据库相关概念1、DB：数据库，保存一组有组织的数据的容器2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据3、SQL:结构化查询语言，用于和DBMS通信的语言 数据库存储数据的特点1、将数据放到表中，表再放到库中2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”5、表中的数据是按行存储的，每一行类似于java中的“对象”。 MySQL服务的启动和停止方式一：计算机——右击管理——服务方式二：通过管理员身份运行 net start 服务名（启动服务） net stop 服务名（停止服务）MySQL服务的登录和退出方式一：通过mysql自带的客户端只限于root用户 方式二：通过windows自带的客户端登录： mysql 【-h主机名 -P端口号 】-u用户名 -p密码退出：exit或ctrl+C MySQL的常见命令1.查看当前所有的数据库 show databases;2.打开指定的库 use 库名3.查看当前库的所有表 show tables;4.查看其它库的所有表 show tables from 库名;5.创建表 create table 表名( 列名 列类型, 列名 列类型， 。。。 );6.查看表结构 desc 表名;7.查看服务器的版本方式一：登录到mysql服务端 select version();方式二：没有登录到mysql服务端 mysql --version 或 mysql --VMySQL的语法规范1.不区分大小写,但建议关键字大写，表名、列名小写2.每条命令最好用分号结尾3.每条命令根据需要，可以进行缩进 或换行4.注释 单行注释：#注释文字 单行注释：– 注释文字 多行注释：/* 注释文字 */ SQL的语言分类DQL（Data Query Language）：数据查询语言 selectDML(Data Manipulate Language):数据操作语言 insert 、update、deleteDDL（Data Define Languge）：数据定义语言 create、drop、alterTCL（Transaction Control Language）：事务控制语言 commit、rollback SQL的常见命令show databases； 查看所有的数据库 use 库名； 打开指定 的库 show tables ; 显示库中的所有表 show tables from 库名;显示指定库中的所有表 create table 表名( 字段名 字段类型, 字段名 字段类型 ); 创建表 desc 表名; 查看指定表的结构 select * from 表名;显示表中的所有数据SQL实例-- select department_name from departments -- select * from departments where department_name = &#39;Con&#39; -- select * from departments where department_name = &#39;Con&#39; or location_id = 1700 -- select distinct location_id from departments; -- select department_id from departments where location_id in (1700) -- select department_id from departments where department_name like &#39;%Con%&#39; -- select count(depart) from departments; -- insert into departments(department_id, department_name, manager_id, location_id) values(290, &#39;Xrh&#39;, 117, 1100) -- update departments set manager_id = 512 where department_name = &#39;Gov&#39; -- DELETE from departments where department_id = 290; -- CREATE table person( -- username varchar(10), -- usergender varchar(6), -- userage int(4), -- primary key(username) -- ); -- drop table person;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://blog.yinuxy.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://blog.yinuxy.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"SQL","slug":"SQL","permalink":"https://blog.yinuxy.com/tags/SQL/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"windows环境下搭建spark开发环境(IDEA)","slug":"Experience/SparkEnvBulid","date":"2019-07-14T00:30:00.000Z","updated":"2020-07-14T13:52:12.077Z","comments":true,"path":"/post/Experience/SparkEnvBulid/","link":"","permalink":"https://blog.yinuxy.com/post/Experience/SparkEnvBulid/","excerpt":"“大数据”（Big Data）指一般的软件工具难以捕捉、管理和分析的大容量数据。“大数据”之“大”，并不仅仅在于“容量之大”，更大的意义在于：通过对海量数据的交换、整合和分析，发现新的知识，创造新的价值，带来“大知识”、“大科技”、“大利润”和“大发展”。“大数据”能帮助企业找到一个个难题的答案，给企业带来前所未有的商业价值与机会。大数据同时也给企业的IT系统提出了巨大的挑战。通过不同行业的“大数据”应用状况，我们能够看到企业如何使用大数据和云计算技术，解决他们的难题，灵活、快速、高效地响应瞬息万变的市场需求。","text":"“大数据”（Big Data）指一般的软件工具难以捕捉、管理和分析的大容量数据。“大数据”之“大”，并不仅仅在于“容量之大”，更大的意义在于：通过对海量数据的交换、整合和分析，发现新的知识，创造新的价值，带来“大知识”、“大科技”、“大利润”和“大发展”。“大数据”能帮助企业找到一个个难题的答案，给企业带来前所未有的商业价值与机会。大数据同时也给企业的IT系统提出了巨大的挑战。通过不同行业的“大数据”应用状况，我们能够看到企业如何使用大数据和云计算技术，解决他们的难题，灵活、快速、高效地响应瞬息万变的市场需求。 前言 本文重点介绍在如何Windows 10下开发spark应用程序的依赖环境的搭建。 本章概要 版本说明 环境配置 jdk配置 scala安装配置 spark安装配置 hadoop安装配置 Intellij IDEA下载与配置 版本说明 jdk:1.8 scala:2.12.0 spark:2.4.3 hadoop:2.7.7 环境配置 jdk配置 下载：登录Oracle官网，接受协议，注册登录，选择对应版本。因为我的本机是64位Windows，所以需要下载64位（Windows x64）JDK安装包。 ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/jdkdownload.png) Windows下安装JDK非常方便，双击安装程序后，直接单击下一步即可，默认安装到C:\\Program Files\\Java目录下。其间会安装JRE，默认一下步即可。 设置环境变量 :右键单击桌面上的“此电脑”图标，在弹出的右键快捷菜单中选择最后一个“属性”选项；在弹出的系统窗口中，单击左侧“高级系统设置”选项，弹出“系统属性”对话框，如下图。 )然后单击中间的“高级”选项卡，再单击下方的“环境变量(N)…”按钮。在弹出的环境变量对话框中，首先单击下方的“新建（W）…”按钮，然后在弹出的新建环境变量中输入对应的值。 )在环境变量中找到“Path”添加jdk和jre下bin的地址，如下图：)新建CLASS_PATH，如下图：检验配置是否成功，在cmd中运行java -version出现以下结果则说明jdk安装配置成功。 scala安装配置 下载：通过Spark官网下载页面 可知“Note: Starting version 2.0, Spark is built with Scala 2.11 by default.”，下载Spark2.4.3对应的 Scala 2.12.x。登录Scala官网，单击download按钮，然后再“Other Releases”标题下找到“Last 2.12.x maintenance release - Scala 2.12.0”链接。进入downloan页面，下拉找到如下图内容，下载msi格式的安装包即可。 安装: 默认安装到C:\\Program Files (x86)\\scala目录下 环境变量：与设置Java环境变量类型， SCALA_HOME=C:\\Program Files (x86)\\scala Path环境变量在最后追加;设置成功后在win+R输入cmd后打开命令行输入scala -version可以看到安装的版本%SCALA_HOME%\\bin； 安装Maven Maven的安装与配置可以参考：《Hadoop基础教程-第4章 HDFS的Java API（4.1 Maven入门）》Intellij IDEA上自带Maven，本文不再详细介绍Intellij IDEA下载与配置 下载与安装：登录官网，按照自己的需求下载（ultimate，旗舰版）或者（Community，社区版）。Ultimate版本是商业软件，需要付费，Community 版为免费版，足够平时日常开发需要。比如这里直接下载Community 启动，安装完成后，单击IntelliJ IDEA图标即可启动IntelliJ IDEA. 由于是第一次安装，所以不需要导入配置。默认选项即可。 选择“Evaluate for free”进入免费版可以根据自身的习惯选择风格，并点击左下角“Skip Remaining and Set Default” 安装scala插件：点击左下角：Configure-&gt;Plugins 搜索并安装scala)安装完成后重启IDEA，然后开始配置全局scala SDK 配置JDK： 首先打开Project Structure，如下图然后我们添加上文安装的JDK，配置完成后点击OK，如下图： 配置JDK 配置全局scala SDK：选中“Global Libraries”，点击“+”号，在弹出的菜单中选中“Scala SDK”，如下图：在弹出的“Select JAR&#39;s for the new Scala SDK”中选择与本机scala版本一致的Version，在这里由于我的scala版本是2.12.0 所以我选择的是2.12.0版本点击右下角OK完成配置创建Maven项目 单击“Create New Project”)选择maven)点击Next，填写GroupID和ArtifactID)点击Next，如下图：点击Finish，如下图：(在此步骤可以更改Content root 和 Module file location 的路径))创建完后右下角如果出现提示：请点击Enable Auto-Import 创建完后将scala框架添加到项目(若不设置有可能无法创建 scala class)：在IDEA启动后进入的界面中，可以看到界面左侧的项目界面，已经有一个名称为simpleSpark的工程。请在该工程名称上右键单击，在弹出的菜单中，选择Add Framework Surport，在左侧有一排可勾选项，找到scala，勾选即可（我的这里没有找到，但是也能运行，为了确保无误，借用haijiege的图） 将项目文件设置为source root ，选中scala–&gt;右键快捷菜单–&gt;Mark Directory as –&gt;Sources root 编辑代码 pom.xmlSpark2.4.3 Maven库请参见 https://mvnrepository.com/artifact/org.apache.spark/spark-core_2.12/2.4.3 &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;Test.pack&lt;/groupId&gt; &lt;artifactId&gt;SparkTest&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;inceptionYear&gt;2008&lt;/inceptionYear&gt; &lt;properties&gt; &lt;spark.version&gt;2.4.3&lt;/spark.version&gt; &lt;scala.version&gt;2.12.0&lt;/scala.version&gt; &lt;/properties&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;scala-tools.org&lt;/id&gt; &lt;name&gt;Scala-Tools Maven2 Repository&lt;/name&gt; &lt;url&gt;http://scala-tools.org/repo-releases&lt;/url&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-core --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-core_2.12&lt;/artifactId&gt; &lt;version&gt;2.4.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.4&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.specs&lt;/groupId&gt; &lt;artifactId&gt;specs&lt;/artifactId&gt; &lt;version&gt;1.2.5&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;version&gt;2.2-beta-5&lt;/version&gt; &lt;configuration&gt; &lt;classifier&gt;dist&lt;/classifier&gt; &lt;appendAssemblyId&gt;true&lt;/appendAssemblyId&gt; &lt;descriptorRefs&gt; &lt;descriptor&gt;jar-with-dependencies&lt;/descriptor&gt; &lt;/descriptorRefs&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;make-assembly&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;single&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt; 保存pom.xml文件后，如果Intellij IDEA右下角出现如下提示，请单击“Enable Auto-Import” WordCount.scala :新建Scala Class类WordCount.scala，Scala源文件后缀名是.scala。通过右键刚刚设置为sources root的scala文件夹，就有了new-&gt;scala class的选项。新建一个scala class，并且命名WordCount，选择object类型。打开建好的WordCount.scala文件，清空！然后黏贴以下代码： 程序运行 文件数据文件sampleDataSet 程序文件WordCount 运行在源文件代码中右键单击–&gt;Run “WordCount” 运行结果如下（输出的信息较多请上下翻一下就能找到）","categories":[],"tags":[{"name":"大数据","slug":"大数据","permalink":"https://blog.yinuxy.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"spark","slug":"spark","permalink":"https://blog.yinuxy.com/tags/spark/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"软件合集（持续更新中ing……）","slug":"Activity/exe","date":"2019-07-10T00:30:00.000Z","updated":"2020-07-14T13:52:12.015Z","comments":true,"path":"/post/Activity/exe/","link":"","permalink":"https://blog.yinuxy.com/post/Activity/exe/","excerpt":"各种软件资源，这里统统都有！","text":"各种软件资源，这里统统都有！ 一、Adobe全家桶1、Photoshop cc 2018 链接: https://pan.baidu.com/s/1S08r_Q-xkgYZTyfhqj91ww 提取码: aim2 2、Premiere Pro cc 2017 链接: https://pan.baidu.com/s/1vhFAEGwlaf8dS_xSX4BXxA 提取码: uxmy 3、Illustrator CC 2018 链接: https://pan.baidu.com/s/1nxUtGFpqeQtw61_yVExhSA 提取码: 9pgx 4、Adobe Effects CC 2018 链接: https://pan.baidu.com/s/1SwcSkVP_yKzvZGZ3OTF-dA提取码: 626s 5、Dreamweaver 链接: https://pan.baidu.com/s/1csLtkNUSiOC2kOXTEtIm1Q 提取码: t56s 6、Adobe破解软件 链接: https://pan.baidu.com/s/1ZVQiBzcMf0M_0smakdSsUg 提取码: frjc 二、office全家桶1、Office 2010-专业增强版-个体零售版-64 位和 32 位-中文简体 链接: https://pan.baidu.com/s/1D5tdwbKwRofmUz1UDozwDQ 提取码: w3ai 2、Office 2013-专业增强版-个体零售版-64 位和 32 位-中文简体 链接: https://pan.baidu.com/s/1oTmgGpTGvyjL8hn0v6mpnA 提取码: daur 3、Office 2016-专业增强版-个体零售版-64 位和 32 位-中文简体 链接: https://pan.baidu.com/s/1SZh_z4zubo_4UjfsXk7BLw 提取码: uny3 4、Office 2019 ![]https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/OFFICE2019.jpg) 链接: https://pan.baidu.com/s/1bTNJ5ONrceqmFvx6lT4O0Q 提取码: 3yqs 三、IDE1、C&amp;C++ IDE:① C-Free &lt;fancybox&gt; ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/CFREE.jpg) &lt;/fancybox&gt; 链接: https://pan.baidu.com/s/1GBcivRrNHEYEOtsBaEjGqA 提取码: 5b2e② vc6.0(兼容win10) &lt;fancybox&gt; ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/VC6.0.jpg) &lt;/fancybox&gt; 链接: https://pan.baidu.com/s/1ng-HgcVprOtX5P4M5h7WUw 提取码: 8sqs③ codeblocks(ACM推荐IDE)&lt;fancybox&gt; ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/CB.jpg) &lt;/fancybox&gt; 链接: https://pan.baidu.com/s/1ya1Ly7qKI-O4DiNStAsHzQ 提取码: 9425④ Dev C++（蓝桥杯官方指定IDE） &lt;fancybox&gt; ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/DEVC++.jpg) &lt;/fancybox&gt; 链接: https://pan.baidu.com/s/1ydxrV5WLR505tNknK8YfcQ 提取码: fjvz ⑤ eclipse cpp版 &lt;fancybox&gt; ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/ECLIPSE.jpg) &lt;/fancybox&gt; 链接: https://pan.baidu.com/s/1HUZ8w2Jci6g88gVIs6iWNQ 提取码: q7ig2、Java IDE① IDEA &lt;fancybox&gt; ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/IDEA.jpg) &lt;/fancybox&gt; 链接: https://pan.baidu.com/s/1bT41wqMWATNO4si1hbKS1g 提取码: ptmp② Eclipse &lt;fancybox&gt; ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/ECLIPSEJAVA.jpg ) &lt;/fancybox&gt; 链接: https://pan.baidu.com/s/1CPdHdYLBkdYcF8PPN463mA 提取码: ksyh③ MyEclipse &lt;fancybox&gt; ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/MYECLIPSE.jpg) &lt;/fancybox&gt; 链接: https://pan.baidu.com/s/1ZhwAtmklLJGVoVzdPMH_mg 提取码: 8dph3、Python IDE① pycharm-professional &lt;fancybox&gt; ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/PYCHARM.jpg) &lt;/fancybox&gt; 链接: https://pan.baidu.com/s/1O9W_qlMkch5H2hJKDaFwDg 提取码: c67v② Anaconda3 &lt;fancybox&gt; ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/ANACONDA.jpg) &lt;/fancybox&gt; 链接: https://pan.baidu.com/s/1v85y2SFWlbBd-UqlQQjI_A 提取码: aa9e4、Hbuilder &lt;fancybox&gt; ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/HBUILDER.jpg) &lt;/fancybox&gt; 链接: https://pan.baidu.com/s/1IzTeJoP8eTkOJRWf5KnVFw 提取码: e4yn四、思维导图XMind&lt;fancybox&gt; ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/XMIND.jpg) &lt;/fancybox&gt; 链接:https://pan.baidu.com/s/1VawY6QZtJA6vNwVnBDy5hg 提取码: h4ay五、百度网盘不限速链接: https://pan.baidu.com/s/1gVUx0UfogSfE6Fc45vs-xw 提取码: z6hx","categories":[],"tags":[{"name":"软件资源","slug":"软件资源","permalink":"https://blog.yinuxy.com/tags/%E8%BD%AF%E4%BB%B6%E8%B5%84%E6%BA%90/"}],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}},{"title":"Hello Stranger","slug":"hello_world","date":"2019-07-04T00:30:00.000Z","updated":"2020-07-14T13:52:12.005Z","comments":true,"path":"/post/hello_world/","link":"","permalink":"https://blog.yinuxy.com/post/hello_world/","excerpt":"Welcome to Yinxu’s Blog! This is your very first post. Check documentation for more info.","text":"Welcome to Yinxu’s Blog! This is your very first post. Check documentation for more info. Hi,it's Yinux's Blog.Nice to meet you!","categories":[],"tags":[],"author":{"name":"YINUXY","avatar":"https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/avatar/avatar.png","url":"httpS://blog.yinuxy.com"}}],"categories":[{"name":"Python","slug":"Python","permalink":"https://blog.yinuxy.com/categories/Python/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.yinuxy.com/categories/Linux/"},{"name":"网站开发","slug":"网站开发","permalink":"https://blog.yinuxy.com/categories/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/"},{"name":"ACM解题报告","slug":"ACM解题报告","permalink":"https://blog.yinuxy.com/categories/ACM%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"},{"name":"Docker","slug":"Docker","permalink":"https://blog.yinuxy.com/categories/Docker/"},{"name":"Hexo","slug":"Hexo","permalink":"https://blog.yinuxy.com/categories/Hexo/"},{"name":"可视化","slug":"可视化","permalink":"https://blog.yinuxy.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"name":"Algorithm","slug":"Algorithm","permalink":"https://blog.yinuxy.com/categories/Algorithm/"},{"name":"活动线报","slug":"活动线报","permalink":"https://blog.yinuxy.com/categories/%E6%B4%BB%E5%8A%A8%E7%BA%BF%E6%8A%A5/"},{"name":"数据库","slug":"数据库","permalink":"https://blog.yinuxy.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"Python小技巧","slug":"Python小技巧","permalink":"https://blog.yinuxy.com/tags/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"name":"DDOS","slug":"DDOS","permalink":"https://blog.yinuxy.com/tags/DDOS/"},{"name":"HTML","slug":"HTML","permalink":"https://blog.yinuxy.com/tags/HTML/"},{"name":"Hexo主题美化","slug":"Hexo主题美化","permalink":"https://blog.yinuxy.com/tags/Hexo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"},{"name":"CentOS","slug":"CentOS","permalink":"https://blog.yinuxy.com/tags/CentOS/"},{"name":"防火墙","slug":"防火墙","permalink":"https://blog.yinuxy.com/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"Python可视化","slug":"Python可视化","permalink":"https://blog.yinuxy.com/tags/Python%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"name":"Plotly","slug":"Plotly","permalink":"https://blog.yinuxy.com/tags/Plotly/"},{"name":"Linux Shell","slug":"Linux-Shell","permalink":"https://blog.yinuxy.com/tags/Linux-Shell/"},{"name":"Python","slug":"Python","permalink":"https://blog.yinuxy.com/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://blog.yinuxy.com/tags/%E7%88%AC%E8%99%AB/"},{"name":"Anaconda","slug":"Anaconda","permalink":"https://blog.yinuxy.com/tags/Anaconda/"},{"name":"basemap","slug":"basemap","permalink":"https://blog.yinuxy.com/tags/basemap/"},{"name":"pyproj","slug":"pyproj","permalink":"https://blog.yinuxy.com/tags/pyproj/"},{"name":"Word2Vec","slug":"Word2Vec","permalink":"https://blog.yinuxy.com/tags/Word2Vec/"},{"name":"词向量","slug":"词向量","permalink":"https://blog.yinuxy.com/tags/%E8%AF%8D%E5%90%91%E9%87%8F/"},{"name":"最优子结构","slug":"最优子结构","permalink":"https://blog.yinuxy.com/tags/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84/"},{"name":"贪心算法","slug":"贪心算法","permalink":"https://blog.yinuxy.com/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://blog.yinuxy.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"重叠子问题","slug":"重叠子问题","permalink":"https://blog.yinuxy.com/tags/%E9%87%8D%E5%8F%A0%E5%AD%90%E9%97%AE%E9%A2%98/"},{"name":"kettle","slug":"kettle","permalink":"https://blog.yinuxy.com/tags/kettle/"},{"name":"HTTP Client","slug":"HTTP-Client","permalink":"https://blog.yinuxy.com/tags/HTTP-Client/"},{"name":"ACM","slug":"ACM","permalink":"https://blog.yinuxy.com/tags/ACM/"},{"name":"Wythoff's game","slug":"Wythoff-s-game","permalink":"https://blog.yinuxy.com/tags/Wythoff-s-game/"},{"name":"数论","slug":"数论","permalink":"https://blog.yinuxy.com/tags/%E6%95%B0%E8%AE%BA/"},{"name":"数据分析","slug":"数据分析","permalink":"https://blog.yinuxy.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"JSP","slug":"JSP","permalink":"https://blog.yinuxy.com/tags/JSP/"},{"name":"matplotlib","slug":"matplotlib","permalink":"https://blog.yinuxy.com/tags/matplotlib/"},{"name":"seaborn","slug":"seaborn","permalink":"https://blog.yinuxy.com/tags/seaborn/"},{"name":"数据库","slug":"数据库","permalink":"https://blog.yinuxy.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"SQL","slug":"SQL","permalink":"https://blog.yinuxy.com/tags/SQL/"},{"name":"大数据","slug":"大数据","permalink":"https://blog.yinuxy.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"spark","slug":"spark","permalink":"https://blog.yinuxy.com/tags/spark/"},{"name":"软件资源","slug":"软件资源","permalink":"https://blog.yinuxy.com/tags/%E8%BD%AF%E4%BB%B6%E8%B5%84%E6%BA%90/"}]}