<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Centos7下搭建Jupyter Notebook服务</title>
      <link href="//post/Python/Skill/jupyterCreated/"/>
      <url>//post/Python/Skill/jupyterCreated/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5"  face = "楷体">Centos7下搭建Jupyter Notebook服务</font></center></blockquote><a id="more"></a><h2 id="安装python环境"><a href="#安装python环境" class="headerlink" title="安装python环境"></a>安装python环境</h2><h3 id="安装基础依赖环境"><a href="#安装基础依赖环境" class="headerlink" title="安装基础依赖环境"></a>安装基础依赖环境</h3><pre><code>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</code></pre><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>浏览器打开 <a href="https://www.python.org/ftp/python/" target="_blank" rel="noopener">https://www.python.org/ftp/python/</a> 本文在此安装Python3.5.4</p><pre><code>wget https://www.python.org/ftp/python/3.5.4/Python-3.5.4.tgz</code></pre><h3 id="创建Python3的目录"><a href="#创建Python3的目录" class="headerlink" title="创建Python3的目录"></a>创建Python3的目录</h3><pre><code>mkdir /usr/local/python3 </code></pre><h3 id="解压下载文件并进入解压后目录"><a href="#解压下载文件并进入解压后目录" class="headerlink" title="解压下载文件并进入解压后目录"></a>解压下载文件并进入解压后目录</h3><pre><code>tar -zxvf Python-3.5.4.tgzcd Python-3.5.4</code></pre><h3 id="执行自定义安装"><a href="#执行自定义安装" class="headerlink" title="执行自定义安装"></a>执行自定义安装</h3><pre><code>./configure --prefix=/usr/local/python3make &amp;&amp; make install</code></pre><h3 id="创建软链接"><a href="#创建软链接" class="headerlink" title="创建软链接"></a>创建软链接</h3><pre><code>ln -s /usr/local/python3/bin/python3 /usr/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</code></pre><h3 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h3><pre><code>python3 -Vpip3 -V</code></pre><h2 id="安装jupyter"><a href="#安装jupyter" class="headerlink" title="安装jupyter"></a>安装jupyter</h2><h3 id="更新pip"><a href="#更新pip" class="headerlink" title="更新pip"></a>更新pip</h3><pre><code>pip3 install --upgrade pip</code></pre><h3 id="安装jupyter-1"><a href="#安装jupyter-1" class="headerlink" title="安装jupyter"></a>安装jupyter</h3><pre><code>pip3 install jupyter</code></pre><h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><pre><code>jupyter notebook --generate-config</code></pre><h3 id="使用systemd"><a href="#使用systemd" class="headerlink" title="使用systemd"></a>使用systemd</h3><p>生成秘钥有两种方式，这里统一介绍下：</p><ol><li>直接在命令行执行<pre><code>jupyter notebook password  # 自己造一个密码输入一确认一次</code></pre><pre><code>vim ~/.jupyter/jupyter_notebook_config.json</code></pre></li><li>先进入python环境，执行<pre><code>from notebook.auth import passwd passwd() # 此时会让你两次输入密码（该密码作为客户端登录jupyter用），然后就会生成秘钥 （秘# 钥作为配置文件用） </code></pre>记下密钥，sha1:03c74e2b144e:7…<h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><pre><code>vim ~/.jupyter/jupyter_notebook_config.py</code></pre>修改以下几项<pre><code>c.NotebookApp.ip=&#39;*&#39;                                  # 就是设置所有ip皆可访问  c.NotebookApp.password = u&#39;sha1:03...&#39;       # 刚才复制的那个密文&#39;  c.NotebookApp.open_browser = False       # 禁止自动打开浏览器  c.NotebookApp.port =1234                         #随便指定一个端口  </code></pre>设置端口后要记得开放端口才能使用，具体过程可参考<a href="https://blog.yinuxy.com/post/Experience/centosFirewall/">CentOS防火墙配置</a><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre><code>jupyter notebook --allow-root --ip=0.0.0.0</code></pre><h2 id="将Jupyter远程服务设置为守护进程"><a href="#将Jupyter远程服务设置为守护进程" class="headerlink" title="将Jupyter远程服务设置为守护进程"></a>将Jupyter远程服务设置为守护进程</h2><h3 id="使用systemd-1"><a href="#使用systemd-1" class="headerlink" title="使用systemd"></a>使用systemd</h3></li><li>编写<code>jupyter</code>启动脚本,在<code>/usr/sbin</code>目录下新建<code>jupyter.sh</code>文件<pre><code>sudo vim /usr/sbin/jupyter.sh</code></pre>在<code>jupyter.sh</code>中写入<pre><code>#!/bin/shjupyter notebook --allow-root --ip=0.0.0.0</code></pre>此时创建的脚本文件还没有执行权限，所以执行下面这条命令<pre><code>sudo chmod +x /usr/sbin/jupyter.sh</code></pre></li><li>编写守护进程配置文件:守护进程的配置文件存放在<code>/usr/lib/systemd/system/</code>目录下，在该目录下新建<code>jupyter.service</code>文件<pre><code>sudo vim /etc/systemd/system/jupyter.service  // centossudo vim /etc/systemd/system/jupyter.service .       // ubuntu</code></pre>打开<code>jupyter.service</code>文件并写入<pre><code>[Unit]Description = remote jupyterAfter = network.target</code></pre></li></ol><p>[Service]<br>Type=simple<br>ExecStart=/usr/sbin/jupyter.sh</p><p>[Install]<br>WantedBy=multi-user.target</p><pre><code>3. 启动进程:v启动进程主要用到`systemctl`相关命令</code></pre><h1 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h1><p>systemctl daemon-reload</p><h1 id="启动进程"><a href="#启动进程" class="headerlink" title="启动进程"></a>启动进程</h1><p>systemctl start jupyter.service</p><pre><code>相关命令：</code></pre><p>systemctl start ctlist    # 启动<br>systemctl stop ctlist     # 停止<br>systemctl restart ctlist  # 重启<br>systemctl status ctlist   # 查看状态</p><pre><code>###  使用 nohup ###1. 创建启动文件</code></pre><p>vim /usr/sbin/jupyter.sh</p><pre><code>2. 写入启动命令</code></pre><p>nohup jupyter notebook –allow-root –ip=0.0.0.0 &gt; deep.log &amp;</p><pre><code>3. 运行启动文件</code></pre><p>./jupyter.sh</p><pre><code>## 绑定域名 ##&gt; 提示：有宝塔面板的直接使用宝塔就行，没有的就可以使用caddy，2选1即可。### 宝塔面板 ###先进入宝塔面板，然后点击左侧网站，添加站点，再点击添加好了的域名名称，这时候就进入了站点配置，点击反向代理，目标`URL`填入`http://127.0.0.1:8000`，不要设置缓存，再启用反向代理即可。如果要启用`SSL`，就需要在设置反向代理之前，直接在站点配置点击`SSL`，申请免费`let`证书，然后再启用反代即可。### Caddy绑定 ###安装`Caddy`：</code></pre><p>wget -N –no-check-certificate <a href="https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/caddy_install.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/caddy_install.sh</a> &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh<br>#备用地址<br>wget -N –no-check-certificate <a href="https://www.moerats.com/usr/shell/Caddy/caddy_install.sh" target="_blank" rel="noopener">https://www.moerats.com/usr/shell/Caddy/caddy_install.sh</a> &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</p><pre><code>配置`Caddy`：</code></pre><p>#以下全部内容是一个整体，请修改域名后一起复制到SSH运行！</p><p>#http访问，该配置不会自动签发SSL<br>echo “jupyter.yinuxy.com {<br> gzip<br> tls <a href="mailto:admin@yinuxy.com">admin@yinuxy.com</a><br> proxy / 127.0.0.1:1234<br>}” &gt; /usr/local/caddy/Caddyfile</p><p>#https访问，该配置会自动签发SSL，请提前解析域名到VPS服务器<br>echo “jupyter.yinuxy.com {<br> gzip<br> tls <a href="mailto:admin@yinuxy.com">admin@yinuxy.com</a><br> proxy / 127.0.0.1:1234<br>}” &gt; /usr/local/caddy/Caddyfile</p><pre><code>启动`Caddy`：</code></pre><p>/etc/init.d/caddy start</p><pre><code>就可以打开域名进行访问了。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器宝塔面板上设置防CC的方法</title>
      <link href="//post/Experience/vpsDeftcc/"/>
      <url>//post/Experience/vpsDeftcc/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5"  face = "楷体">服务器宝塔面板上设置防CC的方法</font></center></blockquote><a id="more"></a><p>最好的防cc办法：别到处乱发自己的网站域名，不要到处求打，不要对自己的服务器有过大的信心。</p><h2 id="宝塔防火墙设置："><a href="#宝塔防火墙设置：" class="headerlink" title="宝塔防火墙设置："></a>宝塔防火墙设置：</h2><p>插件页面→全局配置→cc防御→初始规则</p><p>建议规则：个人博客：周期：1秒 频率：5次~15次 封锁时间：3600秒 增强模式：关闭 四层防御：开启 自动模式：开启</p><p>论坛：周期：1秒 频率：3次 封锁时间：360秒 增强模式：关闭 四层防御：开启 自动模式：开启</p><p>使用后，点击灰色的“全局应用”，否则对已添加站点无效，若服务器要站点个性化，仅修改站点即可。</p><p>规则说明：每个用户每秒可以访问站点*次，即为三个数字值的综合含义，正常用户1秒刷新5次几乎是不可能的事情，所以给出以下方案，对于论坛的不同方案是因为论坛访客数量大。</p><h2 id="宝塔5-9版本的设置方法："><a href="#宝塔5-9版本的设置方法：" class="headerlink" title="宝塔5.9版本的设置方法："></a>宝塔5.9版本的设置方法：</h2><p>进入Nginx→过滤器</p><p>建议规则：周期：1秒 频率：5次 封锁时间：3600秒</p><h2 id="流量控制："><a href="#流量控制：" class="headerlink" title="流量控制："></a>流量控制：</h2><p>网站→设置→流量限制</p><p>点击开启“启用流量控制”，限制方案依实际为准。</p><p>建议规则：个人博客：并发限制：30<del>60 单IP限制：5</del>10 流量限制：-</p><h2 id="最大并发连接数"><a href="#最大并发连接数" class="headerlink" title="最大并发连接数"></a>最大并发连接数</h2><p>Nginx→性能调整→最大并发链接数</p><p>设置为60~200，主要看你服务器多少站点，学生机不建议设置过高。</p><p>并发数代表每秒钟有几个用户同时访问你的站点，有点站点日IP都无法达到60，所以无需在意调高低。单IP限制的作用在于限制这个IP同时请求两个文件，防止这个IP把别的并发占用掉，影响正常访问。</p><p>该规则还是要看实际情况。一般小站这样设置就可以了</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DDOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HTML+CSS】CSS3实现炫酷的流光按钮效果</title>
      <link href="//post/Experience/buttonStream/"/>
      <url>//post/Experience/buttonStream/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5"  face = "楷体">【HTML+CSS】CSS3实现炫酷的流光按钮效果</font></center></blockquote><a id="more"></a><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><style type="text/css">  a.button{    text-decoration: none;    position: absolute;    font-size: 24px;    background: linear-gradient(90deg, #03a9f4, #f441a5, #ffeb3b, #03a9f4);    background-size: 400%;    width: 400px;    height: 100px;    line-height: 100px;    text-align: center;    color: #fff;    text-transform: uppercase;    border-radius: 50px;    z-index: 1;  }  a.button::before{    content: "";    position: absolute;    left: -5px;    right: -5px;    top: -5px;    bottom: -5px;    background: linear-gradient(90deg, #03a9f4, #f441a5, #ffeb3b, #03a9f4);    background-size: 400%;    border-radius: 50px;    filter: blur(20px);    z-index: -1;  }  a.button:hover::before{    animation: sun 8s infinite;  }  a.button:hover{  animation: sun 8s infinite;  }  @keyframes sun{    100%{      background-position: -400% 0;    }  }</style><p><a class="button" href="https://blog.yinuxy.com">button</a></p><br/><br/><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><pre><code>a{  text-decoration: none;  position: absolute;  left: 50%;  top: 50%;  transform: translate(-50%, -50%);  font-size: 24px;  background: linear-gradient(90deg, #03a9f4, #f441a5, #ffeb3b, #03a9f4);  background-size: 400%;  width: 400px;  height: 100px;  line-height: 100px;  text-align: center;  color: #fff;  text-transform: uppercase;  border-radius: 50px;  z-index: 1;}a::before{  content: &quot;&quot;;  position: absolute;  left: -5px;  right: -5px;  top: -5px;  bottom: -5px;  background: linear-gradient(90deg, #03a9f4, #f441a5, #ffeb3b, #03a9f4);  background-size: 400%;  border-radius: 50px;  filter: blur(20px);  z-index: -1;}a:hover::before{  animation: sun 8s infinite;}a:hover{animation: sun 8s infinite;}@keyframes sun{  100%{    background-position: -400% 0;  }}</code></pre><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><pre><code>&lt;a href=&quot;https:blog.yinuxy.com&quot;&gt;button&lt;/a&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“Shopee杯” E 起来编程暨武汉大学 2020 年大学生程序设计大赛（网络预选赛）解题报告</title>
      <link href="//post/OJContest/2020whuShopee/"/>
      <url>//post/OJContest/2020whuShopee/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5" face = "楷体">“Shopee杯” E 起来编程暨武汉大学 2020 年大学生程序设计大赛（网络预选赛）解题报告</font></center></blockquote><a id="more"></a><p>比赛地址：<a href="https://ac.nowcoder.com/acm/contest/5166#question" target="_blank" rel="noopener">“Shopee杯” e起来编程暨武汉大学2020年大学生程序设计大赛（网络预选赛）</a><br>整场比赛体验极差，英语杀我（题目都看不懂还做个屁啊！！！），结束后当天晚上讲题，对照题解自己又去做了一遍。</p><h2 id="E-Yu-is-a-Brutal-Creature"><a href="#E-Yu-is-a-Brutal-Creature" class="headerlink" title="E-Yu is a Brutal Creature"></a><a href="https://ac.nowcoder.com/acm/contest/5166/E" target="_blank" rel="noopener">E-Yu is a Brutal Creature</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>找出$0 \sim n$之间所有满足$(n+1)|(n^2+1)$的自然数</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>根据平方差公式：$n^2-1=(n+1)(n-1)$ 可知 $(n+1)|(n^2+1)$。<br>于是可知 $(n^2+1) - (n^2-1)=2$ 也应当是 $n+1$ 的倍数。<br>符合条件的数，只有 $0$ 和 $1$ 。<br>所以当$n = 0$时，答案为 $0$ ，当 $n &gt; 0$ 时，答案为 $n - 1$ 。 </p><pre><code>#include &lt;bits/stdc++.h&gt;using namespace std;int main() {    int T;    scanf(&quot;%d&quot;, &amp;T);    while (T--) {        int n;        scanf(&quot;%d&quot;, &amp;n);        printf(&quot;%d\n&quot;, n ? (n - 1) : n);    }    return 0;   }</code></pre><h2 id="B-Best-Match"><a href="#B-Best-Match" class="headerlink" title="B-Best Match"></a><a href="https://ac.nowcoder.com/acm/contest/5166/B" target="_blank" rel="noopener">B-Best Match</a></h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>给定一个数组，求有多少个数对 $a_i$ , $a_j$ , $i \neq j$ 满足 $a_i + a_j == 0$。</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>记录下数组中每个权值的出现次数，记数组中权值 $i$ 的出现次数为 $cnt_i$ 。那么答案就是：</p><center> $\sum\limits_{i=1}^{max(a)} cnt_i \times cnt_{-i} + cnt_0 \times (cnt_0 - 1)/2$ </center><pre><code>#include&lt;bits/stdc++.h&gt;using namespace std;int read(){    int c=0,nx,sign=1;    while(!isdigit(nx = getchar()))        if(nx==&#39;-&#39;)            sign=-1;    while(isdigit(nx))        c=c*10+nx-&#39;0&#39;,nx=getchar();    return sign*c;}const int N = 5e5 + 20;long long cnt[100];int main(){    int n = read();    for(int i=1;i&lt;=n;i++)        cnt[read() + 20]++;    long long ans = cnt[20] * (cnt[20] - 1) / 2;    for(int i=1;i&lt;=20;i++)        if(cnt[i + 20] and cnt[20 - i])            ans += cnt[i + 20]  * cnt[20 - i];    printf(&quot;%lld&quot;,ans);}</code></pre><h2 id="A-A-Monument-For-Heroes"><a href="#A-A-Monument-For-Heroes" class="headerlink" title="A-A Monument For Heroes"></a><a href="https://ac.nowcoder.com/acm/contest/5166/A" target="_blank" rel="noopener">A-A Monument For Heroes</a></h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>给你若干字符串，求按照首尾字母相同的方式接龙能接上多少个，且必须按照题目输入的顺序接, 也就是先出现的字符串必须接在前面。</p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>使用 DP 实现，记 $dp[i][j]$ 表示以 $i$ 开头，$j$ 结尾的接龙的最长长度。<br>随后依次枚举每个字符串，假设字符串 $s$ 的开头是 $c_1$ ，结尾为 $c_2$ ，那么<br>更新所有 $dp[i][c_2]$，更新方式为 $dp[i][c_2] = max(dp[i][c_2] , dp[i][c_1]+|s|)$ 。</p><pre><code>#include&lt;bits/stdc++.h&gt;#define inf 1&lt;&lt;29#define maxn 1000010typedef long long ll;using namespace std;int n,mp[210][210],ans;char str[110];int main(){    cin&gt;&gt;n;    for(int i=1;i&lt;=n;++i){        scanf(&quot;%s&quot;,str);        int len=strlen(str);        char s=str[0],t=str[len-1];        for(int j=&#39;a&#39;;j&lt;=&#39;z&#39;;++j){            if(mp[j][s]){                mp[j][t]=max(mp[j][t],mp[j][s]+len);            }        }        mp[s][t]=max(mp[s][t],len);    }    for(int i=&#39;a&#39;;i&lt;=&#39;z&#39;;++i) ans=max(ans,mp[i][i]);    cout&lt;&lt;ans&lt;&lt;endl;    return 0;}</code></pre><h2 id="D-DIY-Masks-at-Home"><a href="#D-DIY-Masks-at-Home" class="headerlink" title="D-DIY Masks at Home"></a><a href="https://ac.nowcoder.com/acm/contest/5166/D" target="_blank" rel="noopener">D-DIY Masks at Home</a></h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>给你一个由大写字母构成的二维矩阵，你需要找到一个最大的正方形，使得这个正方形内只包含一种字母。</p><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>本题实际上有多种通过方法，下面介绍两种参考方法：</p><ol><li>（暴力哈希）将原矩阵内每一种字母都替换成一个素数，然后计算这个矩阵的二维前缀积（对大素数取模）。那么在给定二分长度 k 的前提下，我们每次可以枚举一个矩形的左上角 $(i,j)$ ，利用逆元计算出这么个矩形的积，再和这种字母的纯 $k ∗ k$ 正方形对应的哈希值比对。如果担心碰撞，只需改成双哈希就好。总复杂度为常数有点大的 $O(nmlog(n))$ 。</li><li>我们如果在原矩阵 F 的基础上预处理出一个新矩阵 $G$, 第 $i$ 行第 $j$ 列的值的意义为：这个值在这一行前面有多少个连续的数和它相同（包括自己）。<br>随后我们对于每一列从上到下遍历，如果一个边长为 $k$，右下角位于 $(i,j)$ 的矩形存在的话，一定会满足： ${\min\limits_{i-k &lt; t\leq i} {G[t][j]} \geq k}$ 可想而知，对于我们枚举的右下角，右上角也是具备单调性的，所以我们可以采用二分 + 对每一列维护 $RMQ$ 数组的方法获得一个 $O(nmlog(n))$ 的方法。</li></ol><pre><code>#include&lt;bits/stdc++.h&gt;#define inf 1&lt;&lt;29#define maxn 1000010typedef long long ll;using namespace std;int n,mp[210][210],ans;char str[110];int main(){    cin&gt;&gt;n;    for(int i=1;i&lt;=n;++i){        scanf(&quot;%s&quot;,str);        int len=strlen(str);        char s=str[0],t=str[len-1];        for(int j=&#39;a&#39;;j&lt;=&#39;z&#39;;++j){            if(mp[j][s]){                mp[j][t]=max(mp[j][t],mp[j][s]+len);            }        }        mp[s][t]=max(mp[s][t],len);    }    for(int i=&#39;a&#39;;i&lt;=&#39;z&#39;;++i) ans=max(ans,mp[i][i]);    cout&lt;&lt;ans&lt;&lt;endl;    return 0;}</code></pre><h2 id="C-Can-You-Help-ZSGW"><a href="#C-Can-You-Help-ZSGW" class="headerlink" title="C-Can You Help ZSGW"></a><a href="https://ac.nowcoder.com/acm/contest/5166/C" target="_blank" rel="noopener">C-Can You Help ZSGW</a></h2><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>有一个排列，已知我们对于这个排列执行单调栈算法过程中，遍历到每一个位置之后单调栈的大小，有些位置缺失可以任意。求一个满足这种情况的字典序最小的排列。</p><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先我们应该做的事，是补全这个单调栈数组 $b$。单调栈数组由于单调栈算法的特点，必然满足这么几个特点：</p><ol><li>$b[1] = 1$</li><li>若 $b[i] &gt; b[i − 1]$ ，则 $b[i] = b[i − 1] + 1$ ，且 $a[i] &gt; a[i − 1]$ 。</li><li>对于 $b[i] &lt;= b[i − 1]$ ，一定有 $a[i] &lt; a[i − 1]$ 。</li></ol><p>我们从左到右依次补全每一个为 $−1$ 的格子，那么策略应该是：</p><ol><li>若 $i = 1$ ，$b[i] = 1$ 。</li><li>否则，如果我们填一个比 $b[i − 1]$ 小的数的话，就意味着之后补全的时候 $a[i − 1] &gt; a[i]$ ，在字典序上不会是个好主意。所以应该填 $b[i − 1] + 1$ 。</li></ol><p>补全数组之后，规律如下：<br>首先我们可以发现所有为 $1$ 的位置组成了以 $1$ 截止的降序序列。然后对于每个被 $1$ 分割的子区间，$2$ 也会满足类似的规律。然后对于 $2$ 进一步分割的子区间 $3$ 也会如此。于是我们按照权值递增的顺序，依次填入每个数，然后分治递归填写子区间。标程的复杂度为 $O(nlog(n))$，实际上利用分治区间的单调性可以进一步优化到 $O(n)$。</p><pre><code>#include &lt;bits/stdc++.h&gt;using namespace std;int T, n;int p[200005];int lst[200005], tail;int pre[200005];int nxt[200005];int s[200005];int main() {    scanf(&quot;%d&quot;, &amp;T);    for(int k = 0; k &lt; T; ++k) {        scanf(&quot;%d&quot;, &amp;n);        for(int i = 0; i &lt;= n; ++i) nxt[i] = pre[i] = 0;        tail = 0;        for(int i = 1; i &lt;= n; ++i) scanf(&quot;%d&quot;, &amp;p[i]);        p[1] = 1;        for(int i = 2; i &lt;= n; ++i) if(p[i] == -1) {            if(p[i + 1] - p[i - 1] == 2) p[i] = p[i - 1] + 1;            else p[i] = p[i - 1] + 1;        }        for(int i = 1; i &lt;= n; ++i) {            if(p[i] &gt; p[i - 1]) {                nxt[tail] = i;                pre[i] = tail;                tail = i;            } else {                int x = lst[p[i]];                nxt[pre[x]] = i;                pre[i] = pre[x];                nxt[i] = x;                pre[x] = i;            }            lst[p[i]] = i;        }        for(int i = 1, j = nxt[0]; i &lt;= n; ++i, j = nxt[j]) s[j] = i;        for(int i = 1; i &lt;= n; ++i) printf(&quot;%d &quot;, s[i]);        printf(&quot;\n&quot;);    }    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM解题报告 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>视频切片后自动上传至国内免费CDN，无成本加速视频播放</title>
      <link href="//post/TechShare/videoSec/"/>
      <url>//post/TechShare/videoSec/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5"  face = "楷体">视频切片后自动上传至国内免费CDN，无成本加速视频播放</font></center></blockquote><a id="more"></a><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><pre><code>【2020.4.1】由于语雀修复了上传bug，所以移除语雀cdn，默认修改为阿里云图床</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Github地址：<a href="https://github.com/MoeClub/Note/tree/master/ffmpeg" target="_blank" rel="noopener">https://github.com/MoeClub/Note/tree/master/ffmpeg</a></p><ol><li>安装ffmpeg<pre><code>wget https://www.moerats.com/usr/down/ffmpeg/ffmpeg-git-$(getconf LONG_BIT)bit-static.tar.xztar xvf ffmpeg-git-*-static.tar.xzmv ffmpeg-git-*/ffmpeg  ffmpeg-git-*/ffprobe /usr/local/bin/rm -rf ffmpeg-git-*</code></pre></li><li>安装脚本<pre><code>#新建/opt/ffmpeg文件夹存放脚本等文件mkdir /opt/ffmpeg &amp;&amp; cd $_#下载并运行脚本wget https://raw.githubusercontent.com/MoeClub/Note/master/ffmpeg/Install.shbash Install.sh</code></pre></li><li>启动播放器<br>由于切片生成<code>m3u8</code>文件后，需要播放器才能播放，而上传脚本也会自动推送<code>m3u8</code>文件到播放器根目录，所以这里可以配合一起用，当然自己会播放<code>m3u8</code>的也可以不用搭建，自行选择。<br>安装<code>pip3</code>：<pre><code>#CenOS 6系统rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpmyum install python34 -ywget https://bootstrap.pypa.io/get-pip.pypython3 get-pip.py</code></pre></li></ol><p>#CenOS 7系统<br>rpm -Uvh <a href="https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm" target="_blank" rel="noopener">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</a><br>yum install python36 -y<br>wget <a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/get-pip.py</a><br>python3 get-pip.py</p><p>#Debian/Ubuntu系统<br>apt update<br>apt install python3-pip -y</p><pre><code>安装依赖：</code></pre><p>#进入到播放源码文件夹<br>cd /opt/ffmpeg/Player<br>pip3 install tornado</p><pre><code>后台启动：</code></pre><p>nohup python3 Player.py&amp;</p><pre><code>注意`Player.py`文件的`MasterKey`值需和`publish.sh`的`Token`值对应，别乱改就行。4. 脚本用法</code></pre><p>#命令示例<br>bash /path/to/media.sh &lt;不含特殊字符的文件名.mp4&gt; [特殊选项]</p><p>#特殊选项: 数字；可选参数，默认为0<br>#0：自动根据文件比特率计算合适的切片大小。(目标文件大小小于20M，一般情况下没问题)<br>#1：强制重新编码，重新编码比特率为2400k。(一般用于非H264编码，文件切片，速度较慢)<br>#2：自定义切片时间，当为2时切片时间为3秒，当大于等于3时切片时间为特殊选项数字。</p><pre><code>使用示例：</code></pre><p>#进入视频所在目录<br>cd /root/movies</p><p>#默认模式切片<br>bash /opt/ffmpeg/media.sh rats.mp4<br>#强制重新编码<br>bash /opt/ffmpeg/media.sh rats.mp4 1<br>#极速模式, 设置2s一个切片(源文件为H264编码情况下)<br>bash /opt/ffmpeg/media.sh rats.mp4 2</p><pre><code>5. 播放示例</code></pre><p>#查看推送到播放器这边的m3u8所有文件<br><a href="http://ip:5866/Player/list" target="_blank" rel="noopener">http://ip:5866/Player/list</a></p><p>#播放list显示的根目录下的rats.m3u8文件<br><a href="http://ip:5866/Player/rats.m3u8" target="_blank" rel="noopener">http://ip:5866/Player/rats.m3u8</a></p><pre><code>## 上传到语雀CDN ##</code></pre><p>提示：该方案可选，目前语雀默认免费10G，具体可参考官方说明。</p><pre><code>先前往语雀官网注册一个账号→[传送门](https://www.yuque.com/)，然后获取`ctoken`和`session`的值，这里说下大概获取方法，以谷歌浏览器为例。登录后，`F12`进入控制台选择`Network`，随便点击一个以`yuque`开头的链接文件，再选择`Cookies`即可看到所需要的2个参数。&lt;img src=&#39;https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/17.png&#39;&gt;然后复制`ctoken`和`session`的值。接下来查看语雀脚本→[传送门](https://github.com/MoeClub/Note/blob/master/ffmpeg/upload_yuque.sh)，将脚本所有的内容复制替换到`upload.sh`脚本里面，并填入`ctoken`和`session`的值，保存即可，上传方法参考上面。最后如果你是`vps`的话，就不建议强制转码，只切片就行了，不然长时间占用`cpu`的话，服务器可能会被`ban`，基本上大多数`mp4`都可以直接切片。转载于：https://www.moerats.com/archives/1024/</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于宝塔Docker自建Bitwarden密码管理服务</title>
      <link href="//post/TechShare/Bitwarden/"/>
      <url>//post/TechShare/Bitwarden/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Bitwarden是一个跨平台的密码管理软件，类似于 1Password、EnPass、LastPass 等。Bitwarden 是免费开源的，可以将服务端部署在自己的服务器上，比如群晖，并且支持 Docker 部署。但官方的&gt;镜像要求至少 2G 以上内存，要求比较高。有人用 Rust 实现了 Bitwarden 服务器，项目叫 bitwarden_rs，并且提供了 Docker 镜像，这个实现更进一步降低了对机器配置的要求，并且 Docker 镜像体积很小，部署非常方便。</p></blockquote><a id="more"></a><h2 id="宝塔安装Docker"><a href="#宝塔安装Docker" class="headerlink" title="宝塔安装Docker"></a>宝塔安装Docker</h2><p>进入到宝塔面板的软件商店，搜索docker安装即可。<br><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/01.png'></p><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>打开docker管理器，点击获取镜像，输入Bitwarden_rs的官方镜像<code>bitwardenrs/server</code>后点击获取镜像。<br><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/02.png'></p><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><ol><li>点击创建容器按钮</li><li>填写端口映射中的容器端口：80,服务端口：6666(6666可以自定义)</li><li>填写目录映射中的服务器目录：<code>/www/wwwroot/bitwarden.liubing.me</code>(该目录可以自定义)，容器目录：<code>/data</code></li><li>填写内存配额，根据自己服务器的配置按需填写</li><li>提交创建容器</li><li>点击容器名称，修改容器名称为Bitwarden以方便辨认<blockquote><p>端口映射和目录映射填写完成后一定要点击+号进行添加</p></blockquote></li></ol><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/03.png'><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/04.png'><h2 id="添加站点"><a href="#添加站点" class="headerlink" title="添加站点"></a>添加站点</h2><p>一般可以添加一个二级域名，按自己需要起名字即可，由于我用的<code>cloudflare</code>的服务，所以以这个为演示，阿里云、百度云等其他厂商添加二级域名都是差不多的。</p><p>添加一个A记录，名字为bitwarden，指向的IP为你服务器VPS的IP地址，最后的访问地址就是<code>bitwarden.liubing.me</code>了。<br><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/05.png'></p><p>域名准备好后，在宝塔里面添加一个站点，FTP、数据库均不用创建，PHP版本选择纯静态。<br><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/06.png'></p><p>网站添加完成后设置SSL，自己准备证书，或者用免费的，我用的一直是cloudflare颁发的证书。<br>设置完毕后开启强制Https<br><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/07.png'></p><p>最后添加一个反向代理，名称随意填，目标URL为<code>http://127.0.0.1:6666</code>，端口号和上面<code>创建容器</code>时<code>服务端口</code>保持一直。<br><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/08.png'></p><h2 id="完成自建"><a href="#完成自建" class="headerlink" title="完成自建"></a>完成自建</h2><p>上述步骤都做完后别忘了在宝塔面板安全-防火墙中放行端口<code>6666</code>。<br>最后不出意外的话访问<code>https://bitwarden.liubing.me</code>就能看到界面了。<br>首次完成安装页面是英文的，自己可以创建一个账号登录进去，在设置-选项-语言中设置语言。<br><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/09.png'></p><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/10.png'><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>一般自建的服务都是自己用的，所以如果想关闭注册的话可以按照下面的方法做：</p><ol><li><p>在docker管理器中点击刚才创建的容器的状态绿色图标，停止容器运行，然后删除容器（删除容器后不会删除数据）</p><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/11.png'></li><li><p>在VPS中运行下面的命令重新运行容器，其中Bitwarden为容器的名字，<code>SIGNUPS_ALLOWED=false</code>代表禁止注册，<code>/www/wwwroot/bitwarden.liubing.me</code>为上面创建容器时所写的服务器目录,<code>/data</code>为容器目录，<code>6666:80</code>代表上面创建容器时的服务端口:容器端口</p></li></ol><pre><code>docker run -d --name Bitwarden \  -e SIGNUPS_ALLOWED=false \  -v /www/wwwroot/bitwarden.liubing.me/:/data/ \  -p 6666:80 \  bitwardenrs/server:latest</code></pre><h3 id="SHELL"><a href="#SHELL" class="headerlink" title="SHELL"></a>SHELL</h3><p>运行完成后在容器列表里就又能看到了。<br>然后再去试下创建账号就会出现一个不能创建账号的错误提示。<br><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/12.png'></p><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p>参考项目的wiki即可：<br><a href="https://github.com/dani-garcia/bitwarden_rs/wiki" target="_blank" rel="noopener">https://github.com/dani-garcia/bitwarden_rs/wiki</a></p><h2 id="插件及App下载"><a href="#插件及App下载" class="headerlink" title="插件及App下载"></a>插件及App下载</h2><p>可以到bitwarden官网自行下载：<a href="https://bitwarden.com/#download" target="_blank" rel="noopener">https://bitwarden.com/#download</a></p><h2 id="连接自建的服务"><a href="#连接自建的服务" class="headerlink" title="连接自建的服务"></a>连接自建的服务</h2><p>以CHrome的插件为例子，如果之前有安装及登录过，可以在设置中退出登录。<br>点击左上角的设置图标，填写自建服务器的URL保存后登录即可。<br><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/13.png'></p><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/14.png'><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后就可以愉快的在浏览器和手机上愉快的使用了，顺便说句：我的密码存储我做主，再也不用害怕密码忘记的事了，也可以记录些银行卡等隐私信息，随时复制。<br><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/15.png'><br><img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.01/image/Article/2020-4-2/16.png'> </p><p>转自：<a href="">https://liubing.me/bt-docker-build-bitwarden.html</a> 作者：LiuBing</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Docker一键部署Cloudreve网盘</title>
      <link href="//post/TechShare/CloudreveOnDocker/"/>
      <url>//post/TechShare/CloudreveOnDocker/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5"  face = "楷体">使用Docker一键部署Cloudreve网盘</font></center></blockquote><a id="more"></a><h2 id="Cloudreve-Docker简介"><a href="#Cloudreve-Docker简介" class="headerlink" title="Cloudreve-Docker简介"></a>Cloudreve-Docker简介</h2><p>项目地址：<a href="https://github.com/littleplus/Cloudreve-Docker" target="_blank" rel="noopener">https://github.com/littleplus/Cloudreve-Docker</a><br>容器地址：<a href="https://hub.docker.com/r/littleplus/cloudreve-3.0.0-rc-1" target="_blank" rel="noopener">https://hub.docker.com/r/littleplus/cloudreve-3.0.0-rc-1</a><br>本Docker容器基于redis:5-alpine基础镜像制作，在保证程序运行稳定的前提下，实现最小空间占用以及资源消耗<br>本Docker容器的Cloudreve版本为Cloudreve-3.0.0-RC-1，大概率镜像及Dockerfile将不会再更新</p><h2 id="容器特点"><a href="#容器特点" class="headerlink" title="容器特点"></a>容器特点</h2><ol><li>镜像大小仅70M左右，资源消耗极低</li><li>外挂程序运行目录，可以自行更新Cloudreve版本，修改配置文件</li><li>在初次使用时，会在<code>/etc/cloudreve</code>目录生成cloudreve二进制文件以及配置文件</li><li>在<code>/etc/cloudreve/cloudreve.db</code>不存在时，由cloudreve自行生成sqlite数据库，密码可以在<code>docker logs</code>里面看到</li></ol><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>默认前提：已经安装好docker并使docker服务正常运行中</p><ol><li>git clone本项目或下载项目压缩包</li><li>运行scripts/下的start.sh脚本，保存管理员用户名及密码信息（仅在初次创建数据库时显示）</li><li>默认会将cloudreve本体、配置文件、数据库存放到/etc/cloudreve，将宿主机/data/cloudreve绑定到容器/data</li><li>在cloudreve内修改默认存储策略中的存储路径为<pre><code>/data/uploads/{uid}/{path}</code></pre></li></ol><h2 id="快速开始-1"><a href="#快速开始-1" class="headerlink" title="快速开始"></a>快速开始</h2><ol><li>忘记保存初始密码了怎么办<br>删除<code>/etc/cloudreve/cloudreve.db</code>文件（会丢失原有文件记录），运行scripts/的start.sh，会重新生成密码</li><li>如何升级Cloudreve<br>备份/etc/cloudreve文件夹，将新版Cloudreve二进制程序替换/etc/cloudreve的cloudreve文件，运行<pre><code>docker restart cloudreve</code></pre></li><li>如何修改Cloudreve基础配置<br>修改<code>/etc/cloudreve/cloudreve.conf</code>，运行<pre><code>docker restart cloudreve</code></pre>重启容器生效</li><li>如何修改Cloudreve主机监听端口<br>修改<code>scripts/start.sh</code>，将左边的端口号替换为需要要监听的端口，运行scripts/start.sh生效</li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十六进制颜色表</title>
      <link href="//post/TechShare/HexColor/"/>
      <url>//post/TechShare/HexColor/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5"  face = "楷体">十六进制颜色表</font></center></blockquote><a id="more"></a><h2 id="文字查找"><a href="#文字查找" class="headerlink" title="文字查找"></a>文字查找</h2><table><tr align="center"><td><strong>颜 色</strong></a></td><td><strong>英文代码</strong></td><td><strong>形象描述</strong></td><td><strong>十六进制</strong></td><td><strong>RGB</strong></td></tr><tr align="center"><td bgcolor="#ffb6c1">　</td><td><center>LightPink</center></td><td>浅粉红</td><td>#FFB6C1</td><td>255,182,193</td></tr><tr align="center"><td bgcolor="#ffc0cb">　</td><td>Pink</td><td>粉红</td><td>#FFC0CB</td><td>255,192,203</td></tr><tr align="center"><td bgcolor="#dc143c">　</td><td>Crimson</td><td>猩红</td><td>#DC143C</td><td>220,20,60</td></tr><tr align="center"><td bgcolor="#fff0f5">　</td><td>LavenderBlush</td><td>脸红的淡紫色</td><td>#FFF0F5</td><td>255,240,245</td></tr><tr align="center"><td bgcolor="#db7093">　</td><td>PaleVioletRed</td><td>苍白的紫罗兰红色</td><td>#DB7093</td><td>219,112,147</td></tr><tr align="center"><td bgcolor="#ff69b4">　</td><td>HotPink</td><td>热情的粉红</td><td>#FF69B4</td><td>255,105,180</td></tr><tr align="center"><td bgcolor="#ff1493">　</td><td>DeepPink</td><td>深粉色</td><td>#FF1493</td><td>255,20,147</td></tr><tr align="center"><td bgcolor="#c71585">　</td><td>MediumVioletRed</td><td>适中的紫罗兰红色</td><td>#C71585</td><td>199,21,133</td></tr><tr align="center"><td bgcolor="#da70d6">　</td><td>Orchid</td><td>兰花的紫色</td><td>#DA70D6</td><td>218,112,214</td></tr><tr align="center"><td bgcolor="#d8bfd8">　</td><td>Thistle</td><td>蓟</td><td>#D8BFD8</td><td>216,191,216</td></tr><tr align="center"><td bgcolor="#dda0dd">　</td><td>plum</td><td>李子</td><td>#DDA0DD</td><td>221,160,221</td></tr><tr align="center"><td bgcolor="#ee82ee">　</td><td>Violet</td><td>紫罗兰</td><td>#EE82EE</td><td>238,130,238</td></tr><tr align="center"><td bgcolor="#ff00ff">　</td><td>Magenta</td><td>洋红</td><td>#FF00FF</td><td>255,0,255</td></tr><tr align="center"><td bgcolor="#ff00ff">　</td><td>Fuchsia</td><td>灯笼海棠(紫红色)</td><td>#FF00FF</td><td>255,0,255</td></tr><tr align="center"><td bgcolor="#8b008b">　</td><td>DarkMagenta</td><td>深洋红色</td><td>#8B008B</td><td>139,0,139</td></tr><tr align="center"><td bgcolor="#800080">　</td><td>Purple</td><td>紫色</td><td>#800080</td><td>128,0,128</td></tr><tr align="center"><td bgcolor="#ba55d3">　</td><td>MediumOrchid</td><td>适中的兰花紫</td><td>#BA55D3</td><td>186,85,211</td></tr><tr align="center"><td bgcolor="#9400d3">　</td><td>DarkVoilet</td><td>深紫罗兰色</td><td>#9400D3</td><td>148,0,211</td></tr><tr align="center"><td bgcolor="#9932cc">　</td><td>DarkOrchid</td><td>深兰花紫</td><td>#9932CC</td><td>153,50,204</td></tr><tr align="center"><td bgcolor="#4b0082">　</td><td>Indigo</td><td>靛青</td><td>#4B0082</td><td>75,0,130</td></tr><tr align="center"><td bgcolor="#8a2be2">　</td><td>BlueViolet</td><td>深紫罗兰的蓝色</td><td>#8A2BE2</td><td>138,43,226</td></tr><tr align="center"><td bgcolor="#9370db">　</td><td>MediumPurple</td><td>适中的紫色</td><td>#9370DB</td><td>147,112,219</td></tr><tr align="center"><td bgcolor="#7b68ee">　</td><td>MediumSlateBlue</td><td>适中的板岩暗蓝灰色</td><td>#7B68EE</td><td>123,104,238</td></tr><tr align="center"><td bgcolor="#6a5acd">　</td><td>SlateBlue</td><td>板岩暗蓝灰色</td><td>#6A5ACD</td><td>106,90,205</td></tr><tr align="center"><td bgcolor="#483d8b">　</td><td>DarkSlateBlue</td><td>深岩暗蓝灰色</td><td>#483D8B</td><td>72,61,139</td></tr><tr align="center"><td bgcolor="#e6e6fa">　</td><td>Lavender</td><td>熏衣草花的淡紫色</td><td>#E6E6FA</td><td>230,230,250</td></tr><tr align="center"><td bgcolor="#f8f8ff">　</td><td>GhostWhite</td><td>幽灵的白色</td><td>#F8F8FF</td><td>248,248,255</td></tr><tr align="center"><td bgcolor="#0000ff">　</td><td>Blue</td><td>纯蓝</td><td>#0000FF</td><td>0,0,255</td></tr><tr align="center"><td bgcolor="#0000cd">　</td><td>MediumBlue</td><td>适中的蓝色</td><td>#0000CD</td><td>0,0,205</td></tr><tr align="center"><td bgcolor="#191970">　</td><td>MidnightBlue</td><td>午夜的蓝色</td><td>#191970</td><td>25,25,112</td></tr><tr align="center"><td bgcolor="#00008b">　</td><td>DarkBlue</td><td>深蓝色</td><td>#00008B</td><td>0,0,139</td></tr><tr align="center"><td bgcolor="#000080">　</td><td>Navy</td><td>海军蓝</td><td>#000080</td><td>0,0,128</td></tr><tr align="center"><td bgcolor="#4169e1">　</td><td>RoyalBlue</td><td>皇军蓝</td><td>#4169E1</td><td>65,105,225</td></tr><tr align="center"><td bgcolor="#6495ed">　</td><td>CornflowerBlue</td><td>矢车菊的蓝色</td><td>#6495ED</td><td>100,149,237</td></tr><tr align="center"><td bgcolor="#b0c4de">　</td><td>LightSteelBlue</td><td>淡钢蓝</td><td>#B0C4DE</td><td>176,196,222</td></tr><tr align="center"><td bgcolor="#778899">　</td><td>LightSlateGray</td><td>浅石板灰</td><td>#778899</td><td>119,136,153</td></tr><tr align="center"><td bgcolor="#708090">　</td><td>SlateGray</td><td>石板灰</td><td>#708090</td><td>112,128,144</td></tr><tr align="center"><td bgcolor="#1e90ff">　</td><td>DoderBlue</td><td>道奇蓝</td><td>#1E90FF</td><td>30,144,255</td></tr><tr align="center"><td bgcolor="#f0f8ff">　</td><td>AliceBlue</td><td>爱丽丝蓝</td><td>#F0F8FF</td><td>240,248,255</td></tr><tr align="center"><td bgcolor="#4682b4">　</td><td>SteelBlue</td><td>钢蓝</td><td>#4682B4</td><td>70,130,180</td></tr><tr align="center"><td bgcolor="#87cefa">　</td><td>LightSkyBlue</td><td>淡蓝色</td><td>#87CEFA</td><td>135,206,250</td></tr><tr align="center"><td bgcolor="#87ceeb">　</td><td>SkyBlue</td><td>天蓝色</td><td>#87CEEB</td><td>135,206,235</td></tr><tr align="center"><td bgcolor="#00bfff">　</td><td>DeepSkyBlue</td><td>深天蓝</td><td>#00BFFF</td><td>0,191,255</td></tr><tr align="center"><td bgcolor="#add8e6">　</td><td>LightBLue</td><td>淡蓝</td><td>#ADD8E6</td><td>173,216,230</td></tr><tr align="center"><td bgcolor="#b0e0e6">　</td><td>PowDerBlue</td><td>火药蓝</td><td>#B0E0E6</td><td>176,224,230</td></tr><tr align="center"><td bgcolor="#5f9ea0">　</td><td>CadetBlue</td><td>军校蓝</td><td>#5F9EA0</td><td>95,158,160</td></tr><tr align="center"><td bgcolor="#f0ffff">　</td><td>Azure</td><td>蔚蓝色</td><td>#F0FFFF</td><td>240,255,255</td></tr><tr align="center"><td bgcolor="#e1ffff">　</td><td>LightCyan</td><td>淡青色</td><td>#E1FFFF</td><td>225,255,255</td></tr><tr align="center"><td bgcolor="#afeeee">　</td><td>PaleTurquoise</td><td>苍白的绿宝石</td><td>#AFEEEE</td><td>175,238,238</td></tr><tr align="center"><td bgcolor="#00ffff">　</td><td>Cyan</td><td>青色</td><td>#00FFFF</td><td>0,255,255</td></tr><tr align="center"><td bgcolor="#00ffff">　</td><td>Aqua</td><td>水绿色</td><td>#00FFFF</td><td>0,255,255</td></tr><tr align="center"><td bgcolor="#00ced1">　</td><td>DarkTurquoise</td><td>深绿宝石</td><td>#00CED1</td><td>0,206,209</td></tr><tr align="center"><td bgcolor="#2f4f4f">　</td><td>DarkSlateGray</td><td>深石板灰</td><td>#2F4F4F</td><td>47,79,79</td></tr><tr align="center"><td bgcolor="#008b8b">　</td><td>DarkCyan</td><td>深青色</td><td>#008B8B</td><td>0,139,139</td></tr><tr align="center"><td bgcolor="#008080">　</td><td>Teal</td><td>水鸭色</td><td>#008080</td><td>0,128,128</td></tr><tr align="center"><td bgcolor="#48d1cc">　</td><td>MediumTurquoise</td><td>适中的绿宝石</td><td>#48D1CC</td><td>72,209,204</td></tr><tr align="center"><td bgcolor="#20b2aa">　</td><td>LightSeaGreen</td><td>浅海洋绿</td><td>#20B2AA</td><td>32,178,170</td></tr><tr align="center"><td bgcolor="#40e0d0">　</td><td>Turquoise</td><td>绿宝石</td><td>#40E0D0</td><td>64,224,208</td></tr><tr align="center"><td bgcolor="#7fffaa">　</td><td>Auqamarin</td><td>绿玉\碧绿色</td><td>#7FFFAA</td><td>127,255,170</td></tr><tr align="center"><td bgcolor="#00fa9a">　</td><td>MediumAquamarine</td><td>适中的碧绿色</td><td>#00FA9A</td><td>0,250,154</td></tr><tr align="center"><td bgcolor="#00ff7f">　</td><td>MediumSpringGreen</td><td>适中的春天的绿色</td><td>#00FF7F</td><td>0,255,127</td></tr><tr align="center"><td bgcolor="#f5fffa">　</td><td>MintCream</td><td>薄荷奶油</td><td>#F5FFFA</td><td>245,255,250</td></tr><tr align="center"><td bgcolor="#3cb371">　</td><td>SpringGreen</td><td>春天的绿色</td><td>#3CB371</td><td>60,179,113</td></tr><tr align="center"><td bgcolor="#2e8b57">　</td><td>SeaGreen</td><td>海洋绿</td><td>#2E8B57</td><td>46,139,87</td></tr><tr align="center"><td bgcolor="#f0fff0">　</td><td>Honeydew</td><td>蜂蜜</td><td>#F0FFF0</td><td>240,255,240</td></tr><tr align="center"><td bgcolor="#90ee90">　</td><td>LightGreen</td><td>淡绿色</td><td>#90EE90</td><td>144,238,144</td></tr><tr align="center"><td bgcolor="#98fb98">　</td><td>PaleGreen</td><td>苍白的绿色</td><td>#98FB98</td><td>152,251,152</td></tr><tr align="center"><td bgcolor="#8fbc8f">　</td><td>DarkSeaGreen</td><td>深海洋绿</td><td>#8FBC8F</td><td>143,188,143</td></tr><tr align="center"><td bgcolor="#32cd32">　</td><td>LimeGreen</td><td>酸橙绿</td><td>#32CD32</td><td>50,205,50</td></tr><tr align="center"><td bgcolor="#00ff00">　</td><td>Lime</td><td>酸橙色</td><td>#00FF00</td><td>0,255,0</td></tr><tr align="center"><td bgcolor="#228b22">　</td><td>ForestGreen</td><td>森林绿</td><td>#228B22</td><td>34,139,34</td></tr><tr align="center"><td bgcolor="#008000">　</td><td>Green</td><td>纯绿</td><td>#008000</td><td>0,128,0</td></tr><tr align="center"><td bgcolor="#006400">　</td><td>DarkGreen</td><td>深绿色</td><td>#006400</td><td>0,100,0</td></tr><tr align="center"><td bgcolor="#7fff00">　</td><td>Chartreuse</td><td>查特酒绿</td><td>#7FFF00</td><td>127,255,0</td></tr><tr align="center"><td bgcolor="#7cfc00">　</td><td>LawnGreen</td><td>草坪绿</td><td>#7CFC00</td><td>124,252,0</td></tr><tr align="center"><td bgcolor="#adff2f">　</td><td>GreenYellow</td><td>绿黄色</td><td>#ADFF2F</td><td>173,255,47</td></tr><tr align="center"><td bgcolor="#556b2f">　</td><td>OliveDrab</td><td>橄榄土褐色</td><td>#556B2F</td><td>85,107,47</td></tr><tr align="center"><td bgcolor="#f5f5dc">　</td><td>Beige</td><td>米色(浅褐色)</td><td>#F5F5DC</td><td>245,245,220</td></tr><tr align="center"><td bgcolor="#fafad2">　</td><td>LightGoldenrodYellow</td><td>浅秋麒麟黄</td><td>#FAFAD2</td><td>250,250,210</td></tr><tr align="center"><td bgcolor="#fffff0">　</td><td>Ivory</td><td>象牙</td><td>#FFFFF0</td><td>255,255,240</td></tr><tr align="center"><td bgcolor="#ffffe0">　</td><td>LightYellow</td><td>浅黄色</td><td>#FFFFE0</td><td>255,255,224</td></tr><tr align="center"><td bgcolor="#ffff00">　</td><td>Yellow</td><td>纯黄</td><td>#FFFF00</td><td>255,255,0</td></tr><tr align="center"><td bgcolor="#808000">　</td><td>Olive</td><td>橄榄</td><td>#808000</td><td>128,128,0</td></tr><tr align="center"><td bgcolor="#bdb76b">　</td><td>DarkKhaki</td><td>深卡其布</td><td>#BDB76B</td><td>189,183,107</td></tr><tr align="center"><td bgcolor="#fffacd">　</td><td>LemonChiffon</td><td>柠檬薄纱</td><td>#FFFACD</td><td>255,250,205</td></tr><tr align="center"><td bgcolor="#eee8aa">　</td><td>PaleGodenrod</td><td>灰秋麒麟</td><td>#EEE8AA</td><td>238,232,170</td></tr><tr align="center"><td bgcolor="#f0e68c">　</td><td>Khaki</td><td>卡其布</td><td>#F0E68C</td><td>240,230,140</td></tr><tr align="center"><td bgcolor="#ffd700">　</td><td>Gold</td><td>金</td><td>#FFD700</td><td>255,215,0</td></tr><tr align="center"><td bgcolor="#fff8dc">　</td><td>Cornislk</td><td>玉米色</td><td>#FFF8DC</td><td>255,248,220</td></tr><tr align="center"><td bgcolor="#daa520">　</td><td>GoldEnrod</td><td>秋麒麟</td><td>#DAA520</td><td>218,165,32</td></tr><tr align="center"><td bgcolor="#fffaf0">　</td><td>FloralWhite</td><td>花的白色</td><td>#FFFAF0</td><td>255,250,240</td></tr><tr align="center"><td bgcolor="#fdf5e6">　</td><td>OldLace</td><td>老饰带</td><td>#FDF5E6</td><td>253,245,230</td></tr><tr align="center"><td bgcolor="#f5deb3">　</td><td>Wheat</td><td>小麦色</td><td>#F5DEB3</td><td>245,222,179</td></tr><tr align="center"><td bgcolor="#ffe4b5">　</td><td>Moccasin</td><td>鹿皮鞋</td><td>#FFE4B5</td><td>255,228,181</td></tr><tr align="center"><td bgcolor="#ffa500">　</td><td>Orange</td><td>橙色</td><td>#FFA500</td><td>255,165,0</td></tr><tr align="center"><td bgcolor="#ffefd5">　</td><td>PapayaWhip</td><td>番木瓜</td><td>#FFEFD5</td><td>255,239,213</td></tr><tr align="center"><td bgcolor="#ffebcd">　</td><td>BlanchedAlmond</td><td>漂白的杏仁</td><td>#FFEBCD</td><td>255,235,205</td></tr><tr align="center"><td bgcolor="#ffdead">　</td><td>NavajoWhite</td><td>纳瓦霍白</td><td>#FFDEAD</td><td>255,222,173</td></tr><tr align="center"><td bgcolor="#faebd7">　</td><td>AntiqueWhite</td><td>古代的白色</td><td>#FAEBD7</td><td>250,235,215</td></tr><tr align="center"><td bgcolor="#d2b48c">　</td><td>Tan</td><td>晒黑</td><td>#D2B48C</td><td>210,180,140</td></tr><tr align="center"><td bgcolor="#deb887">　</td><td>BrulyWood</td><td>结实的树</td><td>#DEB887</td><td>222,184,135</td></tr><tr align="center"><td bgcolor="#ffe4c4">　</td><td>Bisque</td><td>(浓汤)乳脂,番茄等</td><td>#FFE4C4</td><td>255,228,196</td></tr><tr align="center"><td bgcolor="#ff8c00">　</td><td>DarkOrange</td><td>深橙色</td><td>#FF8C00</td><td>255,140,0</td></tr><tr align="center"><td bgcolor="#faf0e6">　</td><td>Linen</td><td>亚麻布</td><td>#FAF0E6</td><td>250,240,230</td></tr><tr align="center"><td bgcolor="#cd853f">　</td><td>Peru</td><td>秘鲁</td><td>#CD853F</td><td>205,133,63</td></tr><tr align="center"><td bgcolor="#ffdab9">　</td><td>PeachPuff</td><td>桃色</td><td>#FFDAB9</td><td>255,218,185</td></tr><tr align="center"><td bgcolor="#f4a460">　</td><td>SandyBrown</td><td>沙棕色</td><td>#F4A460</td><td>244,164,96</td></tr><tr align="center"><td bgcolor="#d2691e">　</td><td>Chocolate</td><td>巧克力</td><td>#D2691E</td><td>210,105,30</td></tr><tr align="center"><td bgcolor="#8b4513">　</td><td>SaddleBrown</td><td>马鞍棕色</td><td>#8B4513</td><td>139,69,19</td></tr><tr align="center"><td bgcolor="#fff5ee">　</td><td>SeaShell</td><td>海贝壳</td><td>#FFF5EE</td><td>255,245,238</td></tr><tr align="center"><td bgcolor="#a0522d">　</td><td>Sienna</td><td>黄土赭色</td><td>#A0522D</td><td>160,82,45</td></tr><tr align="center"><td bgcolor="#ffa07a">　</td><td>LightSalmon</td><td>浅鲜肉(鲑鱼)色</td><td>#FFA07A</td><td>255,160,122</td></tr><tr align="center"><td bgcolor="#ff7f50">　</td><td>Coral</td><td>珊瑚</td><td>#FF7F50</td><td>255,127,80</td></tr><tr align="center"><td bgcolor="#ff4500">　</td><td>OrangeRed</td><td>橙红色</td><td>#FF4500</td><td>255,69,0</td></tr><tr align="center"><td bgcolor="#e9967a">　</td><td>DarkSalmon</td><td>深鲜肉(鲑鱼)色</td><td>#E9967A</td><td>233,150,122</td></tr><tr align="center"><td bgcolor="#ff6347">　</td><td>Tomato</td><td>番茄</td><td>#FF6347</td><td>255,99,71</td></tr><tr align="center"><td bgcolor="#ffe4e1">　</td><td>MistyRose</td><td>薄雾玫瑰</td><td>#FFE4E1</td><td>255,228,225</td></tr><tr align="center"><td bgcolor="#fa8072">　</td><td>Salmon</td><td>鲜肉(鲑鱼)色</td><td>#FA8072</td><td>250,128,114</td></tr><tr align="center"><td bgcolor="#fffafa">　</td><td>Snow</td><td>雪</td><td>#FFFAFA</td><td>255,250,250</td></tr><tr align="center"><td bgcolor="#f08080">　</td><td>LightCoral</td><td>淡珊瑚色</td><td>#F08080</td><td>240,128,128</td></tr><tr align="center"><td bgcolor="#bc8f8f">　</td><td>RosyBrown</td><td>玫瑰棕色</td><td>#BC8F8F</td><td>188,143,143</td></tr><tr align="center"><td bgcolor="#cd5c5c">　</td><td>IndianRed</td><td>印度红</td><td>#CD5C5C</td><td>205,92,92</td></tr><tr align="center"><td bgcolor="#ff0000">　</td><td>Red</td><td>纯红</td><td>#FF0000</td><td>255,0,0</td></tr><tr align="center"><td bgcolor="#a52a2a">　</td><td>Brown</td><td>棕色</td><td>#A52A2A</td><td>165,42,42</td></tr><tr align="center"><td bgcolor="#b22222">　</td><td>FireBrick</td><td>耐火砖</td><td>#B22222</td><td>178,34,34</td></tr><tr align="center"><td bgcolor="#8b0000">　</td><td>DarkRed</td><td>深红色</td><td>#8B0000</td><td>139,0,0</td></tr><tr align="center"><td bgcolor="#800000">　</td><td>Maroon</td><td>栗色</td><td>#800000</td><td>128,0,0</td></tr><tr align="center"><td bgcolor="#ffffff">　</td><td>White</td><td>纯白</td><td>#FFFFFF</td><td>255,255,255</td></tr><tr align="center"><td bgcolor="#f5f5f5">　</td><td>WhiteSmoke</td><td>白烟</td><td>#F5F5F5</td><td>245,245,245</td></tr><tr align="center"><td bgcolor="#dcdcdc">　</td><td>Gainsboro</td><td>亮灰色</td><td>#DCDCDC</td><td>220,220,220</td></tr><tr align="center"><td bgcolor="#d3d3d3">　</td><td>LightGrey</td><td>浅灰色</td><td>#D3D3D3</td><td>211,211,211</td></tr><tr align="center"><td bgcolor="#c0c0c0">　</td><td>Silver</td><td>银白色</td><td>#C0C0C0</td><td>192,192,192</td></tr><tr align="center"><td bgcolor="#a9a9a9">　</td><td>DarkGray</td><td>深灰色</td><td>#A9A9A9</td><td>169,169,169</td></tr><tr align="center"><td bgcolor="#808080">　</td><td>Gray</td><td>灰色</td><td>#808080</td><td>128,128,128</td></tr><tr align="center"><td bgcolor="#696969">　</td><td>DimGray</td><td>暗淡的灰色</td><td>#696969</td><td>105,105,105</td></tr><tr align="center"><td bgcolor="#000000">　</td><td>Black</td><td>纯黑</td><td>#000000</td><td>0,0,0</td></tr></table><h2 id="颜色细分"><a href="#颜色细分" class="headerlink" title="颜色细分"></a>颜色细分</h2><table><tr><td><table style="height: 1560px; width: 161px;" border="0" cellspacing="2" cellpadding="2"><tbody><tr><td style="text-align: center;" bgcolor="#336699"><span style="background-color: #ffffff; color: #000000;"><strong>16位进制代码</strong></span></td><td style="text-align: center;" bgcolor="#336699"><span style="background-color: #ffffff; color: #000000;"><strong>颜色效果</strong></span></td></tr><tr><td style="text-align: center;">&nbsp;</td><td style="text-align: center;">&nbsp;</td></tr><tr><td style="text-align: center;">#FFFFFF</td><td style="text-align: center;" bgcolor="#ffffff">&nbsp;</td></tr><tr><td style="text-align: center;">#FFFFCC</td><td style="text-align: center;" bgcolor="#ffffcc">&nbsp;</td></tr><tr><td style="text-align: center;">#FFFF99</td><td style="text-align: center;" bgcolor="#ffff99">&nbsp;</td></tr><tr><td style="text-align: center;">#FFFF66</td><td style="text-align: center;" bgcolor="#ffff66">&nbsp;</td></tr><tr><td style="text-align: center;">#FFFF33</td><td style="text-align: center;" bgcolor="#ffff33">&nbsp;</td></tr><tr><td style="text-align: center;">#FFFF00</td><td style="text-align: center;" bgcolor="#ffff00">&nbsp;</td></tr><tr><td style="text-align: center;">#FFCCFF</td><td style="text-align: center;" bgcolor="#ffccff">&nbsp;</td></tr><tr><td style="text-align: center;">#FFCCCC</td><td style="text-align: center;" bgcolor="#ffcccc">&nbsp;</td></tr><tr><td style="text-align: center;">#FFCC99</td><td style="text-align: center;" bgcolor="#ffcc99">&nbsp;</td></tr><tr><td style="text-align: center;">#FFCC66</td><td style="text-align: center;" bgcolor="#ffcc66">&nbsp;</td></tr><tr><td style="text-align: center;">#FFCC33</td><td style="text-align: center;" bgcolor="#ffcc33">&nbsp;</td></tr><tr><td style="text-align: center;">#FFCC00</td><td style="text-align: center;" bgcolor="#ffcc00">&nbsp;</td></tr><tr><td style="text-align: center;">#FF99FF</td><td style="text-align: center;" bgcolor="#ff99ff">&nbsp;</td></tr><tr><td style="text-align: center;">#FF99CC</td><td style="text-align: center;" bgcolor="#ff99cc">&nbsp;</td></tr><tr><td style="text-align: center;">#FF9999</td><td style="text-align: center;" bgcolor="#ff9999">&nbsp;</td></tr><tr><td style="text-align: center;">#FF9966</td><td style="text-align: center;" bgcolor="#ff9966">&nbsp;</td></tr><tr><td style="text-align: center;">#FF9933</td><td style="text-align: center;" bgcolor="#ff9933">&nbsp;</td></tr><tr><td style="text-align: center;">#FF9900</td><td style="text-align: center;" bgcolor="#ff9900">&nbsp;</td></tr><tr><td style="text-align: center;">#FF66FF</td><td style="text-align: center;" bgcolor="#ff66ff">&nbsp;</td></tr><tr><td style="text-align: center;">#FF66CC</td><td style="text-align: center;" bgcolor="#ff66cc">&nbsp;</td></tr><tr><td style="text-align: center;">#FF6699</td><td style="text-align: center;" bgcolor="#ff6699">&nbsp;</td></tr><tr><td style="text-align: center;">#FF6666</td><td style="text-align: center;" bgcolor="#ff6666">&nbsp;</td></tr><tr><td style="text-align: center;">#FF6633</td><td style="text-align: center;" bgcolor="#ff6633">&nbsp;</td></tr><tr><td style="text-align: center;">#FF6600</td><td style="text-align: center;" bgcolor="#ff6600">&nbsp;</td></tr><tr><td style="text-align: center;">#FF33FF</td><td style="text-align: center;" bgcolor="#ff33ff">&nbsp;</td></tr><tr><td style="text-align: center;">#FF33CC</td><td style="text-align: center;" bgcolor="#ff33cc">&nbsp;</td></tr><tr><td style="text-align: center;">#FF3399</td><td style="text-align: center;" bgcolor="#ff3399">&nbsp;</td></tr><tr><td style="text-align: center;">#FF3366</td><td style="text-align: center;" bgcolor="#ff3366">&nbsp;</td></tr><tr><td style="text-align: center;">#FF3333</td><td style="text-align: center;" bgcolor="#ff3333">&nbsp;</td></tr><tr><td style="text-align: center;">#FF3300</td><td style="text-align: center;" bgcolor="#ff3300">&nbsp;</td></tr><tr><td style="text-align: center;">#FF00FF</td><td style="text-align: center;" bgcolor="#ff00ff">&nbsp;</td></tr><tr><td style="text-align: center;">#FF00CC</td><td style="text-align: center;" bgcolor="#ff00cc">&nbsp;</td></tr><tr><td style="text-align: center;">#FF0099</td><td style="text-align: center;" bgcolor="#ff0099">&nbsp;</td></tr><tr><td style="text-align: center;">#FF0066</td><td style="text-align: center;" bgcolor="#ff0066">&nbsp;</td></tr><tr><td style="text-align: center;">#FF0033</td><td style="text-align: center;" bgcolor="#ff0033">&nbsp;</td></tr><tr><td style="text-align: center;">#FF0000</td><td style="text-align: center;" bgcolor="#ff0000">&nbsp;</td></tr><tr><td>&nbsp;</td></tr><tr><td style="text-align: center;" bgcolor="#336699"><span style="background-color: #c0c0c0;"><strong>Hex Code</strong></span></td><td style="text-align: center;" bgcolor="#336699"><span style="background-color: #c0c0c0;"><strong>Color</strong></span></td></tr><tr><td style="text-align: center;">#66FFFF</td><td style="text-align: center;" bgcolor="#66ffff">&nbsp;</td></tr><tr><td style="text-align: center;">#66FFCC</td><td style="text-align: center;" bgcolor="#66ffcc">&nbsp;</td></tr><tr><td style="text-align: center;">#66FF99</td><td style="text-align: center;" bgcolor="#66ff99">&nbsp;</td></tr><tr><td style="text-align: center;">#66FF66</td><td style="text-align: center;" bgcolor="#66ff66">&nbsp;</td></tr><tr><td style="text-align: center;">#66FF33</td><td style="text-align: center;" bgcolor="#66ff33">&nbsp;</td></tr><tr><td style="text-align: center;">#66FF00</td><td style="text-align: center;" bgcolor="#66ff00">&nbsp;</td></tr><tr><td style="text-align: center;">#66CCFF</td><td style="text-align: center;" bgcolor="#66ccff">&nbsp;</td></tr><tr><td style="text-align: center;">#66CCCC</td><td style="text-align: center;" bgcolor="#66cccc">&nbsp;</td></tr><tr><td style="text-align: center;">#66CC99</td><td style="text-align: center;" bgcolor="#66cc99">&nbsp;</td></tr><tr><td style="text-align: center;">#66CC66</td><td style="text-align: center;" bgcolor="#66cc66">&nbsp;</td></tr><tr><td style="text-align: center;">#66CC33</td><td style="text-align: center;" bgcolor="#66cc33">&nbsp;</td></tr><tr><td style="text-align: center;">#66CC00</td><td style="text-align: center;" bgcolor="#66cc00">&nbsp;</td></tr><tr><td style="text-align: center;">#6699FF</td><td style="text-align: center;" bgcolor="#6699ff">&nbsp;</td></tr><tr><td style="text-align: center;">#6699CC</td><td style="text-align: center;" bgcolor="#6699cc">&nbsp;</td></tr><tr><td style="text-align: center;">#669999</td><td style="text-align: center;" bgcolor="#669999">&nbsp;</td></tr><tr><td style="text-align: center;">#669966</td><td style="text-align: center;" bgcolor="#669966">&nbsp;</td></tr><tr><td style="text-align: center;">#669933</td><td style="text-align: center;" bgcolor="#669933">&nbsp;</td></tr><tr><td style="text-align: center;">#669900</td><td style="text-align: center;" bgcolor="#669900">&nbsp;</td></tr><tr><td style="text-align: center;">#6666FF</td><td style="text-align: center;" bgcolor="#6666ff">&nbsp;</td></tr><tr><td style="text-align: center;">#6666CC</td><td style="text-align: center;" bgcolor="#6666cc">&nbsp;</td></tr><tr><td style="text-align: center;">#666699</td><td style="text-align: center;" bgcolor="#666699">&nbsp;</td></tr><tr><td style="text-align: center;">#666666</td><td style="text-align: center;" bgcolor="#666666">&nbsp;</td></tr><tr><td style="text-align: center;">#666633</td><td style="text-align: center;" bgcolor="#666633">&nbsp;</td></tr><tr><td style="text-align: center;">#666600</td><td style="text-align: center;" bgcolor="#666600">&nbsp;</td></tr><tr><td style="text-align: center;">#6633FF</td><td style="text-align: center;" bgcolor="#6633ff">&nbsp;</td></tr><tr><td style="text-align: center;">#6633CC</td><td style="text-align: center;" bgcolor="#6633cc">&nbsp;</td></tr><tr><td style="text-align: center;">#663399</td><td style="text-align: center;" bgcolor="#663399">&nbsp;</td></tr><tr><td style="text-align: center;">#663366</td><td style="text-align: center;" bgcolor="#663366">&nbsp;</td></tr><tr><td style="text-align: center;">#663333</td><td style="text-align: center;" bgcolor="#663333">&nbsp;</td></tr><tr><td style="text-align: center;">#663300</td><td style="text-align: center;" bgcolor="#663300">&nbsp;</td></tr><tr><td style="text-align: center;">#6600FF</td><td style="text-align: center;" bgcolor="#6600ff">&nbsp;</td></tr><tr><td style="text-align: center;">#6600CC</td><td style="text-align: center;" bgcolor="#6600cc">&nbsp;</td></tr><tr><td style="text-align: center;">#660099</td><td style="text-align: center;" bgcolor="#660099">&nbsp;</td></tr><tr><td style="text-align: center;">#660066</td><td style="text-align: center;" bgcolor="#660066">&nbsp;</td></tr><tr><td style="text-align: center;">#660033</td><td style="text-align: center;" bgcolor="#660033">&nbsp;</td></tr><tr><td style="text-align: center;">#660000</td><td style="text-align: center;" bgcolor="#660000">&nbsp;</td></tr></tbody></table><p>&nbsp;</p></td><td>&nbsp;</td><td valign="top"><table style="height: 1491px; width: 169px;" border="0" cellspacing="2" cellpadding="2"><tbody><tr><td style="text-align: center;" bgcolor="#336699"><span style="background-color: #ffffff; color: #000000;"><strong>16位进制代码</strong></span></td><td style="text-align: center;" bgcolor="#336699"><span style="background-color: #ffffff; color: #000000;"><strong>颜色效果</strong></span></td></tr><tr><td style="text-align: center;">&nbsp;</td><td style="text-align: center;">&nbsp;</td></tr><tr><td style="text-align: center;">#CCFFFF</td><td style="text-align: center;" bgcolor="#ccffff">&nbsp;</td></tr><tr><td style="text-align: center;">#CCFFCC</td><td style="text-align: center;" bgcolor="#ccffcc">&nbsp;</td></tr><tr><td style="text-align: center;">#CCFF99</td><td style="text-align: center;" bgcolor="#ccff99">&nbsp;</td></tr><tr><td style="text-align: center;">#CCFF66</td><td style="text-align: center;" bgcolor="#ccff66">&nbsp;</td></tr><tr><td style="text-align: center;">#CCFF33</td><td style="text-align: center;" bgcolor="#ccff33">&nbsp;</td></tr><tr><td style="text-align: center;">#CCFF00</td><td style="text-align: center;" bgcolor="#ccff00">&nbsp;</td></tr><tr><td style="text-align: center;">#CCCCFF</td><td style="text-align: center;" bgcolor="#ccccff">&nbsp;</td></tr><tr><td style="text-align: center;">#CCCCCC</td><td style="text-align: center;" bgcolor="#cccccc">&nbsp;</td></tr><tr><td style="text-align: center;">#CCCC99</td><td style="text-align: center;" bgcolor="#cccc99">&nbsp;</td></tr><tr><td style="text-align: center;">#CCCC66</td><td style="text-align: center;" bgcolor="#cccc66">&nbsp;</td></tr><tr><td style="text-align: center;">#CCCC33</td><td style="text-align: center;" bgcolor="#cccc33">&nbsp;</td></tr><tr><td style="text-align: center;">#CCCC00</td><td style="text-align: center;" bgcolor="#cccc00">&nbsp;</td></tr><tr><td style="text-align: center;">#CC99FF</td><td style="text-align: center;" bgcolor="#cc99ff">&nbsp;</td></tr><tr><td style="text-align: center;">#CC99CC</td><td style="text-align: center;" bgcolor="#cc99cc">&nbsp;</td></tr><tr><td style="text-align: center;">#CC9999</td><td style="text-align: center;" bgcolor="#cc9999">&nbsp;</td></tr><tr><td style="text-align: center;">#CC9966</td><td style="text-align: center;" bgcolor="#cc9966">&nbsp;</td></tr><tr><td style="text-align: center;">#CC9933</td><td style="text-align: center;" bgcolor="#cc9933">&nbsp;</td></tr><tr><td style="text-align: center;">#CC9900</td><td style="text-align: center;" bgcolor="#cc9900">&nbsp;</td></tr><tr><td style="text-align: center;">#CC66FF</td><td style="text-align: center;" bgcolor="#cc66ff">&nbsp;</td></tr><tr><td style="text-align: center;">#CC66CC</td><td style="text-align: center;" bgcolor="#cc66cc">&nbsp;</td></tr><tr><td style="text-align: center;">#CC6699</td><td style="text-align: center;" bgcolor="#cc6699">&nbsp;</td></tr><tr><td style="text-align: center;">#CC6666</td><td style="text-align: center;" bgcolor="#cc6666">&nbsp;</td></tr><tr><td style="text-align: center;">#CC6633</td><td style="text-align: center;" bgcolor="#cc6633">&nbsp;</td></tr><tr><td style="text-align: center;">#CC6600</td><td style="text-align: center;" bgcolor="#cc6600">&nbsp;</td></tr><tr><td style="text-align: center;">#CC33FF</td><td style="text-align: center;" bgcolor="#cc33ff">&nbsp;</td></tr><tr><td style="text-align: center;">#CC33CC</td><td style="text-align: center;" bgcolor="#cc33cc">&nbsp;</td></tr><tr><td style="text-align: center;">#CC3399</td><td style="text-align: center;" bgcolor="#cc3399">&nbsp;</td></tr><tr><td style="text-align: center;">#CC3366</td><td style="text-align: center;" bgcolor="#cc3366">&nbsp;</td></tr><tr><td style="text-align: center;">#CC3333</td><td style="text-align: center;" bgcolor="#cc3333">&nbsp;</td></tr><tr><td style="text-align: center;">#CC3300</td><td style="text-align: center;" bgcolor="#cc3300">&nbsp;</td></tr><tr><td style="text-align: center;">#CC00FF</td><td style="text-align: center;" bgcolor="#cc00ff">&nbsp;</td></tr><tr><td style="text-align: center;">#CC00CC</td><td style="text-align: center;" bgcolor="#cc00cc">&nbsp;</td></tr><tr><td style="text-align: center;">#CC0099</td><td style="text-align: center;" bgcolor="#cc0099">&nbsp;</td></tr><tr><td style="text-align: center;">#CC0066</td><td style="text-align: center;" bgcolor="#cc0066">&nbsp;</td></tr><tr><td style="text-align: center;">#CC0033</td><td style="text-align: center;" bgcolor="#cc0033">&nbsp;</td></tr><tr><td style="text-align: center;">#CC0000</td><td style="text-align: center;" bgcolor="#cc0000">&nbsp;</td></tr><tr><td>&nbsp;</td></tr><tr><td bgcolor="#336699"><span style="background-color: #c0c0c0;"><strong>Hex Code</strong></span></td><td bgcolor="#336699"><span style="background-color: #c0c0c0;"><strong>Color</strong></span></td></tr><tr><td style="text-align: center;">#33FFFF</td><td style="text-align: center;" bgcolor="#33ffff">&nbsp;</td></tr><tr><td style="text-align: center;">#33FFCC</td><td style="text-align: center;" bgcolor="#33ffcc">&nbsp;</td></tr><tr><td style="text-align: center;">#33FF99</td><td style="text-align: center;" bgcolor="#33ff99">&nbsp;</td></tr><tr><td style="text-align: center;">#33FF66</td><td style="text-align: center;" bgcolor="#33ff66">&nbsp;</td></tr><tr><td style="text-align: center;">#33FF33</td><td style="text-align: center;" bgcolor="#33ff33">&nbsp;</td></tr><tr><td style="text-align: center;">#33FF00</td><td style="text-align: center;" bgcolor="#33ff00">&nbsp;</td></tr><tr><td style="text-align: center;">#33CCFF</td><td style="text-align: center;" bgcolor="#33ccff">&nbsp;</td></tr><tr><td style="text-align: center;">#33CCCC</td><td style="text-align: center;" bgcolor="#33cccc">&nbsp;</td></tr><tr><td style="text-align: center;">#33CC99</td><td style="text-align: center;" bgcolor="#33cc99">&nbsp;</td></tr><tr><td style="text-align: center;">#33CC66</td><td style="text-align: center;" bgcolor="#33cc66">&nbsp;</td></tr><tr><td style="text-align: center;">#33CC33</td><td style="text-align: center;" bgcolor="#33cc33">&nbsp;</td></tr><tr><td style="text-align: center;">#33CC00</td><td style="text-align: center;" bgcolor="#33cc00">&nbsp;</td></tr><tr><td style="text-align: center;">#3399FF</td><td style="text-align: center;" bgcolor="#3399ff">&nbsp;</td></tr><tr><td style="text-align: center;">#3399CC</td><td style="text-align: center;" bgcolor="#3399cc">&nbsp;</td></tr><tr><td style="text-align: center;">#339999</td><td style="text-align: center;" bgcolor="#339999">&nbsp;</td></tr><tr><td style="text-align: center;">#339966</td><td style="text-align: center;" bgcolor="#339966">&nbsp;</td></tr><tr><td style="text-align: center;">#339933</td><td style="text-align: center;" bgcolor="#339933">&nbsp;</td></tr><tr><td style="text-align: center;">#339900</td><td style="text-align: center;" bgcolor="#339900">&nbsp;</td></tr><tr><td style="text-align: center;">#3366FF</td><td style="text-align: center;" bgcolor="#3366ff">&nbsp;</td></tr><tr><td style="text-align: center;">#3366CC</td><td style="text-align: center;" bgcolor="#3366cc">&nbsp;</td></tr><tr><td style="text-align: center;">#336699</td><td style="text-align: center;" bgcolor="#336699">&nbsp;</td></tr><tr><td style="text-align: center;">#336666</td><td style="text-align: center;" bgcolor="#336666">&nbsp;</td></tr><tr><td style="text-align: center;">#336633</td><td style="text-align: center;" bgcolor="#336633">&nbsp;</td></tr><tr><td style="text-align: center;">#336600</td><td style="text-align: center;" bgcolor="#336600">&nbsp;</td></tr><tr><td style="text-align: center;">#3333FF</td><td style="text-align: center;" bgcolor="#3333ff">&nbsp;</td></tr><tr><td style="text-align: center;">#3333CC</td><td style="text-align: center;" bgcolor="#3333cc">&nbsp;</td></tr><tr><td style="text-align: center;">#333399</td><td style="text-align: center;" bgcolor="#333399">&nbsp;</td></tr><tr><td style="text-align: center;">#333366</td><td style="text-align: center;" bgcolor="#333366">&nbsp;</td></tr><tr><td style="text-align: center;">#333333</td><td style="text-align: center;" bgcolor="#333333">&nbsp;</td></tr><tr><td style="text-align: center;">#333300</td><td style="text-align: center;" bgcolor="#333300">&nbsp;</td></tr><tr><td style="text-align: center;">#3300FF</td><td style="text-align: center;" bgcolor="#3300ff">&nbsp;</td></tr><tr><td style="text-align: center;">#3300CC</td><td style="text-align: center;" bgcolor="#3300cc">&nbsp;</td></tr><tr><td style="text-align: center;">#330099</td><td style="text-align: center;" bgcolor="#330099">&nbsp;</td></tr><tr><td style="text-align: center;">#330066</td><td style="text-align: center;" bgcolor="#330066">&nbsp;</td></tr><tr><td style="text-align: center;">#330033</td><td style="text-align: center;" bgcolor="#330033">&nbsp;</td></tr><tr><td style="text-align: center;">#330000</td><td style="text-align: center;" bgcolor="#330000">&nbsp;</td></tr></tbody></table></td><td>&nbsp;</td><td valign="top"><table style="height: 1491px; width: 169px;" border="0" cellspacing="2" cellpadding="2"><tbody><tr><td bgcolor="#336699"><span style="background-color: #ffffff; color: #000000;"><strong>16位进制代码</strong></span></td><td bgcolor="#336699"><span style="background-color: #ffffff; color: #000000;"><strong>颜色效果</strong></span></td></tr><tr><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td style="text-align: center;">#99FFFF</td><td style="text-align: center;" bgcolor="#99ffff">&nbsp;</td></tr><tr><td style="text-align: center;">#99FFCC</td><td style="text-align: center;" bgcolor="#99ffcc">&nbsp;</td></tr><tr><td style="text-align: center;">#99FF99</td><td style="text-align: center;" bgcolor="#99ff99">&nbsp;</td></tr><tr><td style="text-align: center;">#99FF66</td><td style="text-align: center;" bgcolor="#99ff66">&nbsp;</td></tr><tr><td style="text-align: center;">#99FF33</td><td style="text-align: center;" bgcolor="#99ff33">&nbsp;</td></tr><tr><td style="text-align: center;">#99FF00</td><td style="text-align: center;" bgcolor="#99ff00">&nbsp;</td></tr><tr><td style="text-align: center;">#99CCFF</td><td style="text-align: center;" bgcolor="#99ccff">&nbsp;</td></tr><tr><td style="text-align: center;">#99CCCC</td><td style="text-align: center;" bgcolor="#99cccc">&nbsp;</td></tr><tr><td style="text-align: center;">#99CC99</td><td style="text-align: center;" bgcolor="#99cc99">&nbsp;</td></tr><tr><td style="text-align: center;">#99CC66</td><td style="text-align: center;" bgcolor="#99cc66">&nbsp;</td></tr><tr><td style="text-align: center;">#99CC33</td><td style="text-align: center;" bgcolor="#99cc33">&nbsp;</td></tr><tr><td style="text-align: center;">#99CC00</td><td style="text-align: center;" bgcolor="#99cc00">&nbsp;</td></tr><tr><td style="text-align: center;">#9999FF</td><td style="text-align: center;" bgcolor="#9999ff">&nbsp;</td></tr><tr><td style="text-align: center;">#9999CC</td><td style="text-align: center;" bgcolor="#9999cc">&nbsp;</td></tr><tr><td style="text-align: center;">#999999</td><td style="text-align: center;" bgcolor="#999999">&nbsp;</td></tr><tr><td style="text-align: center;">#999966</td><td style="text-align: center;" bgcolor="#999966">&nbsp;</td></tr><tr><td style="text-align: center;">#999933</td><td style="text-align: center;" bgcolor="#999933">&nbsp;</td></tr><tr><td style="text-align: center;">#999900</td><td style="text-align: center;" bgcolor="#999900">&nbsp;</td></tr><tr><td style="text-align: center;">#9966FF</td><td style="text-align: center;" bgcolor="#9966ff">&nbsp;</td></tr><tr><td style="text-align: center;">#9966CC</td><td style="text-align: center;" bgcolor="#9966cc">&nbsp;</td></tr><tr><td style="text-align: center;">#996699</td><td style="text-align: center;" bgcolor="#996699">&nbsp;</td></tr><tr><td style="text-align: center;">#996666</td><td style="text-align: center;" bgcolor="#996666">&nbsp;</td></tr><tr><td style="text-align: center;">#996633</td><td style="text-align: center;" bgcolor="#996633">&nbsp;</td></tr><tr><td style="text-align: center;">#996600</td><td style="text-align: center;" bgcolor="#996600">&nbsp;</td></tr><tr><td style="text-align: center;">#9933FF</td><td style="text-align: center;" bgcolor="#9933ff">&nbsp;</td></tr><tr><td style="text-align: center;">#9933CC</td><td style="text-align: center;" bgcolor="#9933cc">&nbsp;</td></tr><tr><td style="text-align: center;">#993399</td><td style="text-align: center;" bgcolor="#993399">&nbsp;</td></tr><tr><td style="text-align: center;">#993366</td><td style="text-align: center;" bgcolor="#993366">&nbsp;</td></tr><tr><td style="text-align: center;">#993333</td><td style="text-align: center;" bgcolor="#993333">&nbsp;</td></tr><tr><td style="text-align: center;">#993300</td><td style="text-align: center;" bgcolor="#993300">&nbsp;</td></tr><tr><td style="text-align: center;">#9900FF</td><td style="text-align: center;" bgcolor="#9900ff">&nbsp;</td></tr><tr><td style="text-align: center;">#9900CC</td><td style="text-align: center;" bgcolor="#9900cc">&nbsp;</td></tr><tr><td style="text-align: center;">#990099</td><td style="text-align: center;" bgcolor="#990099">&nbsp;</td></tr><tr><td style="text-align: center;">#990066</td><td style="text-align: center;" bgcolor="#990066">&nbsp;</td></tr><tr><td style="text-align: center;">#990033</td><td style="text-align: center;" bgcolor="#990033">&nbsp;</td></tr><tr><td style="text-align: center;">#990000</td><td style="text-align: center;" bgcolor="#990000">&nbsp;</td></tr><tr><td>&nbsp;</td></tr><tr><td style="text-align: center;" bgcolor="#336699"><span style="background-color: #c0c0c0;"><strong>Hex Code</strong></span></td><td bgcolor="#336699"><span style="background-color: #c0c0c0;"><strong>Color</strong></span></td></tr><tr><td style="text-align: center;">#00FFFF</td><td bgcolor="#00ffff">&nbsp;</td></tr><tr><td style="text-align: center;">#00FFCC</td><td bgcolor="#00ffcc">&nbsp;</td></tr><tr><td style="text-align: center;">#00FF99</td><td bgcolor="#00ff99">&nbsp;</td></tr><tr><td style="text-align: center;">#00FF66</td><td bgcolor="#00ff66">&nbsp;</td></tr><tr><td style="text-align: center;">#00FF33</td><td bgcolor="#00ff33">&nbsp;</td></tr><tr><td style="text-align: center;">#00FF00</td><td bgcolor="#00ff00">&nbsp;</td></tr><tr><td style="text-align: center;">#00CCFF</td><td bgcolor="#00ccff">&nbsp;</td></tr><tr><td style="text-align: center;">#00CCCC</td><td bgcolor="#00cccc">&nbsp;</td></tr><tr><td style="text-align: center;">#00CC99</td><td bgcolor="#00cc99">&nbsp;</td></tr><tr><td style="text-align: center;">#00CC66</td><td bgcolor="#00cc66">&nbsp;</td></tr><tr><td style="text-align: center;">#00CC33</td><td bgcolor="#00cc33">&nbsp;</td></tr><tr><td style="text-align: center;">#00CC00</td><td bgcolor="#00cc00">&nbsp;</td></tr><tr><td style="text-align: center;">#0099FF</td><td bgcolor="#0099ff">&nbsp;</td></tr><tr><td style="text-align: center;">#0099CC</td><td bgcolor="#0099cc">&nbsp;</td></tr><tr><td style="text-align: center;">#009999</td><td bgcolor="#009999">&nbsp;</td></tr><tr><td style="text-align: center;">#009966</td><td bgcolor="#009966">&nbsp;</td></tr><tr><td style="text-align: center;">#009933</td><td bgcolor="#009933">&nbsp;</td></tr><tr><td style="text-align: center;">#009900</td><td bgcolor="#009900">&nbsp;</td></tr><tr><td style="text-align: center;">#0066FF</td><td bgcolor="#0066ff">&nbsp;</td></tr><tr><td style="text-align: center;">#0066CC</td><td bgcolor="#0066cc">&nbsp;</td></tr><tr><td style="text-align: center;">#006699</td><td bgcolor="#006699">&nbsp;</td></tr><tr><td style="text-align: center;">#006666</td><td bgcolor="#006666">&nbsp;</td></tr><tr><td style="text-align: center;">#006633</td><td bgcolor="#006633">&nbsp;</td></tr><tr><td style="text-align: center;">#006600</td><td bgcolor="#006600">&nbsp;</td></tr><tr><td style="text-align: center;">#0033FF</td><td bgcolor="#0033ff">&nbsp;</td></tr><tr><td style="text-align: center;">#0033CC</td><td bgcolor="#0033cc">&nbsp;</td></tr><tr><td style="text-align: center;">#003399</td><td bgcolor="#003399">&nbsp;</td></tr><tr><td style="text-align: center;">#003366</td><td bgcolor="#003366">&nbsp;</td></tr><tr><td style="text-align: center;">#003333</td><td bgcolor="#003333">&nbsp;</td></tr><tr><td style="text-align: center;">#003300</td><td bgcolor="#003300">&nbsp;</td></tr><tr><td style="text-align: center;">#0000FF</td><td bgcolor="#0000ff">&nbsp;</td></tr><tr><td style="text-align: center;">#0000CC</td><td bgcolor="#0000cc">&nbsp;</td></tr><tr><td style="text-align: center;">#000099</td><td bgcolor="#000099">&nbsp;</td></tr><tr><td style="text-align: center;">#000066</td><td bgcolor="#000066">&nbsp;</td></tr><tr><td style="text-align: center;">#000033</td><td bgcolor="#000033">&nbsp;</td></tr><tr><td style="text-align: center;">#000000</td><td bgcolor="#000000">&nbsp;</td></tr></tbody></table></td></tr></table>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python读取Excel数据转化为字典并另存为josn文件</title>
      <link href="//post/Python/Skill/Skills-1/"/>
      <url>//post/Python/Skill/Skills-1/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5"  face = "楷体">Python读取Excel数据转化为字典并另存为josn文件</font></center></blockquote><a id="more"></a><h2 id="导入Python所需要的包"><a href="#导入Python所需要的包" class="headerlink" title="导入Python所需要的包"></a>导入Python所需要的包</h2><pre><code class="python">import pandas as pdimport json</code></pre><h2 id="使用pandas读取Excel文件"><a href="#使用pandas读取Excel文件" class="headerlink" title="使用pandas读取Excel文件"></a>使用pandas读取Excel文件</h2><ol><li>样例数据采集于网上新冠肺炎中药处方，点击此<btn><a href="https://www.lanzous.com/ia7bvva" target="_blank" rel="noopener">按钮</a></btn>下载，</li><li>因为样例数据中有时间格式的文本，所以在读取Excel文件中加入了<code>parse_dates</code>读取日期格式的文本。<pre><code class="python">df=pd.read_excel(filepath ,parse_dates = [&#39;发布时间&#39;])df.head()</code></pre><details><summary>读取的Excel文件格式👇</summary></li></ol><overflow><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>发布医院/机构</th>      <th>省份</th>      <th>早中极恢复期</th>      <th>症状</th>      <th>发布时间</th>      <th>方剂组成</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>广东省中医药局</td>      <td>广东省</td>      <td>早</td>      <td>湿邪郁肺，枢机不利</td>      <td>2020-01-26</td>      <td>藿香10g、 厚朴10g 、法下10g、 茯苓15g、 柴胡15g、 黄芩10g、 党参10...</td>    </tr>    <tr>      <th>1</th>      <td>广东省中医药局</td>      <td>广东省</td>      <td>早</td>      <td>邪热入肺，肺湿宣讲</td>      <td>2020-01-26</td>      <td>炙麻黄8g、 杏仁10g、 生石膏30g、 甘草10g、 槟榔10g、 厚朴10g、 草果1...</td>    </tr>    <tr>      <th>2</th>      <td>广东省中医药局</td>      <td>广东省</td>      <td>中</td>      <td>热闭肺，腑气不通</td>      <td>2020-01-26</td>      <td>生麻黄 8g、杏仁12g、 生石膏30g、 生大黄10g、 瓜蒌仁30g、 桃仁 10g、赤...</td>    </tr>    <tr>      <th>3</th>      <td>广东省中医药局</td>      <td>广东省</td>      <td>中</td>      <td>湿热蕴毒，肺气闭塞</td>      <td>2020-01-26</td>      <td>生麻黄 8g、杏仁12g、 生石膏30g、 生甘草 10g、滑石30g、 茵陈20g、 黄芩...</td>    </tr>    <tr>      <th>4</th>      <td>广东省中医药局</td>      <td>广东省</td>      <td>极</td>      <td>NaN</td>      <td>2020-01-26</td>      <td>红参 10g、炮附子10g、 山萸肉30g、 麦冬20g、 三七10g</td>    </tr>  </tbody></table></div></overflow></details><h2 id="转换代码"><a href="#转换代码" class="headerlink" title="转换代码"></a>转换代码</h2><pre><code class="python">def excelToDict(path):    # 创建最终返回的空字典    df_dict = {}    # 读取Excel文件#    df = pd.read_excel(path)    # 替换Excel表格内的空单元格，否则在下一步处理中将会报错    df.fillna(&quot;&quot;, inplace=True)    df_list = []    for i in df.index.values:        # loc为按列名索引 iloc 为按位置索引，使用的是 [[行号], [列名]]        df_line = df.loc[i, [&#39;发布医院/机构&#39;, &#39;省份&#39;, &#39;早中极恢复期&#39;, &#39;症状&#39;,&#39;发布时间&#39;,&#39;方剂组成&#39;]].to_dict()        # 将每一行转换成字典后添加到列表        df_list.append(df_line)    df_dict[&#39;data&#39;] = df_list    return df_list#     return df_dictdata = excelToDict(df)print(data)</code></pre><details><summary>转换后的数据👇</summary><pre><code>[{&#39;发布医院/机构&#39;: &#39;广东省中医药局&#39;, &#39;省份&#39;: &#39;广东省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;湿邪郁肺，枢机不利&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;藿香10g、 厚朴10g 、法下10g、 茯苓15g、 柴胡15g、 黄芩10g、 党参10g、 杏仁10g、 薏苡仁20g、 猪苓10g、 泽泻10g、 白蔻仁10g、 淡豆鼓10g、 通草 10g、生姜5g、 大枣5g&#39;}, {&#39;发布医院/机构&#39;: &#39;广东省中医药局&#39;, &#39;省份&#39;: &#39;广东省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;邪热入肺，肺湿宣讲&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;炙麻黄8g、 杏仁10g、 生石膏30g、 甘草10g、 槟榔10g、 厚朴10g、 草果10g、 知母10g、 白芍10g、 黄芩15g&#39;}, {&#39;发布医院/机构&#39;: &#39;广东省中医药局&#39;, &#39;省份&#39;: &#39;广东省&#39;, &#39;早中极恢复期&#39;: &#39;中&#39;, &#39;症状&#39;: &#39;热闭肺，腑气不通&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生麻黄 8g、杏仁12g、 生石膏30g、 生大黄10g、 瓜蒌仁30g、 桃仁 10g、赤芍15g、 葶苈子20g、 黄连30g、 黄芩10g、 桑白皮10g、 重楼10g、 丹皮15g、 郁金15g、 石菖蒲15g、 生地15g、玄参15g&#39;}, {&#39;发布医院/机构&#39;: &#39;广东省中医药局&#39;, &#39;省份&#39;: &#39;广东省&#39;, &#39;早中极恢复期&#39;: &#39;中&#39;, &#39;症状&#39;: &#39;湿热蕴毒，肺气闭塞&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生麻黄 8g、杏仁12g、 生石膏30g、 生甘草 10g、滑石30g、 茵陈20g、 黄芩15g、 白蔻仁10g、 藿香15g、 法夏15g、 苍术15g、 葶苈子20g、 连翘15g、 白僵蚕5g、 蝉蜕5g、 姜黄10g、 生大黄5g、 重楼10g、 丹皮 15g、赤芍15g、 郁金15g、 石菖蒲15g、 生地15g、 玄参15g&#39;}, {&#39;发布医院/机构&#39;: &#39;广东省中医药局&#39;, &#39;省份&#39;: &#39;广东省&#39;, &#39;早中极恢复期&#39;: &#39;极&#39;, &#39;症状&#39;: &#39;&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;红参 10g、炮附子10g、 山萸肉30g、 麦冬20g、 三七10g&#39;}, {&#39;发布医院/机构&#39;: &#39;广东省中医药局&#39;, &#39;省份&#39;: &#39;广东省&#39;, &#39;早中极恢复期&#39;: &#39;恢复&#39;, &#39;症状&#39;: &#39;肺脾两虚&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生晒参10g、 炒白术15g、 茯苓15g、 白扁豆30g、 砂仁6g、 莲子30g、 炙甘草6g、 桔梗10g、 山药15g、 薏苡仁30g、 炒麦芽30g、 神曲10g&#39;}, {&#39;发布医院/机构&#39;: &#39;广东省中医药局&#39;, &#39;省份&#39;: &#39;广东省&#39;, &#39;早中极恢复期&#39;: &#39;恢复&#39;, &#39;症状&#39;: &#39;气阴两伤，余邪未尽&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;西洋参20g、 石斛10g、 麦冬10g、 知母10g、 淡竹叶10g、 黄连3g、 甘草6g、 茯苓15g、 法半夏10g、 橘红10g、 陈皮10g、 炒麦芽30g&#39;}, {&#39;发布医院/机构&#39;: &#39;国家卫健委&#39;, &#39;省份&#39;: &#39;&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;寒湿郁肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-28 00:00:00&#39;), &#39;方剂组成&#39;: &#39;苍术15g、陈皮10g、厚朴10g、藿香10g、草果6g、生麻黄6g、羌活10g、生姜10g、槟郎10g&#39;}, {&#39;发布医院/机构&#39;: &#39;国家卫健委&#39;, &#39;省份&#39;: &#39;&#39;, &#39;早中极恢复期&#39;: &#39;中&#39;, &#39;症状&#39;: &#39;疫毒闭肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-28 00:00:00&#39;), &#39;方剂组成&#39;: &#39;杏仁10g、生石膏30g、瓜萎30g、生大黄6g、生炙麻黄各6g、葶苈子10g、桃仁10g、草果6g、槟郎10g、苍术10g&#39;}, {&#39;发布医院/机构&#39;: &#39;国家卫健委&#39;, &#39;省份&#39;: &#39;&#39;, &#39;早中极恢复期&#39;: &#39;重&#39;, &#39;症状&#39;: &#39;内闭外脱&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-28 00:00:00&#39;), &#39;方剂组成&#39;: &#39;人参15g，黑顺片10g，山茱萸15g， 送服苏合香丸或安宫牛黄丸&#39;}, {&#39;发布医院/机构&#39;: &#39;国家卫健委&#39;, &#39;省份&#39;: &#39;&#39;, &#39;早中极恢复期&#39;: &#39;恢复期&#39;, &#39;症状&#39;: &#39;肺脾气虚&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-28 00:00:00&#39;), &#39;方剂组成&#39;: &#39;法半夏9g、陈皮10g、党参15g、炙黄芪30g、茯苓15g、藿香10g、砂仁6g&#39;}, {&#39;发布医院/机构&#39;: &#39;宝鸡市中医医院&#39;, &#39;省份&#39;: &#39;陕西省&#39;, &#39;早中极恢复期&#39;: &#39;预防&#39;, &#39;症状&#39;: &#39;&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生黄芪 9g 炒白术 6g 防 风 3g 玄 参 6g 炙百合 30g 石 斛 10g 梨 皮 30g 桔 梗 10g 芦 根 30g 生甘草 6g&#39;}, {&#39;发布医院/机构&#39;: &#39;宝鸡市中医医院&#39;, &#39;省份&#39;: &#39;陕西省&#39;, &#39;早中极恢复期&#39;: &#39;预防&#39;, &#39;症状&#39;: &#39;&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;太子参 15g 贯 众 6g 银 花 10g 连 翘 10g 大青叶 10g 苏 叶 6g 葛 根 10g 藿 香 10g 苍 术 6g 佩 兰 10g 沙 参 20g 芦 根 10g &#39;}, {&#39;发布医院/机构&#39;: &#39;贵州省中医药管理局&#39;, &#39;省份&#39;: &#39;贵州省&#39;, &#39;早中极恢复期&#39;: &#39;预防&#39;, &#39;症状&#39;: &#39;&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-23 00:00:00&#39;), &#39;方剂组成&#39;: &#39;北沙参10g、玉竹20g、石斛20g、贯众20g、苍术10g、石菖蒲10g。&#39;}, {&#39;发布医院/机构&#39;: &#39;贵州省中医药管理局&#39;, &#39;省份&#39;: &#39;贵州省&#39;, &#39;早中极恢复期&#39;: &#39;儿童预防&#39;, &#39;症状&#39;: &#39;&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-23 00:00:00&#39;), &#39;方剂组成&#39;: &#39;板蓝根20g 贯众15g 藿香10g 薄荷10g\n菊花15g 荆芥10g 葛根6g 芦根10g\n甘草6g&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;麻黄9g、炙甘草6g、杏仁9g、生石膏15-30g、桂枝9g、泽泻9g、猪苓9g、白术9g、茯苓15g、柴胡16g、黄芩6g、姜半夏9g、生姜9g、紫菀9g、冬花9g、射干9g、细辛6g、山药12g、枳实6g、陈皮6g、藿香9g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;风热犯肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;金银花15g、连翘15g、防风9g、黄芩15g、牛蒡子9g、桔梗9g、芦根18g、柴胡9g、陈皮9g、生甘草6g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;寒湿郁肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生麻黄6g、生石膏15g、杏仁9g、羌活15g、葶苈子15g、贯众9g、地龙15g、徐长卿15g、藿香15g、佩兰9g、苍术15g、云苓45g、生白术30g、焦三仙各9g、厚朴15g、槟榔9g、草果9g、生姜15g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;湿热蕴肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;槟榔10g、草果10g、厚朴10g、知母10g、黄芩10g、柴胡10g、赤芍10g、连翘15g、青蒿10g、苍术10g、大青叶10g、生甘草5g。呕恶者加黄连3g、苏叶6g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;中&#39;, &#39;症状&#39;: &#39;湿毒郁肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生麻黄6g、苦杏仁15g、生石膏30g、生薏苡仁30g、苍术10g、藿香15g、青蒿12g、虎杖20g、马鞭草30g、干芦根30g、葶苈子15g、化橘红15g、生甘草10g。呕恶者加黄连3g、苏叶6g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;中&#39;, &#39;症状&#39;: &#39;寒湿阻肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;苍术15g、陈皮10g、厚朴10g、藿香10g、草果6g、生麻黄6g、羌活10g、生姜10g、槟榔10g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;重&#39;, &#39;症状&#39;: &#39;热毒闭肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生麻黄6g、杏仁9g、生石膏15g、甘草3g、藿香10g、厚朴10g、苍术15g、草果10g、法半夏9g、茯苓15g、生大黄5g、生黄芪10g、葶苈子10g、赤芍10g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;重&#39;, &#39;症状&#39;: &#39;气营两燔&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生石膏30-60g、知母30g、生地30-60g、水牛角30g、赤芍30g、玄参30g、连翘15g、丹皮15g、黄连6g、竹叶12g、葶苈子15g、生甘草6g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;危重&#39;, &#39;症状&#39;: &#39;内闭外脱&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;人参15g、黑顺片10g、山茱萸15g，送服苏合香丸或安宫牛黄丸。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;恢复&#39;, &#39;症状&#39;: &#39;气阴两虚&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;南北沙参各10g、麦冬15g、西洋参6g，五味子6g、生石膏15g、淡竹叶10g、桑叶10g、芦根15g、丹参15g、生甘草6g。&#39;}, {&#39;发布医院/机构&#39;: &#39;上海市中医药管理局&#39;, &#39;省份&#39;: &#39;江苏省&#39;, &#39;早中极恢复期&#39;: &#39;恢复&#39;, &#39;症状&#39;: &#39;肺脾气虚&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;法半夏9g、陈皮10g、党参15g、炙黄芪30g、炒白术10g、茯苓15g、藿香10g、砂仁6g、甘草6g。&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;急性期&#39;, &#39;症状&#39;: &#39;风热夹湿&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;银花30g连翘30g荆芥15g牛蒡子15g薄荷15g桔梗30g杏仁15g广藿香15g厚朴15g茯苓30g法半夏15g豆蔻15g薏苡仁30g白扁豆30g焦山楂30g建曲15g芦根30g&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;急性期&#39;, &#39;症状&#39;: &#39;风寒夹湿&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;荆芥15g防风15g川芎15g白芷15g薄荷15g桔梗30g广藿香15g紫苏叶15g厚朴15g炒白术30g法半夏15g建曲15g薏苡仁30g茯苓30g豆蔻15g杏仁15g焦山楂30g白扁豆30g芦根30g&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;急性期&#39;, &#39;症状&#39;: &#39;湿邪郁肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;蜜麻黄10g杏仁15g草果10-20g槟榔10-15g蝉蜕5-10g连翘10-30g苍术10-15g桔梗20-30g黄芩15g牛蒡子15g生甘草5-10g。&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;急性期&#39;, &#39;症状&#39;: &#39;湿热蕴肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;陈皮10-15g杏仁10-15g黄芩10-15g瓜蒌皮10-15g茯苓15-30g藿香15g厚朴10-20g青蒿20-30g芦根20-30g金银花15-30g太子参30g生甘草5-10g&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;急性期&#39;, &#39;症状&#39;: &#39;邪热壅肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;蜜麻黄10g杏仁10-15g石膏20-30g桑白皮15g金银花20-30g连翘20-30g黄芩15g浙贝母15g生甘草5-10g&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;急性期&#39;, &#39;症状&#39;: &#39;邪毒闭肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;杏仁15g生石膏20-30g瓜蒌皮15g大黄5g蜜麻黄10g葶苈子15-20g桃仁10g赤芍15g生甘草5-10g&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;急性期&#39;, &#39;症状&#39;: &#39;内闭外脱&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生晒参20-30g,炙附片30-60g，山茱萸15-20g,送服安宫牛黄丸或紫雪散&#39;}, {&#39;发布医院/机构&#39;: &#39;四川省中医药管理局&#39;, &#39;省份&#39;: &#39;四川省&#39;, &#39;早中极恢复期&#39;: &#39;恢复期&#39;, &#39;症状&#39;: &#39;余邪未尽、气阴两虚&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-01-24 00:00:00&#39;), &#39;方剂组成&#39;: &#39;竹叶15g石膏15-20g太子参20-30g麦冬10-15g半夏10g白术15-20g茯苓15-20g炙甘草5-10g&#39;}, {&#39;发布医院/机构&#39;: &#39;江西中医药管理局&#39;, &#39;省份&#39;: &#39;江西省&#39;, &#39;早中极恢复期&#39;: &#39;预防&#39;, &#39;症状&#39;: &#39;&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-03 00:00:00&#39;), &#39;方剂组成&#39;: &#39;生黄芪12g、防风\n\n10g、白术10g、银花10g、连翘10g、贯众6g、佩兰10g、陈皮10g、苍术10g、桔梗10g。&#39;}, {&#39;发布医院/机构&#39;: &#39;江西中医药管理局&#39;, &#39;省份&#39;: &#39;江西省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;寒湿郁肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-03 00:00:00&#39;), &#39;方剂组成&#39;: &#39;苍术15g、陈皮10g、厚朴10g、藿香10g、草果6g、生麻黄6g、羌活10g、生姜10g、槟郎10g&#39;}, {&#39;发布医院/机构&#39;: &#39;江西中医药管理局&#39;, &#39;省份&#39;: &#39;江西省&#39;, &#39;早中极恢复期&#39;: &#39;中&#39;, &#39;症状&#39;: &#39;疫毒闭肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-03 00:00:00&#39;), &#39;方剂组成&#39;: &#39;杏仁10g、生石膏30g、瓜萎30g、生大黄6g、生炙麻黄各6g、葶苈子10g、桃仁10g、草果6g、槟郎10g、苍术10g&#39;}, {&#39;发布医院/机构&#39;: &#39;江西中医药管理局&#39;, &#39;省份&#39;: &#39;江西省&#39;, &#39;早中极恢复期&#39;: &#39;重&#39;, &#39;症状&#39;: &#39;内闭外脱&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-03 00:00:00&#39;), &#39;方剂组成&#39;: &#39;人参15g、黑顺片10g、山茱萸15g，送服苏合香丸或安宫牛黄丸&#39;}, {&#39;发布医院/机构&#39;: &#39;江西中医药管理局&#39;, &#39;省份&#39;: &#39;江西省&#39;, &#39;早中极恢复期&#39;: &#39;恢复&#39;, &#39;症状&#39;: &#39;肺脾气虚&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-03 00:00:00&#39;), &#39;方剂组成&#39;: &#39;法半夏9g、陈皮10g、党参15g、炙黄芪30g、茯苓15g、藿香10g、砂仁6g&#39;}, {&#39;发布医院/机构&#39;: &#39;黑龙江省中医药管理局&#39;, &#39;省份&#39;: &#39;黑龙江省&#39;, &#39;早中极恢复期&#39;: &#39;早&#39;, &#39;症状&#39;: &#39;寒湿郁肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;藿香15g、苏叶15g、桔梗15g、枳壳15g、生麻黄6g、杏仁10g、陈皮15g、茯苓20g、白术15g、佩兰15g、苍术15g、厚朴15g、半夏15g、草果仁15g、白芷15g、黄芩10g、大青叶15g、葛根15g、甘草15g。&#39;}, {&#39;发布医院/机构&#39;: &#39;黑龙江省中医药管理局&#39;, &#39;省份&#39;: &#39;黑龙江省&#39;, &#39;早中极恢复期&#39;: &#39;中&#39;, &#39;症状&#39;: &#39;疫毒闭肺&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;水牛角20g、生地15g、丹参25g、玄参20g、金银花30g、连翘20g、桔梗20g、枳壳20g、川芎15g、赤芍25g、地龙20g、桃仁15g、太子参25g、炒白术20g、茯苓25g、生麻黄10g、白果20g、葶苈子20g、黄芩15g、杏仁10g、紫苏子20g、瓜蒌20g、浙贝母15g、生薏米20g、甘草15g。&#39;}, {&#39;发布医院/机构&#39;: &#39;黑龙江省中医药管理局&#39;, &#39;省份&#39;: &#39;黑龙江省&#39;, &#39;早中极恢复期&#39;: &#39;重&#39;, &#39;症状&#39;: &#39;内闭外脱&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;人参15g、干姜10g、附子10g、甘草10g，煎汤送服紫雪丹或至宝丹、安宫牛黄丸、苏合香丸酌情选用。&#39;}, {&#39;发布医院/机构&#39;: &#39;黑龙江省中医药管理局&#39;, &#39;省份&#39;: &#39;黑龙江省&#39;, &#39;早中极恢复期&#39;: &#39;恢复期&#39;, &#39;症状&#39;: &#39;余邪未尽，气阴两伤&#39;, &#39;发布时间&#39;: Timestamp(&#39;2020-02-26 00:00:00&#39;), &#39;方剂组成&#39;: &#39;竹叶15g、石膏20g、太子参15g、麦冬20g、半夏10g、枇杷叶15g、玉竹15g、玄参15g、杏仁10g、陈皮15g、甘草10g。&#39;}]</code></pre>{% raw %}</details>{% endraw %}<h2 id="保存为json文件格式"><a href="#保存为json文件格式" class="headerlink" title="保存为json文件格式"></a>保存为json文件格式</h2><pre><code class="python">print(filepath + &#39;共有%d&#39; % (len(data)) + &#39;行数据&#39;)for i in data:    i[&#39;发布时间&#39;] = i[&#39;发布时间&#39;].strftime(&quot;%Y %b %d %H:%M:%S&quot;)for i in range(len(data)):    filename = filepath+&#39;outfile/&#39; + str(i+1)+&#39;.json&#39;    with open(filename, &#39;w&#39;, encoding=&#39;utf-8&#39;) as  f:        json.dump(data[i], f, ensure_ascii=False, indent=4)  # ensure_ascii=False(输出中文)， indent=4(缩进为4)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS防火墙配置</title>
      <link href="//post/Experience/centosFirewall/"/>
      <url>//post/Experience/centosFirewall/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5"  face = "楷体">CentOS防火墙配置</font></center></blockquote><a id="more"></a><h2 id="查看防火墙服务状态"><a href="#查看防火墙服务状态" class="headerlink" title="查看防火墙服务状态"></a>查看防火墙服务状态</h2><pre><code>systemctl status firewalld</code></pre><h2 id="查看防火墙的状态"><a href="#查看防火墙的状态" class="headerlink" title="查看防火墙的状态"></a>查看防火墙的状态</h2><pre><code>firewall-cmd --state</code></pre><h2 id="开启、重启、关闭firewalld-service服务"><a href="#开启、重启、关闭firewalld-service服务" class="headerlink" title="开启、重启、关闭firewalld.service服务"></a>开启、重启、关闭firewalld.service服务</h2><ol><li>开启<pre><code>service firewalld start</code></pre></li><li>重启<pre><code>service firewalld restart</code></pre></li><li>关闭<pre><code>service firewalld stop</code></pre><h2 id="查看防火墙规则"><a href="#查看防火墙规则" class="headerlink" title="查看防火墙规则"></a>查看防火墙规则</h2><pre><code>firewall-cmd --list-all</code></pre><h2 id="查询、开放、关闭端口"><a href="#查询、开放、关闭端口" class="headerlink" title="查询、开放、关闭端口"></a>查询、开放、关闭端口</h2></li><li>查询端口是否开放<pre><code>firewall-cmd --query-port=8080/tcp</code></pre></li><li>开放端口（以3306端口为例）<pre><code>firewall-cmd --permanent --add-port=3306/tcp</code></pre></li><li>移除端口<pre><code>firewall-cmd --permanent --remove-port=3306/tcp</code></pre><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2>firewall-cmd:是linux提供的操作firewall的一个工具<br>–permanent:表示设置为持久<br>–add-port:标识添加的端口<h2 id="防火墙配置文件"><a href="#防火墙配置文件" class="headerlink" title="防火墙配置文件"></a>防火墙配置文件</h2><pre><code>/etc/firewalld/zones/public.xml</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题美化 | 给你的博客加上GITHUB日历云和分类雷达图</title>
      <link href="//post/TechShare/HexoPersonal/"/>
      <url>//post/TechShare/HexoPersonal/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5"  face = "楷体">Hexo主题美化 | 给你的博客加上GITHUB日历云和分类雷达图</font></center></blockquote><a id="more"></a><h2 id="Previous"><a href="#Previous" class="headerlink" title="Previous"></a>Previous</h2><ol><li>环境：Hexo4.2</li><li>主题：<a href="https://volantis.js.org/" target="_blank" rel="noopener">Volantis</a></li><li>本次主题美化基于<a href="https://blinkfox.github.io/" target="_blank" rel="noopener">blinkfox</a>的<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a></li><li>演示</li></ol><btns center rounded   grid5><a href='https://blog.yinuxy.com/archives/'><i class='fas fa-globe-asia'></i>GITHUB日历云</a><a href='https://blog.yinuxy.com/tags/'><i class='fas fa-globe-asia'></i>标签云和文章分类雷达图</a></btns><h2 id="GITHUB日历云"><a href="#GITHUB日历云" class="headerlink" title="GITHUB日历云"></a>GITHUB日历云</h2><ol><li>点击此<btn><a href="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/Hexo/themeConfig/echarts.min.js" target="_blank" rel="noopener">按钮</a></btn>下载<code>echarts.min.js</code>文件放置于<code>../volantis/source/js</code>文件夹中</li><li>点击此<btn><a href="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/Hexo/themeConfig/post-calendar.ejs" target="_blank" rel="noopener">按钮</a></btn>下载<code>post-calendar.ejs</code>文件放置于<code>../volantis/layout/_widget</code>文件夹中</li><li>打开刚刚下载的<code>post-calendar.ejs</code>文件，将第七行<fancybox> <img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/img/themePersonalization/output_3.png'></fancybox></li></ol><p>替换为</p><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/echarts.min.js&quot;&gt;&lt;/script&gt;</code></pre><ol start="4"><li>在<code>../volantis/source/less/archive.less</code>里面最后一个括号之前添加如下代码：<pre><code>/*日历云*/#post-calendar { width: 100%; height: 200px;}</code></pre></li></ol><pre><code>或者下载此&lt;btn&gt;[CSS](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/Hexo/themeConfig/matery.css)&lt;/btn&gt;文件后放置于`../volantis/source/css`文件夹中，然后在`../volantis/layout/_partial/head.ejs`中引入css文件，在`&lt;!-- link --&gt;`标记下方添加一行</code></pre><link rel="stylesheet" type="text/css" href="/css/matery.css">```::: danger使用`volantis`主题的直接在`archive.less`里面添加代码，不要引入`matery.css`文件，`matery.css`与`volantis`主题配置文件`archive.less`部分标签名相同，引入后会更改主题外观。:::5. 在你想让它显示的位置添加如下代码就行啦，例如我是将它放在`../volantis/layout/archive.ejs`中<fancybox>    <img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/img/themePersonalization/output_4.png'></fancybox>```<%- partial('_widget/post-calendar') %>```6. 演示图：<fancybox>    <img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/img/themePersonalization/output_1.png'></fancybox><h2 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a>标签云</h2><ol><li>点击此<btn><a href="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/Hexo/themeConfig/echarts.min.js" target="_blank" rel="noopener">按钮</a></btn>下载<code>echarts.min.js</code>文件放置于<code>../volantis/source/js</code>文件夹中</li><li>点击此<btn><a href="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/Hexo/themeConfig/tag-cloud.ejs" target="_blank" rel="noopener">按钮</a></btn>下载<code>tag-cloud.ejs</code>文件放置于<code>../volantis/layout/_widget</code>文件夹中</li><li>打开刚刚下载的<code>tag-cloud.ejs</code>文件，将<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%- theme.jsDelivr.url %&gt;&lt;%- theme.libs.js.echarts %&gt;&quot;&gt;&lt;/script&gt;</code></pre>替换为</li></ol><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/echarts.min.js&quot;&gt;&lt;/script&gt;</code></pre><ol start="4"><li>使用<code>volantis</code>主题的可以点击<btn><a href="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/Hexo/themeConfig/myfile/tag.ejs" target="_blank" rel="noopener">下载</a></btn>按钮替换即可</li><li>非<code>volantis</code>主题的需要下载此<btn><a href="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/Hexo/themeConfig/matery.css" target="_blank" rel="noopener">CSS</a></btn>文件后放置于<code>../volantis/source/css</code>文件夹中，然后在<code>../volantis/layout/_partial/head.ejs</code>中引入css文件，在<code>&lt;!-- link --&gt;</code>标记下方添加一行<pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/matery.css&quot;&gt;</code></pre>若引入后博客外观发生改变，则将如下代码复制粘贴于<code>../volantis/source/less/archive.less</code>文件最后一个括号之前。<pre><code>/*tag-cloud*/.chip .tag-length { margin-left: 5px; margin-right: -2px; font-size: 0.5rem;}.chip-default .tag-length { color: #e91e63; margin-top: 1px;}.chip-active .tag-length { color: #fff;}.chip-container .tag-chips { margin: 1rem auto 0.5rem; max-width: 850px; text-align: center;}/*tags边框*/.chip-container .chip { margin: 10px 10px; padding: 19px 14px; display: inline-flex; line-height: 0; font-size: 1rem; font-weight: 500; border-radius: 5px; cursor: pointer; box-shadow: 0 3px 5px rgba(0, 0, 0, .12); z-index: 0;}.chip-container .chip:hover { color: #fff; background: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%) !important;}</code></pre></li></ol><pre><code>6. 在你想让它显示的位置添加如下代码，例如我是将它放在`../volantis/layout/tag.ejs`中</code></pre><p>&lt;%- partial(‘_widget/tag-cloud’) %&gt;</p><pre><code>添加排版后可能会出现跟主题不搭的情况，可以根据我的&lt;btn&gt;[tag](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/Hexo/themeConfig/myfile/tag.ejs)&lt;/btn&gt;文件适当修改。7. 演示图&lt;fancybox&gt;    &lt;img src=&#39;https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/img/themePersonalization/output_2.png&#39;&gt;&lt;/fancybox&gt;## 文章分类雷达图 ##1. 点击此&lt;btn&gt;[按钮](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/Hexo/themeConfig/echarts.min.js)&lt;/btn&gt;下载`echarts.min.js`文件放置于`../volantis/source/js`文件夹中2. 点击此&lt;btn&gt;[按钮](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/Hexo/themeConfig/category-radar.ejs)&lt;/btn&gt;下载`category-radar.ejs`文件放置于`../volantis/layout/_widget`文件夹中3. 打开刚刚下载的`category-radar.ejs`文件，将&lt;fancybox&gt;    &lt;img src=&#39;https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/img/themePersonalization/output_3.png&#39;&gt;&lt;/fancybox&gt;替换为</code></pre><script type="text/javascript" src="/js/echarts.min.js"></script><pre><code>4. 在你想让它显示的位置添加如下代码，例如我是将它放在`../volantis/layout/tag.ejs`中</code></pre><p>&lt;%- partial(‘_widget/category-radar’) %&gt;</p><pre><code>5. 演示图&lt;fancybox&gt;    &lt;img src=&#39;https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.44/img/themePersonalization/output_2.png&#39;&gt;&lt;/fancybox&gt;## 其它个性化配置 ##更多个性化配置可参考[TRHX](https://www.itrhx.com/)的博文[Hexo 博客主题个性化](https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Python可视化神器 Plotly 动态演示全球疫情变化趋势</title>
      <link href="//post/Python/Visual/2020nCovVisualization/"/>
      <url>//post/Python/Visual/2020nCovVisualization/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5"  face = "楷体">使用 Python可视化神器 Plotly 动态演示全球疫情变化趋势</font></center></blockquote><a id="more"></a><h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><p>疫情的数据来源于开源项目 <a href="https://pypi.org/project/akshare/" target="_blank" rel="noopener">Akshare</a>。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>运行环境：</p><ol><li>Windows 10系统</li><li>Anaconda（Python 3.7）</li><li>Jupyter Notebook<br>本次使用到的Python库： <code>akshare</code>, <code>pandas</code>, <code>plotly</code></li></ol><h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><pre><code>import akshare as akimport pandas as pdimport plotlyfrom plotly.offline import iplot, init_notebook_modeimport plotly.express as pxfrom datetime import datetimeinit_notebook_mode()</code></pre><p><code>init_notebook_mode()</code>是离线使用<code>plotly</code>，不需注册账号即可使用，但是功能没有在线模式全，下面简单的介绍一下两种模式：<br>plotly的两种模式</p><blockquote><p>离线模式：没有数量限制，图片都在本地。<br>在线模式：最多可以上传25张，可以通过浏览器在线编辑、观看。更好的分享给别，有分为三种情况——公开(public)、私人(private)、秘密(secret)。</p></blockquote><pre><code># 从 akshare 获取数# df_all_history = ak.epidemic_history()# 从csv文件获取数据df_all_history = pd.read_csv(&#39;epidemic_all_20200307.csv&#39;,index_col=0)df_all_history</code></pre><p>由于使用该项目获取数据时，有时不太稳定，可能会遇到连接失败的情况，所以，这里选用保存好的数据。</p><h2 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h2><p>从上面获取的数据，有些数据格式需要加以调整，对于日期，我们这里会组织两列数据，一列是时间格式的日期（ <code>[&#39;date&#39;]</code>），一列是字符串格式的日期 (<code>[&#39;dates&#39;]</code>)。这样设置的原因，是因为我们后续分别需要用到这两种格式的日期。</p><pre><code>df_all = df_all_history# 将字符串格式的日期 另保存为一列df_all[&#39;dates&#39;] = df_all_history[&#39;date&#39;]# 将字符串格式的日期转换为 日期格式df_all[&#39;date&#39;] = pd.to_datetime(df_all[&#39;date&#39;])</code></pre><h2 id="获取国外的疫情数据"><a href="#获取国外的疫情数据" class="headerlink" title="获取国外的疫情数据"></a>获取国外的疫情数据</h2><p>上面的数据，是全球的数据，我们可以把其中属于中国的剔除，就可以得到国外的数据了。</p><pre><code># 国外，按国家统计df_oversea = df_all.query(&quot;country!=&#39;中国&#39;&quot;)df_oversea.fillna(value=&quot;&quot;, inplace=True)df_oversea</code></pre><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><p>先来用 plotly express 看下国外疫情分国家的整体走势。</p><pre><code>fig_oversea = px.line(df_oversea, x=&#39;dates&#39;, y=&#39;confirmed&#39;,                      line_group=&#39;country&#39;,                      color=&#39;country&#39;,                      color_discrete_sequence=px.colors.qualitative.D3,                      hover_name=&#39;country&#39;,                     )fig_oversea.show()</code></pre><p>效果如下<br><fancybox><br>    <img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.42/img/2020nCovVisualization/output_1.png'><br></fancybox><br>从上图可以看出，国外的疫情发展情况，大部分国家从2月10日期，发展趋势较为明显，因此，后面我们重点分析这段时间之后的情况。</p><pre><code># 现有数据演示从 2020年2月10日开始df_oversea_recent = df_oversea.set_index(&#39;date&#39;)df_oversea_recent = df_oversea_recent[&#39;2020-02-10&#39;:]df_oversea_recent</code></pre><p>由于部分国家的数据不是从2020年2月10日开始记录的，所以要补充数据。我们可以手动新建一个 excel数据表，将补充日期的数值填充为 0 。<br>这里主要补充的是伊朗的数据，因为伊朗实在是发展太快了，必须纳入分析的范围内。其他国家，如果有需要补充的，后续可以继续完善。</p><pre><code># 由于部分国家，数据不是从2020年2月10日开始的，所以要补充数据，数值为 0# 数据在 excel 表格中进行补充，这里进行读取df_oversea_buchong = pd.read_excel(&#39;epidemic_buchong.xlsx&#39;)df_oversea_buchong[&#39;dates&#39;] = df_oversea_buchong[&#39;date&#39;].apply(lambda x:x.strftime(&#39;%Y-%m-%d&#39;))df_oversea_buchong.set_index(&#39;date&#39;, inplace=True)df_oversea_buchong.fillna(value=&quot;&quot;, inplace=True)print(df_oversea_buchong.info())df_oversea_buchong</code></pre><p>将需要补充的数据弄好后，我们可以合并上面这两部分数据，一起进行分析。</p><pre><code># 合并补充数据df_oversea_recent_new = df_oversea_recent.append(df_oversea_buchong)df_oversea_recent_new.sort_index(inplace=True)df_oversea_recent_new</code></pre><p>得到合并的数据后，首先，用气泡图来对变化情况进行可视化，这里用的是 plotly express 的散点图。</p><pre><code>fig_oversea_recent = px.scatter(df_oversea_recent_new, x=&#39;dead&#39;, y=&#39;confirmed&#39;,                                size=&#39;confirmed&#39;, text=&#39;country&#39;, color=&#39;country&#39;,                                color_discrete_sequence=px.colors.qualitative.Light24,                                animation_frame=&#39;dates&#39;,animation_group=&#39;country&#39;,                                hover_name=&#39;country&#39;,                                range_x=[-10,260],                                range_y=[0,8000],                                size_max=50,                                template=&#39;plotly_white&#39;,)fig_oversea_recent.show()</code></pre><p>效果如下<br><fancybox><br>    <img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.42/img/2020nCovVisualization/outpur_3.png'><br></fancybox></p><h2 id="源码及数据文件"><a href="#源码及数据文件" class="headerlink" title="源码及数据文件"></a>源码及数据文件</h2><btns center rounded   grid5><a href='https://github.com/InfiniteYinux/Python/tree/master/Visualization/Epidemic-analysis' target="_blank" rel="noopener"><i class='fas fa-download'></i>下载源码</a><a href='https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.42/img/2020nCovVisualization/data/' target="_blank" rel="noopener"><i class='fas fa-download'></i>下载数据</a></btns>]]></content>
      
      
      <categories>
          
          <category> 可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python可视化 </tag>
            
            <tag> Plotly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自用的一些Linux一键脚本（持续更新中···）</title>
      <link href="//post/Experience/LinuxScript/"/>
      <url>//post/Experience/LinuxScript/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5"  face = "楷体">Linux一键脚本</font></center></blockquote><a id="more"></a><h2 id="VPS-性能测试一键脚本"><a href="#VPS-性能测试一键脚本" class="headerlink" title="VPS 性能测试一键脚本"></a>VPS 性能测试一键脚本</h2><h3 id="SuperBench-sh"><a href="#SuperBench-sh" class="headerlink" title="SuperBench.sh"></a>SuperBench.sh</h3><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><pre><code>wget -qO- --no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash</code></pre><p>或</p><pre><code>curl -Lso- -no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash</code></pre><h4 id="演示图"><a href="#演示图" class="headerlink" title="演示图"></a>演示图</h4><fancybox>    <img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.40/img/LinuxScript/output_1.jpg'></fancybox><h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><p><a href="https://github.com/oooldking/script/blob/master/superbench.sh" target="_blank" rel="noopener">https://github.com/oooldking/script/blob/master/superbench.sh</a></p><h3 id="bench-sh"><a href="#bench-sh" class="headerlink" title="bench.sh"></a>bench.sh</h3><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><pre><code>wget -qO- bench.sh | bash</code></pre><p>或</p><pre><code>curl -Lso- bench.sh | bash</code></pre><h4 id="演示图-1"><a href="#演示图-1" class="headerlink" title="演示图"></a>演示图</h4><fancybox>    <img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.04/image/Article/2020/06/10/bench.png'></fancybox><h4 id="下载地址-1"><a href="#下载地址-1" class="headerlink" title="下载地址"></a>下载地址</h4><p><a href="https://github.com/teddysun/across/blob/master/bench.sh" target="_blank" rel="noopener">https://github.com/teddysun/across/blob/master/bench.sh</a></p><h3 id="ZBench-sh"><a href="#ZBench-sh" class="headerlink" title="ZBench.sh"></a>ZBench.sh</h3><p>ZBench 基本上是把上面两个脚本的功能合并了一下，再自己加了些许新的功能，可以说是集大成者，可以一次性测试上面两个脚本的测试项。</p><h4 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h4><p>中文版：</p><pre><code>wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench-CN.sh &amp;&amp; bash ZBench-CN.sh</code></pre><p>英文版：</p><pre><code>wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench.sh &amp;&amp; bash ZBench.sh</code></pre><h4 id="演示图-2"><a href="#演示图-2" class="headerlink" title="演示图"></a>演示图</h4><fancybox>    <img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.04/image/Article/2020/06/10/ZBebnch.png'></fancybox><h4 id="下载地址-2"><a href="#下载地址-2" class="headerlink" title="下载地址"></a>下载地址</h4><p><a href="https://github.com/FunctionClub/ZBench/blob/master/ZBench.sh" target="_blank" rel="noopener">https://github.com/FunctionClub/ZBench/blob/master/ZBench.sh</a></p><h3 id="VPS-回程路由一键测试"><a href="#VPS-回程路由一键测试" class="headerlink" title="VPS 回程路由一键测试"></a>VPS 回程路由一键测试</h3><h4 id="使用方法-3"><a href="#使用方法-3" class="headerlink" title="使用方法"></a>使用方法</h4><pre><code>wget -qO- git.io/besttrace | bash</code></pre><h4 id="演示图-3"><a href="#演示图-3" class="headerlink" title="演示图"></a>演示图</h4><fancybox>    <img src='https://cdn.jsdelivr.net/gh/InfiniteYinux/yinuxypic@1.04/image/Article/2020/06/10/besttrace.png'></fancybox><h4 id="下载地址-3"><a href="#下载地址-3" class="headerlink" title="下载地址"></a>下载地址</h4><p><a href="https://github.com/teddysun/across/blob/master/bench.sh" target="_blank" rel="noopener">https://github.com/teddysun/across/blob/master/bench.sh</a></p><h2 id="VPS-一键安装脚本"><a href="#VPS-一键安装脚本" class="headerlink" title="VPS 一键安装脚本"></a>VPS 一键安装脚本</h2><h3 id="一键安装KMS服务脚本"><a href="#一键安装KMS服务脚本" class="headerlink" title="一键安装KMS服务脚本"></a>一键安装KMS服务脚本</h3><h4 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h4><blockquote><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+<br>虚拟技术：任意<br>内存要求：≥128M</p></blockquote><h4 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h4><ol><li>本脚本适用于三大 Linux 发行版，其他版本则不支持。</li><li>KMS 服务安装完成后会加入开机自启动。</li><li>默认记录日志，其日志位于 <code>/var/log/vlmcsd.log</code>。<h4 id="使用方法-4"><a href="#使用方法-4" class="headerlink" title="使用方法"></a>使用方法</h4>使用root用户登录，运行以下命令：<pre><code>wget --no-check-certificate https://github.com/teddysun/across/raw/master/kms.sh &amp;&amp; chmod +x kms.sh &amp;&amp; ./kms.sh</code></pre>安装完成后，输入以下命令查看端口号 1688 的监听情况<pre><code>netstat -nxtlp | grep 1688</code></pre>返回值类似于如下这样就表示 OK 了：<pre><code>tcp        0      0 0.0.0.0:1688                0.0.0.0:*                   LISTEN      3200/vlmcsd         tcp        0      0 :::1688                     :::*                        LISTEN      3200/vlmcsd </code></pre>脚本安装完成后，会将 KMS 服务加入开机自启动。</li></ol><h4 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h4><pre><code>/etc/init.d/kms start           # 启动/etc/init.d/kms stop            # 停止/etc/init.d/kms restart         # 重启/etc/init.d/kms status          # 状态</code></pre><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>使用 root 用户登录，运行以下命令：</p><pre><code>./kms.sh uninstall</code></pre><h4 id="使用-KMS-服务"><a href="#使用-KMS-服务" class="headerlink" title="使用 KMS 服务"></a>使用 KMS 服务</h4><p>KMS 服务，用于在线激活 VOL 版本的 Windows 和 Office。<br>激活的前提是你的系统是批量授权版本，即 VL 版，一般企业版都是 VL 版。而 VL 版本的镜像一般内置 GVLK key，用于 KMS 激活。<br>下面列表里面含有的产品的 VL 版本或者能使用 key 进入 KMS 通道的产品，都支持使用 KMS 激活。<br>使用管理员权限运行 cmd 查看系统版本，命令如下：</p><pre><code>wmic os get caption</code></pre><p>使用管理员权限运行 cmd 安装从上面列表得到的 key，命令如下：</p><pre><code>slmgr /ipk xxxxx-xxxxx-xxxxx-xxxxx-xxxxx</code></pre><p>使用管理员权限运行 cmd 将 KMS 服务器地址设置为你自己的 IP 或 域名，后面最好再加上端口号（:1688），命令如下：</p><pre><code>slmgr /skms Your IP or Domain:1688</code></pre><p>注意：本脚本所做的工作就是此步骤。当你的 KMS 服务出于启动状态，那么此处就可以设置为你自己的 KMS 服务器地址。<br>使用管理员权限运行 cmd 手动激活系统，命令如下：</p><pre><code>slmgr /ato</code></pre><p>关于 <code>Office</code> 的激活，要求必须是 VOL 版本，否则无法激活。<br>找到你的 <code>Office</code> 安装目录，32 位默认一般为 <code>C:\Program Files (x86)\Microsoft Office\Office16</code><br>64 位默认一般为<code>C:\Program Files\Microsoft Office\Office16</code><br><code>Office16</code> 是 <code>Office 2016</code>，<code>Office15</code> 就是 <code>Office 2013</code>，<code>Office14</code> 就是<code>Office 2010</code>。<br>打开以上所说的目录，应该有个 <code>OSPP.VBS</code> 文件。<br>使用管理员权限运行 <code>cmd</code> 进入 <code>Office</code> 目录，命令如下：</p><pre><code>cd &quot;C:\Program Files (x86)\Microsoft Office\Office16&quot;</code></pre><p>使用管理员权限运行 cmd 注册 KMS 服务器地址：</p><pre><code>cscript ospp.vbs /sethst:Your IP or Domain</code></pre><p>使用管理员权限运行 cmd 手动激活 Office，命令如下：</p><pre><code>cscript ospp.vbs /act</code></pre><p>注意： KMS 方式激活，其有效期只有 180 天。<br>每隔一段时间系统会自动向 KMS 服务器请求续期，请确保你自己的 KMS 服务正常运行。<br>参考链接:<a href="https://03k.org/kms.html" target="_blank" rel="noopener">https://03k.org/kms.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令大全（整理自用）</title>
      <link href="//post/Experience/LinuxShell/"/>
      <url>//post/Experience/LinuxShell/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5"  face = "楷体">Linux常用命令大全（整理自用）</font></center></blockquote><a id="more"></a><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><ol><li>查看 linux 文件夹包含的文件</li><li>查看文件权限(包括目录、文件夹、文件权限)</li><li>查看目录信息<h3 id="常用参数搭配"><a href="#常用参数搭配" class="headerlink" title="常用参数搭配"></a>常用参数搭配</h3><pre><code>ls -a 列出目录所有文件，包含以.开始的隐藏文件ls -A 列出除.及..的其它文件ls -r 反序排列ls -t 以文件修改时间排序ls -S 以文件大小排序ls -h 以易读大小显示ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3>按易读方式按时间反序排序，并显示文件详细信息<pre><code>ls -lhrt</code></pre>按大小反序显示文件详细信息<pre><code>ls -lrS</code></pre>列出当前目录中所有以”t”开头的目录的详细内容<pre><code>ls -l t*</code></pre>列出文件绝对路径（不包含隐藏文件）<pre><code>ls | sed &quot;s:^:`pwd`/:&quot;</code></pre>列出文件绝对路径（包含隐藏文件）<pre><code>find $pwd -maxdepth 1 | xargs ls -ld</code></pre></li></ol><h2 id="cd-命令"><a href="#cd-命令" class="headerlink" title="cd 命令"></a>cd 命令</h2><p>cd(changeDirectory) 命令语法：</p><pre><code>cd [dirName]     #切换当前目录至 dirName。</code></pre><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>进入上一次工作路径</p><pre><code>cd -</code></pre><p>把上个命令的参数作为cd参数使用。</p><pre><code>cd !$</code></pre><h2 id="pwd-命令"><a href="#pwd-命令" class="headerlink" title="pwd 命令"></a>pwd 命令</h2><p>pwd 命令用于查看当前工作目录路径。</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>查看当前路径</p><pre><code>pwd</code></pre><p>查看软链接的实际路径</p><pre><code>pwd -P</code></pre><h2 id="mkdir-命令"><a href="#mkdir-命令" class="headerlink" title="mkdir 命令"></a>mkdir 命令</h2><p>mkdir 命令用于创建文件夹。<br>可用选项：<br>    -m: 对新建目录设置存取权限，也可以用 chmod 命令设置;<br>    -p: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。</p><h2 id="rm-命令"><a href="#rm-命令" class="headerlink" title="rm 命令"></a>rm 命令</h2><p>删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。</p><pre><code>rm [选项] 文件…</code></pre><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>删除任何 .log 文件，删除前逐一询问确认：</p><pre><code>rm -i *.log</code></pre><p>删除 test 子目录及子目录中所有档案删除，并且不用一一确认：</p><pre><code>rm -rf test</code></pre><p>删除以 -f 开头的文件</p><pre><code>rm -- -f*</code></pre><h2 id="rmdir-命令"><a href="#rmdir-命令" class="headerlink" title="rmdir 命令"></a>rmdir 命令</h2><p>从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。</p><p>::: warning<br>不能删除非空目录<br>:::</p><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除：</p><pre><code>rmdir -p parent/child/child11</code></pre><h2 id="mv-命令"><a href="#mv-命令" class="headerlink" title="mv 命令"></a>mv 命令</h2><p>移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。</p><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>将文件 test.log 重命名为 test1.txt</p><pre><code>mv test.log test1.txt</code></pre><p>将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中</p><pre><code>mv llog1.txt log2.txt log3.txt /test3</code></pre><p>将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖</p><pre><code>mv -i log1.txt log2.txt</code></pre><p>移动当前文件夹下的所有文件到上一级目录</p><pre><code>mv * ../</code></pre><h2 id="cp-命令"><a href="#cp-命令" class="headerlink" title="cp 命令"></a>cp 命令</h2><p>将源文件复制至目标文件，或将多个源文件复制至目标目录。<br>::: warning<br>命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！<br>:::</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><pre><code>-i 提示-r 复制目录及目录内所有项目-a 复制的文件与原文件时间一样</code></pre><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。</p><pre><code>cp -ai a.txt test</code></pre><p>为 a.txt 建议一个链接（快捷方式）</p><pre><code>cp -s a.txt link_a.txt</code></pre><h2 id="cat-命令"><a href="#cat-命令" class="headerlink" title="cat 命令"></a>cat 命令</h2><p>cat 主要有三大功能：</p><ol><li>一次显示整个文件:<pre><code>cat filename</code></pre></li><li>从键盘创建一个文件:<pre><code>cat &gt; filename</code></pre></li><li>将几个文件合并为一个文件:<pre><code>cat file1 file2 &gt; file</code></pre> -b 对非空输出行号<br> -n 输出所有行号</li></ol><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里</p><pre><code>cat -n log2012.log log2013.log</code></pre><p>把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里</p><pre><code>cat -b log2012.log log2013.log log.log</code></pre><p>使用 here doc 生成新文件</p><pre><code>cat &gt;log.txt &lt;&lt;EOF&gt;Hello&gt;World&gt;PWD=$(pwd)&gt;EOFls -l log.txtcat log.txtHelloWorldPWD=/opt/soft/test</code></pre><p>反向列示</p><pre><code>tac log.txtPWD=/opt/soft/testWorldHello</code></pre><h2 id="more-命令"><a href="#more-命令" class="headerlink" title="more 命令"></a>more 命令</h2><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><p>功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。</p><pre><code>+n      从笫 n 行开始显示-n       定义屏幕大小为n行+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 -c       从顶部清屏，然后显示-d       提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能-l        忽略Ctrl+l（换页）字符-p       通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似-s       把连续的多个空行显示为一行-u       把文件内容中的下画线去掉</code></pre><h3 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h3><pre><code>Enter    向下 n 行，需要定义。默认为 1 行Ctrl+F   向下滚动一屏空格键  向下滚动一屏Ctrl+B  返回上一屏=       输出当前行的行号:f     输出文件名和当前行的行号V      调用vi编辑器!命令   调用Shell，并执行命令q       退出more</code></pre><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>显示文件中从第3行起的内容</p><pre><code>more +3 text.txt</code></pre><p>在所列出文件目录详细信息，借助管道使每次显示 5 行</p><pre><code>ls -l | more -5</code></pre><h2 id="less-命令"><a href="#less-命令" class="headerlink" title="less 命令"></a>less 命令</h2><p>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p><h3 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h3><pre><code>-i  忽略搜索时的大小写-N  显示每行的行号-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来-s  显示连续空行为一行/字符串：向下搜索“字符串”的功能?字符串：向上搜索“字符串”的功能n：重复前一个搜索（与 / 或 ? 有关）N：反向重复前一个搜索（与 / 或 ? 有关）-x &lt;数字&gt; 将“tab”键显示为规定的数字空格b  向后翻一页d  向后翻半页h  显示帮助界面Q  退出less 命令u  向前滚动半页y  向前滚动一行空格键 滚动一行回车键 滚动一页[pagedown]： 向下翻动一页[pageup]：   向上翻动一页</code></pre><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>ps 查看进程信息并通过 less 分页显示</p><pre><code>ps -aux | less -N</code></pre><p>查看多个文件</p><pre><code>less 1.log 2.log</code></pre><p>可以使用 n 查看下一个，使用 p 查看前一个。</p><h2 id="tail-命令"><a href="#tail-命令" class="headerlink" title="tail 命令"></a>tail 命令</h2><p>用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><pre><code>-f 循环读取（常用于查看递增的日志文件）-n&lt;行数&gt; 显示行数（从后向前）</code></pre><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>循环读取逐渐增加的文件内容</p><pre><code>ping 127.0.0.1 &gt; ping.log &amp;</code></pre><p>后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。</p><pre><code>tail -f ping.log</code></pre><h2 id="which-命令"><a href="#which-命令" class="headerlink" title="which 命令"></a>which 命令</h2><p>在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：</p><pre><code>which     查看可执行文件的位置。whereis 查看文件的位置。locate  配合数据库查看文件位置。find        实际搜寻硬盘查询文件名称。</code></pre><p>which 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p><h3 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h3><pre><code>-n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。</code></pre><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>查看 ls 命令是否存在，执行哪个</p><pre><code>which ls</code></pre><p>查看 which</p><pre><code>which which</code></pre><p>查看 cd</p><pre><code>which cd（显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令）</code></pre><p>查看当前 PATH 配置</p><pre><code>echo $PATH</code></pre><p>或使用 env 查看所有环境变量及对应值</p><h2 id="whereis-命令"><a href="#whereis-命令" class="headerlink" title="whereis 命令"></a>whereis 命令</h2><p>whereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。</p><h3 id="常用参数-2"><a href="#常用参数-2" class="headerlink" title="常用参数"></a>常用参数</h3><pre><code>-b   定位可执行文件。-m   定位帮助文件。-s   定位源代码文件。-u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。</code></pre><h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><p>查找 locate 程序相关文件</p><pre><code>whereis locate</code></pre><p>查找 locate 的源码文件</p><pre><code>whereis -s locate</code></pre><h2 id="locate-命令"><a href="#locate-命令" class="headerlink" title="locate 命令"></a>locate 命令</h2><p>locate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc/crontab)。<br>locate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找</p><h3 id="常用参数-3"><a href="#常用参数-3" class="headerlink" title="常用参数"></a>常用参数</h3><pre><code>-l num（要显示的行数）-f   将特定的档案系统排除在外，如将proc排除在外-r   使用正则运算式做为寻找条件</code></pre><h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><p>查找和 pwd 相关的所有文件(文件名中包含 pwd）</p><pre><code>locate pwd</code></pre><p>搜索 etc 目录下所有以 sh 开头的文件</p><pre><code>locate /etc/sh</code></pre><p>查找 /var 目录下，以 reason 结尾的文件</p><pre><code>locate -r &#39;^/var.*reason$&#39;      #其中.表示一个字符，*表示任务多个；.*表示任意多个字符</code></pre><h2 id="find-命令"><a href="#find-命令" class="headerlink" title="find 命令"></a>find 命令</h2><p>用于在文件树中查找文件，并作出相应的处理。<br>命令格式：</p><pre><code>find pathname -options [-print -exec -ok ...]</code></pre><h3 id="命令参数-1"><a href="#命令参数-1" class="headerlink" title="命令参数"></a>命令参数</h3><pre><code>pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。-print： find命令将匹配的文件输出到标准输出。-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为&#39;command&#39; {  } \;，注意{   }和\；之间的空格。-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。</code></pre><h3 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h3><pre><code>-name 按照文件名查找文件-perm 按文件权限查找文件-user 按文件属主查找文件-group  按照文件所属的组来查找文件。-type  查找某一类型的文件，诸如：   b - 块设备文件   d - 目录   c - 字符设备文件   l - 符号链接文件   p - 管道文件   f - 普通文件-size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小-amin n   查找系统中最后N分钟访问的文件-atime n  查找系统中最后n*24小时访问的文件-cmin n   查找系统中最后N分钟被改变文件状态的文件-ctime n  查找系统中最后n*24小时被改变文件状态的文件-mmin n   查找系统中最后N分钟被改变文件数据的文件-mtime n  查找系统中最后n*24小时被改变文件数据的文件(用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )-maxdepth n 最大查找目录深度-prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项</code></pre><h2 id="chmod-命令"><a href="#chmod-命令" class="headerlink" title="chmod 命令"></a>chmod 命令</h2><p>用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</p><p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。<br>以文件 log2012.log 为例：</p><pre><code>-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log</code></pre><p>第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。</p><h3 id="常用参数-4"><a href="#常用参数-4" class="headerlink" title="常用参数"></a>常用参数</h3><pre><code>-c 当发生改变时，报告处理信息-R 处理指定目录以及其子目录下所有文件</code></pre><h3 id="权限范围"><a href="#权限范围" class="headerlink" title="权限范围"></a>权限范围</h3><pre><code>u ：目录或者文件的当前的用户g ：目录或者文件的当前的群组o ：除了目录或者文件的当前用户或群组之外的用户或者群组a ：所有的用户及群组</code></pre><h3 id="权限代号"><a href="#权限代号" class="headerlink" title="权限代号"></a>权限代号</h3><pre><code>r ：读权限，用数字4表示w ：写权限，用数字2表示x ：执行权限，用数字1表示- ：删除权限，用数字0表示s ：特殊权限</code></pre><h3 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h3><p>增加文件 t.log 所有用户可执行权限</p><pre><code>chmod a+x t.log</code></pre><p>撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息</p><pre><code>chmod u=r t.log -c</code></pre><p>给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限</p><pre><code>chmod 751 t.log -c（或者：chmod u=rwx,g=rx,o=x t.log -c)</code></pre><p>将 test 目录及其子目录所有文件添加可读权限</p><pre><code>chmod u+r,g+r,o+r -R text/ -c</code></pre><h2 id="tar-命令"><a href="#tar-命令" class="headerlink" title="tar 命令"></a>tar 命令</h2><p>用来压缩和解压文件。</p><h3 id="常用参数-5"><a href="#常用参数-5" class="headerlink" title="常用参数"></a>常用参数</h3><pre><code>-c 建立新的压缩文件-f 指定压缩文件-r 添加文件到已经压缩文件包中-u 添加改了和现有的文件到压缩包中-x 从压缩包中抽取文件-t 显示压缩文件中的内容-z 支持gzip压缩-j 支持bzip2压缩-Z 支持compress解压文件-v 显示操作过程</code></pre><h3 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h3><p>将文件全部打包成 tar 包</p><pre><code>tar -cvf log.tar 1.log,2.log 或tar -cvf log.*</code></pre><p>/etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩</p><pre><code>tar -zcvf /tmp/etc.tar.gz /etc</code></pre><p>查看刚打包的文件内容（一定加z，因为是使用 gzip 压缩的）</p><pre><code>tar -ztvf /tmp/etc.tar.gz</code></pre><p>要压缩打包 /home, /etc ，但不要 /home/dmtsai</p><pre><code>tar --exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc</code></pre><h2 id="ln-命令"><a href="#ln-命令" class="headerlink" title="ln 命令"></a>ln 命令</h2><p>功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。</p><h3 id="常用参数-6"><a href="#常用参数-6" class="headerlink" title="常用参数"></a>常用参数</h3><pre><code>-b 删除，覆盖以前建立的链接-s 软链接（符号链接）-v 显示详细处理过程</code></pre><h3 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h3><p>给文件创建软链接，并显示操作信息</p><pre><code>ln -sv source.log link.log</code></pre><p>给文件创建硬链接，并显示操作信息</p><pre><code>ln -v source.log link1.log</code></pre><p>给目录创建软链接</p><pre><code>ln -sv /opt/soft/test/test3 /opt/soft/test/test5</code></pre><h2 id="grep-命令"><a href="#grep-命令" class="headerlink" title="grep 命令"></a>grep 命令</h2><p>强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code>grep [option] pattern file|dir</code></pre><h3 id="常用参数-7"><a href="#常用参数-7" class="headerlink" title="常用参数"></a>常用参数</h3><pre><code>-A n --after-context显示匹配字符后n行-B n --before-context显示匹配字符前n行-C n --context 显示匹配字符前后n行-c --count 计算符合样式的列数-i 忽略大小写-l 只列出文件内容符合指定的样式的文件名称-f 从文件中读取关键词-n 显示匹配内容的所在文件中行数-R 递归查找文件夹</code></pre><h3 id="grep-的规则表达式"><a href="#grep-的规则表达式" class="headerlink" title="grep 的规则表达式"></a>grep 的规则表达式</h3><pre><code>^  #锚定行的开始 如：&#39;^grep&#39;匹配所有以grep开头的行。 $  #锚定行的结束 如：&#39;grep$&#39;匹配所有以grep结尾的行。 .  #匹配一个非换行符的字符 如：&#39;gr.p&#39;匹配gr后接一个任意字符，然后是p。  *  #匹配零个或多个先前字符 如：&#39;*grep&#39;匹配所有一个或多个空格后紧跟grep的行。.*   #一起用代表任意字符。  []   #匹配一个指定范围内的字符，如&#39;[Gg]rep&#39;匹配Grep和grep。 [^]  #匹配一个不在指定范围内的字符，如：&#39;[^A-FH-Z]rep&#39;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。  \(..\)  #标记匹配字符，如&#39;\(love\)&#39;，love被标记为1。   \&lt;      #锚定单词的开始，如:&#39;\&lt;grep&#39;匹配包含以grep开头的单词的行。\&gt;      #锚定单词的结束，如&#39;grep\&gt;&#39;匹配包含以grep结尾的单词的行。x\{m\}  #重复字符x，m次，如：&#39;0\{5\}&#39;匹配包含5个o的行。 x\{m,\}  #重复字符x,至少m次，如：&#39;o\{5,\}&#39;匹配至少有5个o的行。  x\{m,n\}  #重复字符x，至少m次，不多于n次，如：&#39;o\{5,10\}&#39;匹配5--10个o的行。  \w    #匹配文字和数字字符，也就是[A-Za-z0-9]，如：&#39;G\w*p&#39;匹配以G后跟零个或多个文字或数字字符，然后是p。  \W    #\w的反置形式，匹配一个或多个非单词字符，如点号句号等。  \b    #单词锁定符，如: &#39;\bgrep\b&#39;只匹配grep。</code></pre><h3 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h3><p>查找指定进程</p><pre><code>ps -ef | grep svn</code></pre><p>查找指定进程个数</p><pre><code>ps -ef | grep svn -c</code></pre><p>从文件中读取关键词</p><pre><code>cat test1.txt | grep -f key.log</code></pre><p>从文件夹中递归查找以grep开头的行，并只列出文件</p><pre><code>grep -lR &#39;^grep&#39; /tmp</code></pre><p>查找非x开关的行内容</p><pre><code>grep &#39;^[^x]&#39; test.txt</code></pre><p>显示包含 ed 或者 at 字符的内容行</p><pre><code>grep -E &#39;ed|at&#39; test.txt</code></pre><h2 id="ps-命令"><a href="#ps-命令" class="headerlink" title="ps 命令"></a>ps 命令</h2><p>ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top</p><p>linux上进程有5种状态:</p><ol><li>运行(正在运行或在运行队列中等待)</li><li>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li><li>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li><li>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</li><li>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)<br>ps 工具标识进程的5种状态码:<pre><code>D 不可中断 uninterruptible sleep (usually IO)R 运行 runnable (on run queue)S 中断 sleepingT 停止 traced or stoppedZ 僵死 a defunct (”zombie”) process</code></pre><h3 id="命令参数-2"><a href="#命令参数-2" class="headerlink" title="命令参数"></a>命令参数</h3>```</li></ol><p>-A 显示所有进程<br>a 显示所有进程<br>-a 显示同一终端下所有进程<br>c 显示进程真实名称<br>e 显示环境变量<br>f 显示进程间的关系<br>r 显示当前终端运行的进程<br>-aux 显示所有包含其它使用的进程</p><pre><code>### 实例 ###显示当前所有进程环境变量及进程间关系</code></pre><p>ps -ef</p><pre><code>显示当前所有进程</code></pre><p>ps -A</p><pre><code>与grep联用查找某进程</code></pre><p>ps -aux | grep apache</p><pre><code>找出与 cron 与 syslog 这两个服务有关的 PID 号码</code></pre><p>ps aux | grep ‘(cron|syslog)’</p><pre><code>## kill 命令 ##发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用&quot;-KILL&quot; 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。### 常用参数 ###</code></pre><p>-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称<br>-a  当处理当前进程时，不限制命令名和进程号的对应关系<br>-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号<br>-s  指定发送信号<br>-u  指定用户</p><pre><code>### 实例 ###使用ps查找进程pro1，然后用kill杀掉</code></pre><p>kill -9 $(ps -ef | grep pro1)</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Python爬取知乎上的高颜值小姐姐</title>
      <link href="//post/Script/zhihuPrettyGril/"/>
      <url>//post/Script/zhihuPrettyGril/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5"  face = "楷体">“你见过的有些人能漂亮到什么程度？”</font></center></blockquote><a id="more"></a><h2 id="爬取链接"><a href="#爬取链接" class="headerlink" title="爬取链接"></a>爬取链接</h2><p>原问题在这儿<a href="https://www.zhihu.com/question/266808424" target="_blank" rel="noopener">你见过的有些人能漂亮到什么程度？</a></p><h2 id="爬取思路"><a href="#爬取思路" class="headerlink" title="爬取思路"></a>爬取思路</h2><p>使用Python爬虫爬取这个问题下的高赞照片。</p><ol><li>爬虫爬了下这个问题下的高赞照片。在欣赏小姐姐的美照之前，我们先来分享一下思路。</li><li>通过知乎回答的url，先把回答一页一页的爬下来，存到本地数据库。随后从数据库里读取数据，筛选出高赞的回答，把回答里的图片解析出来。</li></ol><h2 id="函数解析"><a href="#函数解析" class="headerlink" title="函数解析"></a>函数解析</h2><pre><code>def get_answers_by_page(page_no):    offset = page_no * 10    url = &quot;&lt;answer url&gt;&amp;offset={}&amp;limit=10&amp;sort_by=default&amp;platform=desktop&quot;.format(offset)    headers = {        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&quot;,    }    r = requests.get(url, verify=False, headers=headers)    content = r.content.decode(&quot;utf-8&quot;)    data = json.loads(content)    is_end = data[&quot;paging&quot;][&quot;is_end&quot;]    items = data[&quot;data&quot;]    client = pymongo.MongoClient()    db = client[&quot;beauty&quot;]    if len(items) &gt; 0:        db.answers.insert_many(items)    return is_enddef get_answers():    page_no = 0    client = pymongo.MongoClient()    while True:        print(page_no)        is_end = get_answers_by_page(page_no)        page_no += 1        if is_end:            breakdef query():    client = pymongo.MongoClient()    db = client[&quot;beauty&quot;]    items = db.answers.find({&quot;voteup_count&quot;: {&quot;$gte&quot;: 100}}).sort([(&quot;voteup_count&quot;, pymongo.DESCENDING)])    count = 0    for item in items:        content = item[&quot;content&quot;]        vote_num = item[&quot;voteup_count&quot;]        author = item[&quot;author&quot;][&quot;name&quot;]        matched = re.findall(r&#39;data-original=&quot;([^&quot;]+)&quot;&#39;, content)        print(&quot;&gt; 来自 {}\n&quot;.format(item[&quot;url&quot;]))        print(&quot;&gt; 作者 {}\n&quot;.format(author))        print(&quot;&gt; 赞数 {}\n&quot;.format(vote_num))        img_urls = []        for img_url in matched:            if img_url not in img_urls:                print(&quot;![]({})&quot;.format(img_url))                img_urls.append(img_url)        count += len(img_urls)        print(&quot;\n\n&quot;)    print(count)</code></pre><p><code>get_answers_by_page</code> - 这个函数用于获取一页的回答内容，获取的内容会存到本地MongoDB里<br><code>get_answers</code> - 这个函数用于获取所有页的内容，它会调用上面的函数，循环获取每一页的内容<br><code>query</code> - 这个函数用于从MongoDB里查询数据，筛选高赞回答，并且把结果打印出来</p><p>如果要完整的运行这个项目，大家可以下载源代码后，在本地运行。<br>运行项目后，程序会筛选出所有赞数大于100的回答，并且把回答里的图片整理出来。赞数越高的回答，小姐姐的颜值越高。</p><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p><btn center large><a href="https://github.com/InfiniteYinux/Python/tree/master/pythonScript/zhihu-pretty-girl" target="_blank" rel="noopener"><i class='fas fa-download'></i> 源码下载</a></btn></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven学习心得（情人节快乐！）</title>
      <link href="//post/Experience/MavenShell/"/>
      <url>//post/Experience/MavenShell/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5" color = "#1BC3FB"  face = "楷体">Maven学习心得（祝天下码农终成眷属！）</font></center></blockquote><a id="more"></a><h1 id="Maven介绍及环境搭建"><a href="#Maven介绍及环境搭建" class="headerlink" title="Maven介绍及环境搭建"></a>Maven介绍及环境搭建</h1><h2 id="Maven是什么"><a href="#Maven是什么" class="headerlink" title="Maven是什么"></a>Maven是什么</h2><ol><li>Maven是基于项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件。</li><li>Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。</li><li>Maven这个单词来自于意第绪语（犹太语），意为知识的积累，最初在Jakata Turbine项目中用来简化构建过程。当时有一些项目（有各自Ant build文件），仅有细微的差别，而JAR文件都由CVS来维护。于是希望有一种标准化的方式构建项目，一个清晰的方式定义项目的组成，一个容易的方式发布项目的信息，以及一种简单的方式在多个项目中共享JARs。</li></ol><h2 id="Maven环境搭建"><a href="#Maven环境搭建" class="headerlink" title="Maven环境搭建"></a>Maven环境搭建</h2><p>参考<a href="https://blog.csdn.net/qq_28289405/article/details/88305269" target="_blank" rel="noopener">maven 安装以及环境变量配置</a></p><h1 id="Maven案例创建"><a href="#Maven案例创建" class="headerlink" title="Maven案例创建"></a>Maven案例创建</h1><h2 id="Maven目录结构"><a href="#Maven目录结构" class="headerlink" title="Maven目录结构"></a>Maven目录结构</h2><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_1.png" alt=""></p><ol><li>首先创建文件夹命名为<code>src</code></li><li>在<code>src</code>目录下分别创建子目录<code>main</code>和<code>test</code></li><li>在<code>main</code>和<code>test</code>目录下各创建一个子目录<code>java</code></li></ol><h2 id="创建HelloMaven"><a href="#创建HelloMaven" class="headerlink" title="创建HelloMaven"></a>创建HelloMaven</h2><ol><li><p>在<code>main</code>目录的<code>java</code>目录下创建如下目录并创建<code>HellowWorld.java</code>Java类文件<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_2.png" alt=""></p><pre><code>public class HelloWorld { public String sayHello(){     return &quot;Hello World!&quot;; }}</code></pre></li><li><p>在<code>test</code>目录的<code>java</code>目录下创建如下目录并创建<code>testHello.java</code>Java类文件<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_3.png" alt=""></p><pre><code>import org.junit.*;import org.junit.Assert.*;public class HellOWorldTest { @Test public void testHello() {     Assert.assertEquals(&quot;Hello World!&quot;,new HelloWorld().sayHello()); }}</code></pre></li><li><p>在<code>src</code>根目录下创建<code>pom.xml</code>编写代码如下：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_4.png" alt=""></p><pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;   xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;   &lt;!-- 模型版本。maven2.0必须是这样写，现在是maven2唯一支持的版本 --&gt;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;   &lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.winner.trade，maven会将该项目打成的jar包放本地路径：/com/winner/trade --&gt;   &lt;groupId&gt;com.study&lt;/groupId&gt;   &lt;!-- 本项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;   &lt;artifactId&gt;study-model&lt;/artifactId&gt;   &lt;!-- 本项目目前所处的版本号 --&gt;   &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;   &lt;!-- 打包的机制，如pom,jar, maven-plugin, ejb, war, ear, rar, par，默认为jar --&gt;   &lt;packaging&gt;jar&lt;/packaging&gt;   &lt;!-- 定义本项目的依赖关系 --&gt;   &lt;dependencies&gt;       &lt;!-- 每个dependency都对应这一个jar包 --&gt;       &lt;dependency&gt;           &lt;!--一般情况下，maven是通过groupId、artifactId、version这三个元素值（俗称坐标）来检索该构件， 然后引入你的工程。如果别人想引用你现在开发的这个项目（前提是已开发完毕并发布到了远程仓库），--&gt;            &lt;!--就需要在他的pom文件中新建一个dependency节点，将本项目的groupId、artifactId、version写入， maven就会把你上传的jar包下载到他的本地 --&gt;           &lt;groupId&gt;junit&lt;/groupId&gt;           &lt;artifactId&gt;junit&lt;/artifactId&gt;           &lt;version&gt;4.10&lt;/version&gt;     &lt;/dependency&gt;   &lt;/dependencies&gt;  </code></pre></li></ol></project>  ```4. 打开命令提示行，进入到HelloWorld项目的根目录中输入`mvn compile`回车运行对该项目进行编译（如果是第一次运行Maven会在运行之前下载很多第三方的插件和Maven所依赖的jar）.![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_5.png)出现`BUILD SUCCESS`即表示项目运行成功~![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_6.png)5. 运行测试例，输入`mvn test`:![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_7.png)测试例成功运行，并且无任何报错~6. 接下来看一下项目的根目录下会有哪些变化：![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_8.png)它默认生成了一个`target`文件夹，打开它，在`classes`目录下存放着生成的字节码文件;`surefire-reports`下存放着生成的测试报告；![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_9.png)7. 下面再去命令行键入`mvn package`：![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_10.png)完美运行！可以看到在`target`目录下生成了一个`study-model-1.0.0-SNAPSHOT.jar`的jar包![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Learndiary/Maven001/output_11.png)]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="//post/Experience/DockerShell/"/>
      <url>//post/Experience/DockerShell/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5" color = "#1BC3FB"  face = "楷体">Docker常用命令</font></center></blockquote><a id="more"></a><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><ol><li><p>查看Docker 版本信息</p><pre><code>docker version</code></pre></li><li><p>查看Docker 系统信息，包括镜像和容器数</p><pre><code>docker info</code></pre></li><li><p>查看Docker 常用命令</p><pre><code>docker --help</code></pre><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2></li><li><p>列出镜像</p><pre><code>docker images [OPTIONS]</code></pre><p>参数说明： </p><div style="text-align:center"><table border="1" cellpadding="3" cellspacing="0" style="width: 60%;margin:auto"> <tr>     <th>REPOSITORY</th>     <th>表示镜像的仓库源</th> </tr> <tr>     <td>TAG</td>     <td>镜像的标签</td> </tr> <tr>     <td>IMAGE ID</td>     <td>镜像ID</td> </tr> <tr>     <td>SIZE</td>     <td>镜像大小</td> </tr></table></div></li></ol><p>[OPTIONS]说明：</p><div style="text-align:center">  <table border="1" cellpadding="3" cellspacing="0" style="width: 60%;margin:auto">    <tr>        <th>-a</th>        <th>列出本地所有的镜像（含中间映像层）</th>    </tr>    <tr>        <td>-q</td>        <td>只显示镜像ID</td>    </tr>    <tr>        <td>--digests</td>        <td>显示镜像的摘要信息</td>    </tr>    <tr>        <td>--no-trunc</td>        <td>显示完整的镜像信息</td>    </tr>  </table></div><ol start="2"><li><p>查询镜像</p><pre><code>docker search [OPTION] imagename</code></pre><p>[OPTION]说明：</p><div style="text-align:center"><table border="1" cellpadding="3" cellspacing="0" style="width: 60%;margin:auto"> <tr>     <th>  --no-trunc </th>     <th>        显示完整的镜像描述       </th> </tr> <tr>     <td>      -s     </td>     <td>   列出收藏数不少于指定数的镜像  </td> </tr> <tr>     <td> --automated </td>     <td> 只列出automated bulid类型的镜像 </td> </tr></table></div>  </li><li><p>下载镜像</p></li></ol><pre><code>docker  pull imagename [:TAG]</code></pre><ol start="4"><li>删除镜像</li></ol><pre><code>docker rmi imageID</code></pre><p>删除单个</p><pre><code>docker rmi -f imageID</code></pre><p>删除多个</p><pre><code>docker rmi -f imagename1:TAG1 imagename2:TAG2</code></pre><p>删除全部</p><pre><code>docker rmi -f$(docker images -qa)</code></pre><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p>有镜像才能创建容器！</p><ol><li>新建并启动容器<pre><code>docker run [OPTION] IMAGE [COMMAND] ARG...</code></pre>[OPTION]说明：<div style="text-align:center"><table border="1" cellpadding="3" cellspacing="0" style="width: 80%;margin:auto"> <tr>     <th> --name="" </th>     <th>              为容器制定一个新名称              </th> </tr> <tr>     <td>     -d    </td>     <td>  后台运行容器，并返回容器ID，即启动守护式容器  </td> </tr> <tr>     <td>     -i    </td>     <td>      以交互模式运行容器，通常与-t同时使用      </td> </tr> <tr>     <td>     -t    </td>     <td> 为容器重新分配一个伪输入终端。通常与-i同时使用 </td> </tr> <tr>     <td>     -P    </td>     <td>                  随机端口映射                  </td> </tr> <tr>     <td>     -p    </td>     <td>                  指定端口映射                  </td> </tr></table></div> </li></ol><blockquote><p>-p有以下四种格式：<br>ip:hostPort:containerPort<br>ip::containerPort<br>hostPort:containerPort<br>containerPort</p></blockquote><ol start="2"><li><p>列出当前正在运行的容器</p><pre><code>docker ps [OPTION]</code></pre><p>[OPTION]说明：</p><div style="text-align:center"><table border="1" cellpadding="3" cellspacing="0" style="width: 60%;margin:auto"> <tr>     <th>-a</th>     <th>列出当前正在运行的容器+历史上运行过的</th> </tr> <tr>     <td>-l</td>     <td>显示最近创建的容器</td> </tr> <tr>     <td>-n</td>     <td>显示n个最近创建的容器</td> </tr> <tr>     <td>-q</td>     <td>静默模式，只显示容器编号</td> </tr> <tr>     <td>--no-trunc</td>     <td>不截断退出</td> </tr></table></div></li><li><p>退出容器：</p><pre><code>exit             #容器停止退出Ctrl+P+Q         #容器不停止退出</code></pre></li><li><p>启动容器</p><pre><code>docker start continerID/continerName</code></pre></li><li><p>重启容器</p><pre><code>docker restart continerID/continerName</code></pre></li><li><p>停止容器</p><pre><code>docker stop continerID/continerName</code></pre></li><li><p>强制停止容器</p><pre><code>docker kill continerID/continerName</code></pre></li><li><p>删除已停止的容器</p><pre><code>docker rm continerIDdocker rm -f$(docker ps -a -q)               #一次性删除多个容器docker ps -a -q | xargs docker rm            #一次性删除多个容器</code></pre></li></ol><h2 id="容器命令-重要"><a href="#容器命令-重要" class="headerlink" title="容器命令-重要"></a>容器命令-重要</h2><ol><li><p>启动守护式容器：</p><pre><code>docker run -d containerName</code></pre><blockquote><p>使用镜像<code>centos:latsext</code>以后台模式启动一个容器<code>docker run -d centos</code><br>问题：使用<code>docker ps -a</code>进行查看，<font color = "blue"  face = "黑体">会发现容器已经退出</font><br>很重要的说明一点：<font color = "red"  face = "黑体">Docker容器后台运行，就必须有一个前台进程</font><br>容器运行的命令如果不是那些<font color = "red"  face = "黑体">一直挂起的命令</font>（比如运行top、tail），就会自动退出<br>这个是Docker的机制问题，比如说以你的web容器，我们以nginx为例，正常情况下，我们配置启动服务只需启动相应的service即可。例如<code>service nginx start</code>，但是这样做，nginx为后台进程模式运行，就导致docker前台没有运行的应用，这样的容器后台启动后，会立即自杀以为他觉得她没事可做了。<br>所以，最佳的解决方案是：将你要运行的程序以前台进程的形式运行。</p></blockquote></li><li><p>查看容器日志<br>```<br>docker logs -d -t –tail containerID</p></li></ol><p>-t          加入时间戳<br>-f          跟随最新的日志打印<br>–tail      数字显示最后多少条</p><pre><code>3. 查看容器内运行的进程</code></pre><p>docker top containerID</p><pre><code>4. 查看容器内部细节</code></pre><p>docker inspect containerID</p><pre><code>5. 进入正在运行的容器并以命令行交互</code></pre><p>docker exec it containerID bashShell<br>docker attach containerID    #重新进入</p><pre><code>&gt;  区别&gt;  attach       直接进入容器命令的终端，不启动新的进程&gt;  exec         在容器中打开新的终端，并可以启动新的进程6. 从容器内拷贝文件到主机上</code></pre><p>docker cp containerID:容器内路径 目的主机地址</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda中的python版本降级</title>
      <link href="//post/TechShare/condaDown/"/>
      <url>//post/TechShare/condaDown/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5" color = "#1BC3FB"  face = "楷体">Anaconda中的python版本降级</font></center></blockquote><a id="more"></a><ol><li>打开anaconda navigato<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.28/img/Experience/conda_python_down/output_1.jpg" alt=""></li><li>最左侧边栏选择Environments,搜索python并找到python，查看红框处python版本（我的已经降级为3.5，新安装的情况下会看到的是3.6）<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.28/img/Experience/conda_python_down/output_2.jpg" alt=""></li><li>左键点击python前方绿色箭头（红框处），选择Mark for specific version installation，选择对应的python<br>版本（3.5）<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.28/img/Experience/conda_python_down/output_3.jpg" alt=""></li><li>等待安装完成后（时间有点长，res改成中国的话可以得到改善）,运行下python并检查下版本是否已经降级到了3.5<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.28/img/Experience/conda_python_down/output_4.jpg" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决No module named &#39;mpl_toolkits.basemap&#39;问题</title>
      <link href="//post/CodeError/basemap/"/>
      <url>//post/CodeError/basemap/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5" color = "#1BC3FB"  face = "楷体">解决No module named 'mpl_toolkits.basemap'问题</font></center></blockquote><a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Python3.x版本导入<code>from mpl_toolkits.basemap import Basemap</code>包时出现问题：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.28/img/Error/Feb/output_1.png" alt=""></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>安装pyproj：<br><code>pip install pyproj -i https://pypi.tuna.tsinghua.edu.cn/simple</code><br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.28/img/Error/Feb/output_2.png" alt=""></li><li>进入<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#basemap" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#basemap</a>   ctrl + F   搜索 basemap，下载<img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.28/img/Error/Feb/output_3.png" alt=""><br>下载时请与自身系统所用python版本对应；如python版本为3.6.X、amd64可选用图中红框版本</li><li>下载完后使用Shell命令进入文件根目录运行<code>pip install packagename</code>即可安装成功！<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.29/img/Error/Feb/output_4.png" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basemap </tag>
            
            <tag> pyproj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Word2Vec——使用GloVe训练中文词向量</title>
      <link href="//post/Algorithm/word2vec/"/>
      <url>//post/Algorithm/word2vec/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5" color = "#1BC3FB"  face = "楷体">Word2Vec——使用GloVe训练中文词向量</font></center></blockquote><a id="more"></a><h2 id="准备语料"><a href="#准备语料" class="headerlink" title="准备语料"></a>准备语料</h2><p>准备好中文语料：<a href="https://github.com/Embedding/Chinese-Word-Vectors" target="_blank" rel="noopener">中文语料库</a>，或者使用<a href="https://www.cnblogs.com/sylvanas2012/p/5428746.html" target="_blank" rel="noopener">Leavingseason</a>准备好的语料进行训练：<a href="http://pan.baidu.com/s/1jHZCvvo" target="_blank" rel="noopener">http://pan.baidu.com/s/1jHZCvvo</a><br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.27/img/Word2Vec_GloVe/output_1.png" alt=""></p><h2 id="准备源码"><a href="#准备源码" class="headerlink" title="准备源码"></a>准备源码</h2><p>到<a href="https://github.com/stanfordnlp/GloVe" target="_blank" rel="noopener">斯坦福GloVe开源代码gihub地址</a>下载代码；解压后将语料×××.txt添加到GloVe-master文件夹下<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.27/img/Word2Vec_GloVe/output_2.png" alt=""></p><h2 id="修改训练语料地址"><a href="#修改训练语料地址" class="headerlink" title="修改训练语料地址"></a>修改训练语料地址</h2><p>打开demo.sh文件，修改相应的内容<br>因为demo默认是下载网上的语料来训练的，因此如果要训练自己的语料，需要注释掉<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.27/img/Word2Vec_GloVe/output_3.png" alt=""><br>修改参数设置，将CORPUS设置成语料的名字</p><pre><code>CORPUS=text8                                     要生成词向量的文本VOCAB_FILE=vocab.txt                             得到的词和词频COOCCURRENCE_FILE=cooccurrence.binCOOCCURRENCE_SHUF_FILE=cooccurrence.shuf.binBUILDDIR=buildSAVE_FILE=vectorsVERBOSE=2MEMORY=4.0                                        内存VOCAB_MIN_COUNT=5                                 最小词频数VECTOR_SIZE=50                                    词向量维度MAX_ITER=15                                       训练迭代次数WINDOW_SIZE=15                                    上下文窗口数BINARY=2                                          保存文件类型（2进制）NUM_THREADS=8                                     线程数X_MAX=10</code></pre><h2 id="执行bash文件"><a href="#执行bash文件" class="headerlink" title="执行bash文件"></a>执行bash文件</h2><p>进入到主文件夹下</p><pre><code>make</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.27/img/Word2Vec_GloVe/output_5.png" alt=""></p><pre><code>bash demo.sh</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.27/img/Word2Vec_GloVe/output_6.png" alt=""><br>注意，如果训练数据较大，则训练时间较长，那么建议使用nohup来运行程序</p><pre><code>nohup bash demo.sh &gt;output.txt 2&gt;&amp;1 &amp;</code></pre><p>训练后会得到vetors.txt，打开后在第一行加上vacob_size vector_size，这样才能用word2vec的load函数加载成功<br>vacob_size vector_size可在训练时看到：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.27/img/Word2Vec_GloVe/output_7.png" alt=""></p><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>进入glove目录下，首先先参考README.txt,里面主要介绍这个程序包含了四部分子程序，按步骤分别是<code>vocab_count</code>、<code>cooccur</code>、<code>shuffle</code>、<code>glove</code>：</p><ol><li><code>vocab_count</code>:用于计算原文本的单词统计（生成vocab.txt,每一行为：单词  词频）</li><li><code>cooccur</code>：用于统计词与词的共现，类似word2vec的窗口内的任意两个词（生成的是cooccurrence.bin,二进制文件）</li><li><code>shuffle</code>：对于2中的共现结果重新整理</li><li><code>glove</code>：glove算法的训练模型，会运用到之前生成的相关文件（1&amp;3），最终会输出vectors.txt和vectors.bin（前者直接可以打开，下文主要针对它做研究，后者还是二进制文件）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Word2Vec </tag>
            
            <tag> 词向量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>活动线报001——京东炸年兽脚本</title>
      <link href="//post/Activity/jdzns/"/>
      <url>//post/Activity/jdzns/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5" color = "#1BC3FB"  face = "楷体">活动线报001——京东炸年兽脚本</font></center></blockquote><a id="more"></a><ol><li>使用电脑端登录一下<a href="http://m.jd.com" target="_blank" rel="noopener">http://m.jd.com</a>登录自己账号</li><li>登陆成功后再打开如下链接：<br><a href="https://bunearth.m.jd.com/babelDiy/SGFJVMOZADGTQCZWGEYU/4PWgqmrFHunn8C38mJA712fufguU/index.html#/wxhome" target="_blank" rel="noopener">https://bunearth.m.jd.com/babelDiy/SGFJVMOZADGTQCZWGEYU/4PWgqmrFHunn8C38mJA712fufguU/index.html#/wxhome</a></li><li>进入活动界面有按下F12进入开发者模式 点击Console下粘贴下面红色的脚本 按回车键<pre><code>eval(function(p,a,c,k,e,d){e=function(c){return(c&lt;a?&quot;&quot;:e(parseInt(c/a)))+((c=c%a)&gt;35?String.fromCharCode(c+29):c.toString(36))};if(!&#39;&#39;.replace(/^/,String)){while(c--)d[e(c)]=k[c]||e(c);k=[function(e){return d[e]}];e=function(){return&#39;\\w+&#39;};c=1;};while(c--)if(k[c])p=p.replace(new RegExp(&#39;\\b&#39;+e(c)+&#39;\\b&#39;,&#39;g&#39;),k[c]);return p;}(&#39;6 0=1.5(\&#39;0\&#39;);0.7=&quot;2/3&quot;;0.4=&quot;b://c.d/8&quot;;1.9.a(0);&#39;,14,14,&#39;script|document|text|javascript|src|createElement|var|type|ATmFCV|body|appendChild|https|6url|cn&#39;.split(&#39;|&#39;),0,{}))</code></pre><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Activities/0001/output_1.png" alt=""></li><li>接下来点击右上角三个点 选择<code>More tools</code>-&gt;<code>Network conditions</code><br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Activities/0001/output_2.png" alt=""><br>运行会出现一个ʚ福利鸭ɞ 如下图<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Activities/0001/output_3.png" alt=""></li><li>复制下面红色的<code>user-Agent</code>粘贴到箭头1位置;再重复一次步骤3。<pre><code>jdapp;android;8.4.2;8.0.0;;network/wifi;model/Mi Note 2;osVer/26;appBuild/71043;psn/|7;psq/1;uid/;adk/;ads/;pap/JA2015_311210|8.4.2|ANDROID 8.0.0;osv/8.0.0;pv/2.23;jdv/;ref/com.jingdong.app.mall.WebActivity;partner/huawei;apprpd/Home_Main;Mozilla/5.0 (Linux; Android 8.0.0; Mi Note 2 Build/OPR1.170623.032; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/71.0.3578.99 Mobile Safari/537.36</code></pre><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Activities/0001/output_4.png" alt=""></li><li>点击左侧的所有按钮完成任务。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Activities/0001/output_5.png" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> 活动线报 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记（0002） - 【贪心算法】活动安排问题</title>
      <link href="//post/Algorithm/Algorithm-2/"/>
      <url>//post/Algorithm/Algorithm-2/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5" color = "#1BC3FB"  face = "楷体">算法笔记（0002） - 【贪心算法】活动安排问题</font></center></blockquote><a id="more"></a><h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在对问题求解时，总是做出在<font face="黑体" color="red">当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。</font>贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>贪心算法采用<font face="黑体" color="red">自顶向下</font>，以迭代的方法做出相继的贪心选择，每做一次贪心选择就将所求问题简化为一个规模更小的子问题，通过每一步贪心选择，可得到问题的一个最优解，虽然每一步上都要保证能获得局部最优解，但由此产生的全局解有时不一定是最优的，所以贪婪法不要回溯。能够用贪心算法求解的问题一般具有两个重要特性：<font face="黑体" color="red">贪心选择性质</font>和<font face="黑体" color="red">最优子结构性质。</font></p><h3 id="1、贪心选择性质"><a href="#1、贪心选择性质" class="headerlink" title="1、贪心选择性质"></a>1、贪心选择性质</h3><p>所谓贪心选择性质是指所求问题的整体最优解可以通过一系列局部最优的选择，即贪心选择来达到。这是贪心算法可行的第一个基本要素。贪心算法则通常以自顶向下的方式进行，以迭代的方式作出相继的贪心选择，每作一次贪心选择就将所求问题简化为规模更小的子问题。</p><p>对于一个具体问题，要确定它是否具有贪心选择性质，必须证明每一步所作的贪心选择最终导致问题的整体最优解。证明的大致过程为：首先考察问题的一个整体最优解，并证明可修改这个最优解，使其以贪心选择开始。做了贪心选择后，原问题简化为规模更小的类似子问题。然后用数学归纳法证明通过每一步做贪心选择，最终可得到问题的整体最优解。其中，证明贪心选择后的问题简化为规模更小的类似子问题的关键在于利用该问题的最优子结构性质。</p><h3 id="2、最优子结构性质"><a href="#2、最优子结构性质" class="headerlink" title="2、最优子结构性质"></a>2、最优子结构性质</h3><p>当一个问题的最优解包含其子问题的最优解时，称此问题具有最优子结构性质。</p><h3 id="3、贪心算法与动态规划算法的差异"><a href="#3、贪心算法与动态规划算法的差异" class="headerlink" title="3、贪心算法与动态规划算法的差异"></a>3、贪心算法与动态规划算法的差异</h3><p>动态规划和贪心算法都是一种递推算法，均有最优子结构性质，通过局部最优解来推导全局最优解。两者之间的区别在于：<font face="黑体" color="red">贪心算法中作出的每步贪心决策都无法改变，因为贪心策略是由上一步的最优解推导下一步的最优解，而上一部之前的最优解则不作保留，贪心算法每一步的最优解一定包含上一步的最优解。动态规划算法中全局最优解中一定包含某个局部最优解，但不一定包含前一个局部最优解，因此需要记录之前的所有最优解。</font></p><h3 id="4、基本思路："><a href="#4、基本思路：" class="headerlink" title="4、基本思路："></a>4、基本思路：</h3><ol><li>建立数学模型来描述问题。</li><li>把求解的问题分成若干个子问题。</li><li>对每一子问题求解，得到子问题的局部最优解。</li><li>把子问题的解局部最优解合成原来解问题的一个解。</li></ol><h1 id="活动安排问题"><a href="#活动安排问题" class="headerlink" title="活动安排问题"></a>活动安排问题</h1><p>活动安排问题就是要在所给的活动集合中选出最大的相容活动子集合，是可以用贪心算法有效求解的很好例子。该问题要求高效地安排一系列争用某一公共资源的活动。贪心算法提供了一个简单、漂亮的方法使得尽可能多的活动能兼容地使用公共资源。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p> 设有n个活动的集合E={1,2,…,n}，其中每个活动都要求使用同一资源，如演讲会场等，而在同一时间内只有一个活动能使用这一资源。每个活动i都有一个要求使用该资源的起始时间si和一个结束时间fi,且si &lt;fi。如果选择了活动i，则它在半开时间区间[si, fi)内占用资源。若区间[si, fi)与区间[sj, fj)不相交,则称活动i与活动j是相容的。也就是说，当si≥fj或sj≥fi时，活动i与活动j相容。活动安排问题就是要在所给的活动集合中选出最大的相容活动子集合。 </p><h2 id="求解思路"><a href="#求解思路" class="headerlink" title="求解思路"></a>求解思路</h2><p>将活动按照结束时间进行从小到大排序。然后用i代表第i个活动，s[i]代表第i个活动开始时间，f[i]代表第i个活动的结束时间。按照从小到大排序，挑选出结束时间尽量早的活动，并且满足后一个活动的起始时间晚于前一个活动的结束时间，全部找出这些活动就是最大的相容活动子集合。事实上系统一次检查活动i是否与当前已选择的所有活动相容。若相容活动i加入已选择活动的集合中，否则，不选择活动i，而继续下一活动与集合A中活动的相容性。若活动i与之相容，则i成为最近加入集合A的活动，并取代活动j的位置。</p><p>下面给出求解活动安排问题的贪心算法，各活动的起始时间和结束时间存储于数组s和f中，且按结束时间的非减序排列。如果所给的活动未按此序排列，可以用O(nlogn)的时间重排。具体代码如下：</p><pre><code>#include &quot;stdafx.h&quot;#include &lt;iostream&gt; using namespace std; template&lt;class Type&gt;void GreedySelector(int n, Type s[], Type f[], bool A[]);const int N = 11;int main(){    //下标从1开始,存储活动开始时间    int s[] = {0,1,3,0,5,3,5,6,8,8,2,12};    //下标从1开始,存储活动结束时间    int f[] = {0,4,5,6,7,8,9,10,11,12,13,14};    bool A[N+1];    cout&lt;&lt;&quot;各活动的开始时间,结束时间分别为：&quot;&lt;&lt;endl;    for(int i=1;i&lt;=N;i++)    {        cout&lt;&lt;&quot;[&quot;&lt;&lt;i&lt;&lt;&quot;]:&quot;&lt;&lt;&quot;(&quot;&lt;&lt;s[i]&lt;&lt;&quot;,&quot;&lt;&lt;f[i]&lt;&lt;&quot;)&quot;&lt;&lt;endl;    }    GreedySelector(N,s,f,A);    cout&lt;&lt;&quot;最大相容活动子集为：&quot;&lt;&lt;endl;    for(int i=1;i&lt;=N;i++)    {        if(A[i]){            cout&lt;&lt;&quot;[&quot;&lt;&lt;i&lt;&lt;&quot;]:&quot;&lt;&lt;&quot;(&quot;&lt;&lt;s[i]&lt;&lt;&quot;,&quot;&lt;&lt;f[i]&lt;&lt;&quot;)&quot;&lt;&lt;endl;        }    }    return 0;}template&lt;class Type&gt;void GreedySelector(int n, Type s[], Type f[], bool A[]){    A[1]=true;    int j=1;//记录最近一次加入A中的活动    for (int i=2;i&lt;=n;i++)//依次检查活动i是否与当前已选择的活动相容    {        if (s[i]&gt;=f[j])        {             A[i]=true;            j=i;        }        else        {            A[i]=false;        }    }}</code></pre><p>由于输入的活动以其完成时间的非减序排列，所以算法greedySelector每次总是选择<font face="黑体" color="red">具有最早完成时间</font>的相容活动加入集合A中。直观上，按这种方法选择相容活动<font face="黑体" color="red">为未安排活动留下尽可能多的时间。</font>也就是说，该算法的贪心选择的意义是<font face="黑体" color="red">使剩余的可安排时间段极大化，以便安排尽可能多的相容活动。</font>算法greedySelector的效率极高。当输入的活动已按结束时间的非减序排列，算法只需O(n)的时间安排n个活动，使最多的活动能相容地使用公共资源。如果所给出的活动未按非减序排列，可以用O(nlogn)的时间重排。 </p><p>例：设待安排的11个活动的开始时间和结束时间按结束时间的非减序排列如下：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Algorithm_Note0002/output_2.jpg" alt=""><br>算法greedySelector 的计算过程如下图所示。图中每行相应于算法的一次迭代。阴影长条表示的活动是已选入集合A的活动，而空白长条表示的活动是当前正在检查相容性的活动。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Algorithm_Note0002/output_3.jpg" alt=""><br>若被检查的活动i的开始时间Si小于最近选择的活动j的结束时间fi，则不选择活动i，否则选择活动i加入集合A中。贪心算法并不总能求得问题的整体最优解。但对于活动安排问题，贪心算法greedySelector却总能求得的整体最优解，即它最终所确定的相容活动集合A的规模最大。这个结论可以用数学归纳法证明。</p><p> 证明如下：设E=｛0，1，2，…，n-1｝为所给的活动集合。由于E中活动安排安结束时间的非减序排列，所以活动0具有最早完成时间。首先证明活动安排问题有一个最优解以贪心选择开始，即该最优解中包含活动0.设a是所给的活动安排问题的一个最优解，且a中活动也按结束时间非减序排列，a中的第一个活动是活动k。如k=0，则a就是一个以贪心选择开始的最优解。若k&gt;0，则我们设b=a-｛k｝∪｛0｝。由于end[0] ≤end[k],且a中活动是互为相容的，故b中的活动也是互为相容的。又由于b中的活动个数与a中活动个数相同，且a是最优的，故b也是最优的。也就是说b是一个以贪心选择活动0开始的最优活动安排。因此，证明了总存在一个以贪心选择开始的最优活动安排方案，也就是算法具有贪心选择性质。</p><h2 id="例题练手"><a href="#例题练手" class="headerlink" title="例题练手"></a>例题练手</h2><p>题目地址：<a href="https://www.51nod.com/tutorial/course.html#!courseId=14" target="_blank" rel="noopener">点击打开链接</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有若干个活动，第i个开始时间和结束时间是[Si,fi)，只有一个教室，活动之间不能交叠，求最多安排多少个活动？</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ol><li>开始最早的活动优先，目标是想尽早结束活动，让出教室。</li></ol><p>然而， 这个显然不行，因为最早的活动可能很长，影响我们进行后面的活动。例如活动开始和结束时间分别为[0, 100), [1,2) ,[2, 3), [3, 4),[4,5]，安排［0，100)的这个活动之后，其他活动无法安排，可是最优解是安排除它外的4个活动。<br>2. 短活动优先， 目标也是尽量空出教室。但是不难构造如下反例： [0,5) [5,10) [3, 7), 这里[3,7)最短，但如果我们安排了[3,7)，其它两个无法安排了。但是最优解显然是安排其它两个，而放弃[3,7)，可见这个贪心策略也是不行的。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Algorithm_Note0002/output_4.jpg" alt=""><br>3. 最少冲突的活动优先， 既然上面安排活动是想减少冲突，那么如果我们优先安排冲突最少的活动可以么？至少从（1）和（2）看来，这个策略是有效的。真是对的么？ 尝试这个例子：<br>[0,2) [2,4) [4,6) [6,8)<br>[1,3) [1,3) [1,3) [3,5) [5,7) [5,7) [5,7)<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Algorithm_Note0002/output_5.jpg" alt=""><br>看一下[0,2) 和3个活动冲突——3个[1,3)</p><p>[2,4)和4个活动冲突3个[1,3)和一个[3,5)<br>[4,6)和也和4个活动冲突3个[5,7)和一个[3,5)<br>[6,8)和3个活动冲突——3个[5,7)</p><p>下面[1,3)和[5,7)每个都和5个活动冲突，<br>而[3,5)只和两个活动冲突——[2,4)和[4,6)。</p><p>那按照我们的策略应该先安排[3,5), 可是一旦选择了[3,5)，我们最多只可能安排3个活动。<br>但明显第一行的4个活动都可以安排下来，所以这种策略也是不对的。<br>4. 看似最不对的策略——结束时间越早的活动优先。这个策略是有效的，我们可以证明。假设最优解OPT中安排了m个活动，我们把这些活动也按照结束时间由小到大排序，显然是不冲突的。假设排好顺序后，这些活动是a(1) , a(2), a(3)….am</p><p>假设按照我们的贪心策略，选出的活动自然是按照结束时间排好顺序的，并且也都是不冲突的，这些活动是b(1), b(2) …b(n)</p><p>问题关键是，假设a(1) = b(1), a(2) = b(2)…. a(k) = b(k)，但是a(k+1) != b(k+1)，回答几个问题：</p><ol><li>b(k+1)会在a(k+2), a(k+3), …. a(m)中出现么？<br>不会。因为b(k+1)的结束时间是最早的，即f(b(k+1)) &lt;= f(a(k+1)),而a(k+2), a(k+3), …. a(m)的开始时间和结束时间都在f(a(k+1))之后，所以b(k+1)不在其中。</li><li>b(k+1)和a(1), a(2), …. a(k) 冲突么？<br>不冲突，因为a(1), a(2), …. a(k)就是b(1), b(2), …. b(k)</li><li>b(k+1)和a(k+2), a(k+3), …. a(m)冲突么？<br>不冲突，因为f(b(k+1)) &lt;= f(a(k+1))，而a(k+2), a(k+3), …. a(m)的开始时间都在f(a(k+1))之后，更在f(b(k+1))之后。</li></ol><p>因此我们可以把a(k+1) 换成b(k+1)， 从而最优解和我们贪心得到的解多了一个相同的，经过一个一个替换，我们可以把最优解完全替换成我们贪心策略得到的解。 从而证明了这个贪心策略的最优性。<br>最后，我们来提供输入输出数据，由你来写一段程序，实现这个算法，只有写出了正确的程序，才能继续后面的课程。</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第1行：1个数N，线段的数量(2 &lt;= N &lt;= 10000)<br>第2 - N + 1行：每行2个数，线段的起点和终点(-10^9 &lt;= S,E &lt;= 10^9)</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出最多可以选择的线段数量。</p><h3 id="输入示例"><a href="#输入示例" class="headerlink" title="输入示例"></a>输入示例</h3><p>3<br>1 5<br>2 3<br>3 6</p><h3 id="输出示例"><a href="#输出示例" class="headerlink" title="输出示例"></a>输出示例</h3><p>2</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code>#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;struct Node{   int start;   int end;} a[10001];/**  自定义的排序规则*/bool cmp(Node x,Node y){    if(x.end&lt;y.end)        return true;    else if(x.end==y.end&amp;&amp;x.start&gt;y.start)        return true;    return false;}int main(){    int n;    cin&gt;&gt;n;    for(int i=0;i&lt;n;i++){        cin&gt;&gt;a[i].start&gt;&gt;a[i].end;    }    //a是待排序的数组的首地址，a+n是尾地址    //cmp是自定义排序规则    sort(a,a+n,cmp);    int ans =0;    int end = -1000000000;    for(int i=0;i&lt;n;i++){        if(a[i].start&gt;=end){            ans++;            end=a[i].end;        }    }    cout&lt;&lt;ans&lt;&lt;endl;    return 0;}</code></pre><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><blockquote><p><a href="https://blog.csdn.net/liufeng_king/article/details/8709005" target="_blank" rel="noopener">贪心算法与活动安排问题</a><br><a href="https://blog.csdn.net/qq_26891045/article/details/51025619" target="_blank" rel="noopener">ACM–贪心算法–活动安排问题</a></p></blockquote><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=1mf6rgkiph5g5" target="_blank" rel="noopener">https://cloud.tencent.com/developer/support-plan?invite_code=1mf6rgkiph5g5</a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最优子结构 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记（0001） - 【动态规划】图像压缩问题</title>
      <link href="//post/Algorithm/Algorithm-1/"/>
      <url>//post/Algorithm/Algorithm-1/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5" color = "#1BC3FB"  face = "楷体">算法笔记（0001） - 【动态规划】图像压缩问题</font></center></blockquote><a id="more"></a><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在计算机中，常用像素点的灰度值序列{p1,p1,……pn}表示图像。其中整数pi,1&lt;=i&lt;=n，表示像素点i的灰度值。通常灰度值的范围是0-255。因此需要8位二进制数来表示一个像素。这个时候大家应该有了一些小的疑问：我能不能用更少的位数来表示灰度值？（因为有的灰度值并没有达到255这么大）所以我们引入了图像压缩算法来解决这个问题。<br>不过在引入问题之前，我要在这里介绍一些算法设计的知识——我们要将灰度值序列分组，而每一组中所有的数就有可能是&lt;255的，所以我们就不需要用8位数字去表示像素大小了，但是分组会带来一个新的问题：我如何表示当前组中像素的个数和像素的位数呢（因为不是八位，所以要有一个数据来记录真正的位数）？这里我们引入两个固定位数的值来表示，①我们用3位数字来表示当前组的每一位像素的的位数②我们引入8来表示当前组中像素点的个数　　因为我们在这里规定了一组中最多存储–&gt;0~255个数字，而一个灰度值最多有8位（2^3），所以我们可以用即3位数字来表示当前组的像素位数（注意这里都是二进制）<br>压缩的原理就是<font color = "red"  face = "黑体">把序列{p1,p1,……pn}进行设断点，将其分割成一段一段的。分段的过程就是要找出断点，让一段里面的像素的最大灰度值比较小，那么这一段像素(本来需要8位)就可以用较少的位(比如7位)来表示，从而减少存储空间。</font><br>b代表bits,l代表length,分段是，b[i]表示每段一个像素点需要的最少存储空间(少于8位才有意义)，l[i]表示每段里面有多少个像素点，s[i]表示从0到i压缩为一共占多少存储空间。<br>如果限制l[i]&lt;=255,则需要8位来表示l[i]。而b[i]&lt;=8，需要3位表示b[i]。所以每段所需的存储空间为l[i]*b[i]+11位。假设将原图像分成m段，那么需要<img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Algorithm_Note0001/output_1.jpg" alt="">位的存储空间。<br>图像压缩问题就是要<font color = "red"  face = "黑体">确定像素序列{p1,p1,……pn}的最优分段，使得依此分段所需的存储空间最小。</font></p><h1 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h1><p>设l[i],b[i],1&lt;=i&lt;=m是{p1,p1,……pn}的一个最优分段，则l[1],b[1]是{p1,……,pl[1]}的一个最优分段，且l[i],b[i],2&lt;=i&lt;=m是{pl[1]+1,……,pn}的一个最优分段。即图像压缩问题满足最优子结构性质。</p><h1 id="递推关系"><a href="#递推关系" class="headerlink" title="递推关系"></a>递推关系</h1><p>设s[i],1&lt;=i&lt;=n是像素序列{p1,p1,……pi}的最优分段所需的存储位数，则s[i]为前i-k个的存储位数加上后k个的存储空间。由最优子结构性质可得：<img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Algorithm_Note0001/output_2.jpg" alt="">)式中<img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Algorithm_Note0001/output_3.jpg" alt=""></p><h1 id="构造最优解"><a href="#构造最优解" class="headerlink" title="构造最优解"></a>构造最优解</h1><p>数组l[i],b[i]记录了最优分段所需的信息最优分段的最后一段的段长度和像素位数分别存储在l[n]和b[n]中,其前一段的段长度和像素位数存储于l[n-l[n]]和b[n-l[n]]中，依此类推，可在O(n)时间内构造最优解。</p><h1 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h1><p>{6, 5, 7,5, 245, 180, 28,28,19, 22, 25,20}这是一组灰度值序列。我们按照默认的解体方法来看—-一共12个数字，所以12*8=96位来表示。<br>而下面我们将其进行分组：<img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Algorithm_Note0001/output_4.png" alt=""><br>这里我们将他们分为三组：</p><ol><li>第一组4个数，最大是7所以用3位表示；</li><li>第二组2个数，最大是245所以用8位表示；</li><li>第三组6个数，最大是28所以用5位表示；</li><li>这个时候，我们最后得到了最后的位数结果为：43+28+65+113=91。是不是优化了？？<br>那我们算法应该怎么做来找最优的值呢？？<br>下面我一步一步介绍。<br>压缩过程中的数组存储：<br>既然是DP问题，所以我们肯定需要数组来记录每一步的最优值。这里我们用<br>S[i]来记录前i个数字的最优处理方式得到的最优解。<br>l[i]中来记录第当前第i个数所在组中有多少个数。(因而只有每一组的最后一个l[x],存储有效)（这句话，暂时看不懂也没关系）<br>b[i]中存第i个数的像素位数。</li></ol><p>下面我写出来具体的递推过程–&gt;<br>例题:　求像素序列4，6，5，7，129，138，1的最优分段。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Algorithm_Note0001/output_5.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/Algorithm_Note0001/output_6.png" alt=""><br>在解体过程中，我们知道在我们求s[3]的时候，我们是分三种情况—-</p><ol><li><p>前三个数为一组，这个时候我需要的存储位数是3(位数)*3（每一组中数的个数）+11（每分一组所必须的固定位数）</p></li><li><p>s[1]为单独一组，剩下的两个数字为一组，此时我所需要的空间为s[1]+2*3+11</p></li><li><p>前两个数字为一组，最后一个数为一组。此时我们要用s[2]（前面已经计算出的最优值）+3*1+11<br>然后比较三个数的大小，取最小的那一种分组情况，然后记下l[3]=3（当前最优分组中是三个数在同一组中），b[3]=3（每一个像素所用的存储位数）<br>递归到最后得到最优解为　　58.</p><h1 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h1><pre><code>写完奉上</code></pre><h2 id="压缩部分代码"><a href="#压缩部分代码" class="headerlink" title="压缩部分代码"></a>压缩部分代码</h2><pre><code>void Compress(int n,int p[],int s[],int l[],int b[]){ int Lmax = 256,header = 11; s[0] = 0; for(int i=1; i&lt;=n; i++) {     b[i] = length(p[i]);//计算像素点p需要的存储位数       int bmax = b[i];     s[i] = s[i-1] + bmax + header;     l[i] = 1;     for(int j=2; j&lt;=i &amp;&amp; j&lt;=Lmax;j++)  //最后一段含有一个像素，两个像素，所有像素     {           //if(bmax&lt;b[i-j+1])   //最后一个b[i-j+1]有效，是前一段当中的最大值，并不是后一段中的最大值         if(bmax&lt;length(p[i-j+1]))          {               bmax = length(p[i-j+1]);           }           if(s[i]&gt;s[i-j]+j*bmax+header)           {               s[i] = s[i-j] + j*bmax+header;               l[i] = j;               b[i] = bmax;  //我加，跟新当前组，所需的存储位数         }       }   }  }  </code></pre></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><pre><code>//代码参考：https://www.cnblogs.com/caiyishuai/p/8876077.html //dacao 2019/6/25#include&lt;iostream&gt; #include&lt;cmath&gt;  #include&lt;stack&gt;using namespace std;   const int N = 7;  int length(int i);  void Compress(int n,int p[],int s[],int l[],int b[]);  int TraceBack(int n,int l[],int b[]);  //返回有多少个段void Out(int m,int min_len,int l[],int b[]);int main()  {      //int p[] = {0,10,12,15,255,1,2};//图像灰度数组 下标从1开始计数        int p[] = {0,255,1,5,2,1,2};    int s[N]={0},l[N]={0},b[N]={0};      cout&lt;&lt;&quot;图像的灰度序列为：&quot;&lt;&lt;endl;      for(int i=1;i&lt;N;i++)      {          cout&lt;&lt;p[i]&lt;&lt;&quot; &quot;;      }      cout&lt;&lt;endl;      Compress(N-1,p,s,l,b);      int m=TraceBack(N-1,l,b);     Out(m,s[N-1],l,b);    return 0;  }  void Compress(int n,int p[],int s[],int l[],int b[])  {      int Lmax = 256,header = 11;      s[0] = 0;      for(int i=1; i&lt;=n; i++)      {          b[i] = length(p[i]);//计算像素点p需要的存储位数          int bmax = b[i];          s[i] = s[i-1] + bmax + header;          l[i] = 1;          for(int j=2; j&lt;=i &amp;&amp; j&lt;=Lmax;j++)  //最后一段含有一个像素，两个像素，所有像素        {              //if(bmax&lt;b[i-j+1])   //最后一个b[i-j+1]有效，是前一段当中的最大值，并不是后一段中的最大值            if(bmax&lt;length(p[i-j+1]))             {                  bmax = length(p[i-j+1]);              }              if(s[i]&gt;s[i-j]+j*bmax+header)              {                  s[i] = s[i-j] + j*bmax+header;                  l[i] = j;                  b[i] = bmax;  //我加，跟新当前组，所需的存储位数            }          }      }  }  int length(int i)  {       int k=1;      i = i/2;      while(i&gt;0)      {          k++;          i=i/2;      }      return k;   //return ceil(log(i+1)/log(2));  }  int TraceBack(int n,int l[],int b[]) //从后向前检查，因而之后对应段的，最后一个存储有效{    stack&lt;int&gt;ss;    ss.push(l[n]);    ss.push(b[n]);    while (n!=0)    {        n=n-l[n];        ss.push(l[n]);  //l[0]=0,也被压入栈中        ss.push(b[n]);    }    int i=0;    while (!ss.empty())    {        b[i]=ss.top();        ss.pop();         l[i]=ss.top(); //此时　ｌ[]，用来存储，第ｉ组中，元素个数        ss.pop();        i++;    }    return i-1;}void Out(int m,int min_len,int l[],int b[]){    int i=0;    cout&lt;&lt;&quot;最小长度：&quot;&lt;&lt;min_len&lt;&lt;endl;    cout&lt;&lt;&quot;共分成：&quot;&lt;&lt;m&lt;&lt;&quot;段&quot;&lt;&lt;endl;    for(i=i+1;i&lt;=m;i++)    {        cout&lt;&lt;&quot;第一个段含有&quot;&lt;&lt;l[i]&lt;&lt;&quot;元素.   &quot;&lt;&lt;&quot;需要存储位数&quot;&lt;&lt;b[i]&lt;&lt;endl;    }}</code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><blockquote><p><a href="https://blog.csdn.net/liufeng_king/article/details/8648195" target="_blank" rel="noopener">0016算法笔记——【动态规划】图像压缩问题</a><br><a href="https://blog.csdn.net/sinat_38816924/article/details/93771579" target="_blank" rel="noopener">图像压缩－－－动态规划</a><br><a href="https://blog.csdn.net/bingqingsuimeng/article/details/78675855" target="_blank" rel="noopener">动态规划之–图像压缩</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 最优子结构 </tag>
            
            <tag> 重叠子问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kettle 利用 HTTP Client 获取猫眼电影API近期上映相关信息，并解析json</title>
      <link href="//post/TechShare/Kettle/"/>
      <url>//post/TechShare/Kettle/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "4" color = "#1BC3FB"  face = "楷体">kettle 利用 HTTP Client 获取猫眼电影API近期上映相关信息，并解析json</font></center></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Kettle 除了常规的数据处理之外，还可以模拟发送HTTP client/post  ，REST client。</p><h2 id="实验背景"><a href="#实验背景" class="headerlink" title="实验背景"></a>实验背景</h2><p>这周二老师布置了一项实验：</p><blockquote><p>建立一个转换，实现一个猫眼API热映电影的json，生成为xls文件。<br>猫眼的热门电影接口为： <a href="http://m.maoyan.com/#movie" target="_blank" rel="noopener">http://m.maoyan.com/#movie</a>，从里面找到API接口：<a href="http://m.maoyan.com/ajax/movieOnInfoList" target="_blank" rel="noopener">http://m.maoyan.com/ajax/movieOnInfoList</a>。需要获取里面的：电影名、评分、主演、信息。</p></blockquote><h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><p>我使用的是kettle的HTTP GET 请求访问了<a href="http://m.maoyan.com/ajax/movieOnInfoList" target="_blank" rel="noopener">猫眼电影提供的接口</a></p><p>HTTP Client 组件在kettle中的位置是：<img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/kettle_proj1/output_1.png" alt=""></p><p>kettle 的处理流程为：<img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/kettle_proj1/output_2.png" alt=""></p><h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><p>HTTP Client 为设置请求，HTTP client 通过url调用接口，有两种方式。第一种是直接给定 url，第二种通过步骤从前一步当中传 url 过来。<br>调用之后返回的数据一般会以json的形式存在一个字段当中。我们可以通过设定“结果字段名”对获取后的 json 进行命名，方便下面操作。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/kettle_proj1/output_3.png" alt=""><br>在调用HTTP client 时如果被拒绝访问时可以添加请求头。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/kettle_proj1/output_4.png" alt=""></p><h2 id="kettle-解析json"><a href="#kettle-解析json" class="headerlink" title="kettle 解析json"></a>kettle 解析json</h2><p>kettle 解析json主要通过 输入内的组件 json input 。<br>使用该组件时，<font color = "red"  face = "黑体">必须保证解析的json的格式完全符合自己编写的解析规则。</font><br>读取本地文件解析无需勾选 源定义在一个字段里 。<br>勾选之后可以从上个步骤当中获取包含json的字段 ，对其解析。该字段一般会是 http client  的 结果输出字段名 。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/kettle_proj1/output_5.png" alt=""><br>HTTP client 解析时json 结构未知,需要我们自己书写解析规则。<br>以下面的json 为例 ，我们需要获取 results 中的nm 、star、sc、showInfo、rt等信息对应的json解析规则如下<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/kettle_proj1/output_6.png" alt=""></p><pre><code>{&quot;coming&quot;:[],&quot;movieIds&quot;:[503342,1230121,1249366,342146,1277939,345419,1250700,1227005,1219701,1215348,1256872,1225993,1251174,296020,1178432,359377,1211270,345397,1190383,1260354,1245196,1243361,1277982,1240752,334625,78519,668097,1197625,1291398,1180993,1242130],&quot;stid&quot;:&quot;576591972453269000&quot;,&quot;stids&quot;:[{&quot;movieId&quot;:503342,&quot;stid&quot;:&quot;576591972453269000_a503342_c0&quot;}    ,{&quot;movieId&quot;:1230121,&quot;stid&quot;:&quot;576591972453269000_a1230121_c1&quot;}    ,{&quot;movieId&quot;:1249366,&quot;stid&quot;:&quot;576591972453269000_a1249366_c2&quot;}    ,{&quot;movieId&quot;:342146,&quot;stid&quot;:&quot;576591972453269000_a342146_c3&quot;}    ,{&quot;movieId&quot;:1277939,&quot;stid&quot;:&quot;576591972453269000_a1277939_c4&quot;}    ,{&quot;movieId&quot;:345419,&quot;stid&quot;:&quot;576591972453269000_a345419_c5&quot;}    ,{&quot;movieId&quot;:1250700,&quot;stid&quot;:&quot;576591972453269000_a1250700_c6&quot;}    ,{&quot;movieId&quot;:1227005,&quot;stid&quot;:&quot;576591972453269000_a1227005_c7&quot;}    ,{&quot;movieId&quot;:1219701,&quot;stid&quot;:&quot;576591972453269000_a1219701_c8&quot;}    ,{&quot;movieId&quot;:1215348,&quot;stid&quot;:&quot;576591972453269000_a1215348_c9&quot;}    ,{&quot;movieId&quot;:1256872,&quot;stid&quot;:&quot;576591972453269000_a1256872_c10&quot;}    ,{&quot;movieId&quot;:1225993,&quot;stid&quot;:&quot;576591972453269000_a1225993_c11&quot;}],&quot;total&quot;:31,&quot;movieList&quot;:[    {&quot;id&quot;:503342,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/c437c3e340eff266f5cc7dcc79bead6b2406517.jpg&quot;,&quot;version&quot;:&quot;v3d imax&quot;,&quot;nm&quot;:&quot;双子杀手&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:102860,&quot;star&quot;:&quot;威尔·史密斯,玛丽·伊丽莎白·温斯特德,克里夫·欧文&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;今天51家影院放映58场&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0}    ,{&quot;id&quot;:1230121,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/cddf92d0ac6a0db837a1bc488b241c42267927.jpg&quot;,&quot;version&quot;:&quot;v2d imax&quot;,&quot;nm&quot;:&quot;中国机长&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:9.4,&quot;globalReleased&quot;:true,&quot;wish&quot;:561040,&quot;star&quot;:&quot;张涵予,欧豪,杜江&quot;,&quot;rt&quot;:&quot;2019-09-30&quot;,&quot;showInfo&quot;:&quot;今天126家影院放映1637场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0}    ,{&quot;id&quot;:1249366,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/moviemachine/ff399baffe786445b96e4e3d24fe1eeb675719.jpg&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;航海王：狂热行动&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:337092,&quot;star&quot;:&quot;田中真弓,冈村明美,中井和哉&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;今天4家影院放映4场&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0}    ,{&quot;id&quot;:342146,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/6392cd350d00860921042cdac7f2ed797389667.jpg&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;犯罪现场&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:8.9,&quot;globalReleased&quot;:true,&quot;wish&quot;:110692,&quot;star&quot;:&quot;古天乐,张继聪,宣萱&quot;,&quot;rt&quot;:&quot;2019-10-12&quot;,&quot;showInfo&quot;:&quot;今天125家影院放映1369场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0}    ,{&quot;id&quot;:1277939,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/moviemachine/b2c5c74d33e45745fd3462e44b3698e18336620.jpg&quot;,&quot;version&quot;:&quot;v2d imax&quot;,&quot;nm&quot;:&quot;我和我的祖国&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:9.7,&quot;globalReleased&quot;:true,&quot;wish&quot;:578308,&quot;star&quot;:&quot;黄渤,张译,韩昊霖&quot;,&quot;rt&quot;:&quot;2019-09-30&quot;,&quot;showInfo&quot;:&quot;今天126家影院放映1201场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0}    ,{&quot;id&quot;:345419,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p1.meituan.net/w.h/moviemachine/c68e3fff79463952b33cbc1e1b45442b1772992.jpg&quot;,&quot;version&quot;:&quot;v3d imax&quot;,&quot;nm&quot;:&quot;沉睡魔咒2&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:227645,&quot;star&quot;:&quot;安吉丽娜·朱莉,艾丽·范宁,切瓦特·埃加福特&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;今天34家影院放映34场&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0}    ,{&quot;id&quot;:1250700,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/4c01895cfd53e82f7c3048c407974a6b4739229.jpg&quot;,&quot;version&quot;:&quot;v2d imax&quot;,&quot;nm&quot;:&quot;攀登者&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:9.4,&quot;globalReleased&quot;:true,&quot;wish&quot;:558579,&quot;star&quot;:&quot;吴京,章子怡,张译&quot;,&quot;rt&quot;:&quot;2019-09-30&quot;,&quot;showInfo&quot;:&quot;今天124家影院放映700场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0}    ,{&quot;id&quot;:1227005,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/980cddbf2fe1296ae3657c968e536ea56541174.png&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;侠路相逢&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:24896,&quot;star&quot;:&quot;姜武,邵兵,姚娆&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;2019-10-18 本周五上映&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0}    ,{&quot;id&quot;:1219701,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/c8c17eb7c9c82d189771e3bfdd4d95061444262.jpg&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;急速逃脱&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:7.7,&quot;globalReleased&quot;:true,&quot;wish&quot;:24799,&quot;star&quot;:&quot;沃坦·维尔克·默林,汉娜·赫茨施普龙,克里斯蒂安娜·保罗&quot;,&quot;rt&quot;:&quot;2019-10-12&quot;,&quot;showInfo&quot;:&quot;今天41家影院放映106场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0}    ,{&quot;id&quot;:1215348,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/6bce8da6f1daa7f69bed91cd00b049a42186478.jpg&quot;,&quot;version&quot;:&quot;&quot;,&quot;nm&quot;:&quot;天作谜案&quot;,&quot;preShow&quot;:true,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:18799,&quot;star&quot;:&quot;西达尔特·马尔霍特拉,索娜什·辛哈,阿克夏耶·坎纳&quot;,&quot;rt&quot;:&quot;2019-10-25&quot;,&quot;showInfo&quot;:&quot;2019-10-25 下周五上映&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0}    ,{&quot;id&quot;:1256872,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/db82e48befc1c7e2e98425165b2500d76222872.jpg&quot;,&quot;version&quot;:&quot;v3d&quot;,&quot;nm&quot;:&quot;为国而歌&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:0,&quot;globalReleased&quot;:false,&quot;wish&quot;:8700,&quot;star&quot;:&quot;王雷,古力娜扎,海一天&quot;,&quot;rt&quot;:&quot;2019-10-18&quot;,&quot;showInfo&quot;:&quot;2019-10-18 本周五上映&quot;,&quot;showst&quot;:4,&quot;wishst&quot;:0}    ,{&quot;id&quot;:1225993,&quot;haspromotionTag&quot;:false,&quot;img&quot;:&quot;http://p0.meituan.net/w.h/movie/cbfd89ee598b5837c7d6b7bb6f6d9e0a1744668.jpg&quot;,&quot;version&quot;:&quot;v3d&quot;,&quot;nm&quot;:&quot;雪人奇缘&quot;,&quot;preShow&quot;:false,&quot;sc&quot;:9.3,&quot;globalReleased&quot;:true,&quot;wish&quot;:59473,&quot;star&quot;:&quot;汪可盈,张子枫,丹增·诺盖·特雷纳&quot;,&quot;rt&quot;:&quot;2019-10-01&quot;,&quot;showInfo&quot;:&quot;今天38家影院放映57场&quot;,&quot;showst&quot;:3,&quot;wishst&quot;:0}]}</code></pre><p>注意：<br>在<code>字段-&gt;路径</code>中如果要传递的值在第二层，那么$后面有2个点号，不加的话可能会传递不了值</p>]]></content>
      
      
      
        <tags>
            
            <tag> kettle </tag>
            
            <tag> HTTP Client </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 1067-取石子游戏</title>
      <link href="//post/OJContest/AlgorithmNote-2/"/>
      <url>//post/OJContest/AlgorithmNote-2/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5" color = "RED"  face = "楷体">威佐夫博弈（Wythoff Game）/巴什博弈（Bash Game）</font></center></blockquote><a id="more"></a><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><center><strong>Time Limit: 1000MS        Memory Limit: 10000K</strong></center><center><strong>Total Submissions: 1        Accepted: 1</strong></center>有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出对应也有若干行，每行包含一个数字1或0，如果最后你是胜者，则为1，反之，则为0。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2 1<br>8 4<br>4 7</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>0<br>1<br>0</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><a href="http://poj.org/searchproblem?field=source&key=NOI" target="_blank" rel="noopener">NOI</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><a href="https://baike.baidu.com/item/%E5%A8%81%E4%BD%90%E5%A4%AB%E5%8D%9A%E5%BC%88/19858256?fromtitle=%E5%A8%81%E4%BD%90%E5%A4%AB%E5%8D%9A%E5%A5%95&fromid=7139745&fr=aladdin" target="_blank" rel="noopener">威佐夫博弈（Wythoff’s game）</a>，是ACM题中常见的组合游戏中的一种，大致上是这样的：<br>比如有两堆石子，先设定一堆有 10，另一堆有 15 个，双方轮流取走一些石子，合法的取法有如下两种：</p><ol><li>在一堆石子中取走任意多颗；</li><li>在两堆石子中取走相同多的任意颗；</li></ol><p>约定取走最后一颗石子的人为赢家，求必胜策略。<br>有两堆各若干个物品，两个人轮流从某一堆或同时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜。如果甲面对（0，0），那么甲已经输了，这种局势我们称为奇异局势。前几个奇异局势是：（0，0）、（1，2）、（3，5）、（4，7）、（6，10）.可以看出,a0=b0=0,ak是未在前面出现过的最小自然数,而 bk=ak+k. 那么任给一个局势（a，b），怎样判断它是不是奇异局势呢？<br>我们有如下公式：<br> ak =[k（1+√5）/2]，bk= ak + k （k=0，1，2，…,n 方括号表示取整函数)<br>奇妙的是其中出现了黄金分割数（1+√5）/2 = 1。618…,因此,由ak，bk组成的矩形近似为黄金矩形，由于2/（1+√5）=（√5-1）/2，可以先求出j=[a（√5-1）/2]，若a=[j（1+√5）/2]，那么a = aj，bj = aj + j，若不等于，那么a = aj+1，bj+1 = aj+1+ j + 1，若都不是，那么就不是奇异局势。然后再按照上述法则进行，一定会遇到奇异局势。</p><h3 id="奇异局势的性质"><a href="#奇异局势的性质" class="headerlink" title="奇异局势的性质"></a>奇异局势的性质</h3><ol><li>任何自然数都包含在一个且仅有一个奇异局势中。<br>由于a[k]是未在前面出现过的最小自然数，所以有a[k] &gt; a[k-1] ，而 b[k]= a[k] + k &gt; a[k-1] + k &gt; a[k-1] + k - 1 = b[k-1] &gt; a[k-1] 。所以性质1成立。</li><li>任意操作都可将奇异局势变为非奇异局势。<br>事实上，若只改变奇异局势（a[k]，b[k]）的某一个分量，那么另一个分量不可能在其他奇异局势中，所以必然是非奇异局势。如果使（a[k]，b[k]）的两个分量同时减少，则由于其差不变，且不可能是其他奇异局势的差，因此也是非奇异局势。</li><li>采用适当的方法，可以将非奇异局势变为奇异局势。<br>假设面对的局势是（a,b），若 b = a，则同时从两堆中取走 a 个物体，就变为了奇异局势（0，0）；如果a = a[k] ，b &gt; b[k] 那么，取走b - b[k]个物体，即变为奇异局势；如果 a = a[k] ， b &lt; b[k] 则同时从两堆中拿走a-a[b-a]（注：这里b-a是a的下标， 不是a*(b-a)） 个物体变为奇异局势（ a[b-a], b-a+a[b-a]）；如果a &gt; a[k] ，b= a[k] + k 则从第一堆中拿走多余的数量a - a[k] 即可；如果a &lt; a[k] ，b= b[k],分两种情况，第一种，a=a[n] （n&lt; k）从第二堆里面拿走 b - b[n] 即可；第二种，a=b[n] （n &lt; k）从第二堆里面拿走 b - a[n] 即可。</li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><pre><code>from math import sqrtimport sysdef solution(a ,b):    a = int(a)    b = int(b)    if a&lt;b :        a ^= b        b ^= a        a ^= b    k = a - b    a = int(k * (1 + sqrt(5)) / 2.0)    if a == b:        print(&quot;0\n&quot;)    else:        print(&quot;1\n&quot;)for line in sys.stdin:    line = line.strip()    a, b = line.strip().split(&#39; &#39;)    solution(a, b)</code></pre><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><pre><code>#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;using namespace std;int a,b;int main(){    //freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);    while(~scanf(&quot;%d%d&quot;,&amp;a,&amp;b)){        if(a&lt;b){            a^=b;            b^=a;            a^=b;        }        int k=a-b;        a=(int)(k*(1+sqrt(5))/2.0);        if(a==b)            printf(&quot;0\n&quot;);        else            printf(&quot;1\n&quot;);    }    return 0;</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wythoff&#39;s game </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热烈庆祝中华人民共和国成立70周年</title>
      <link href="//post/Activity/70th/"/>
      <url>//post/Activity/70th/</url>
      
        <content type="html"><![CDATA[<p><marquee scrollamount=2 width=auto height=45 scrolldely="10" align="absmiddle"><b><font style="font-weight: normal; font-size: 30pt; line-height: normal; font-style: normal; font-variant: normal" face=宋体 color=#ff0000><b>热烈庆祝中华人民共和国成立七十周年</b></font></b></marquee></p></p><a id="more"></a><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/pageimg/anniversary.jpg"><center><font  size = "6" color = "FF0000"  face = "楷体">热烈庆祝中华人民共和国成立七十周年</font></center><center><font  size = "6" color = "FF0000"  face = "楷体">祝祖国母亲七十华诞生日快乐！</font></center>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Comet OJ - Contest  \#11 eon题解</title>
      <link href="//post/OJContest/AlgorithmNote-1/"/>
      <url>//post/OJContest/AlgorithmNote-1/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5" color = "#1BC3FB"  face = "楷体">在一上来动不动就用循环体我就剁手！</font></center></blockquote><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>「这次练习用的数也太大了吧，我怎么记得住。」线段树小声嘀咕着，「我用所有的手指也只能数到 10231023 。」</p><p>「这可不是数据结构会作出的发言。」链表指引着面前的少女把数写进她的本体——一棵二叉树的图样中。有光自最浅的节点倾泻而下。「接下来你应该把这个十进制数按数位拆开，重新排列出一个最大的数，然后算出这个数和原数的差。」她正要问线段树是否听懂了任务，却被线段树的发问打断了。</p><p>「上一代数据结构，他们会区间排序，能轻松地击溃那些题目，是这样吗？他们于代码的溪流中降生，在算法的庇佑下抽枝长叶，以天赐的技巧征服了我们一代至今无法涉足的外界，是这样吗？」</p><p>链表沉默半晌，转移了话题：「你还不会输出，那便直接告诉我练习的答案对 10 取模的值。」</p><p>你对这个种族的历史毫无兴趣，只想知道练习题的答案，也就是说——</p><hr><h3 id="简洁题意："><a href="#简洁题意：" class="headerlink" title="简洁题意："></a>简洁题意：</h3><p>对于一个数 nn ，记 mm 为把 nn 的各数位重排序得到的最大的数，求 m-nm−n 对 1010 取模的值(也就是 m-nm−n 除以 10 的余数)。</p><p>举例来说，当 n=213 时， 各数位重排序有 123、132、213、231、312、321 六种可能，其中最大的数字是 321 ，所以 m=321，输出的答案即为 (m-n) = 108 对 10 取模的结果，也就是 8。</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h2><p>一行一个整数 n (0 &lt; n &lt; 10<sup>10<sup>6</sup></sup> ,也就是说 n 是位数不超过 10n<sup>6</sup> 的正整数。)。</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><p>一个整数，表示答案。</p><table><thead><tr><th>样例输入 1</th><th>样例输出 1</th></tr></thead><tbody><tr><td>213</td><td>8</td></tr></tbody></table><p>样例解释 1<br>此样例的解释在题目描述里。</p><table><thead><tr><th>样例输入 2</th><th>样例输出 2</th></tr></thead><tbody><tr><td>71806291</td><td>9</td></tr></tbody></table><p>样例解释 2<br>答案为 98762110−71806291=26955819≡9(mod10) 。</p><table><thead><tr><th>样例输入 2</th><th>样例输出 2</th></tr></thead><tbody><tr><td>12345678912345678912345</td><td>6</td></tr></tbody></table><p>样例解释 3<br>请特别注意， n 的值可能非常大，无法用 32-bits 或 64-bits 整数储存。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><font  size = "4" color = "000000"  face = "黑体">一看到这个题第一眼我以为就是卡数据想都没想就选了Python用了两个循环就交了，结果当然是WA了，结果卡出1900ms，后来仔细审了下题，因本题数据非常大，而且所求只与数位有关，然后结果就是最大数的最低位（即原数的数位的最小值）和原数最低位的差。这样它的时间复杂度就为O(n)。</font></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><pre><code>num = input()num = list(num)for i in num:    i = int(i)minnum = min(num)print((int(minnum) - int(num[len(num)-1]))%10)</code></pre><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><pre><code>#include &lt;bits/stdc++.h&gt;using namespace std;typedef unsigned long long ull;const int N=1e7;int a[N];int main(){    string s;    cin&gt;&gt;s;    int x=s.size();    int y;    y=s[x-1]-&#39;0&#39;;    int minn=0x3f3f3f3f;    for(int i=0;i&lt;s.size();i++)    {        if(s[i]-&#39;0&#39;&lt;minn) minn=s[i]-&#39;0&#39;;    }    int p=minn-y;    if(p==0) cout&lt;&lt;0;    else cout&lt;&lt;p+10; }</code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Python来分析一波周董新曲《说好不哭》为何如此火爆！</title>
      <link href="//post/Script/dontCry/"/>
      <url>//post/Script/dontCry/</url>
      
        <content type="html"><![CDATA[<blockquote><center><font  size = "5" color = "FF0000"  face = "楷体">用Python来分析一波周董新曲《说好不哭》为何如此火爆！</font></center></blockquote><a id="more"></a><p><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_1.jpg" alt="png"></fancybox></p><p>9 月 16 日晚间，周董在朋友圈发布了最新单曲《说好不哭》</p><p>发布后，真的让一波人哭了</p><p>一群想抢鲜听的小伙伴直接泪奔</p><p>因为 QQ 音乐直接被搞崩了</p><p>没想到干翻 QQ 音乐的不是网易云音乐</p><p>也不是虾米音乐</p><p>而是周董！</p><p>周董成成功地凭一己之力干翻了 QQ 音乐</p><p>那么听过周董新歌后的小伙伴都是怎么评价的呢？</p><p>这里，我们获取了 QQ 音乐的近 20W 条评论数据进行分析</p><p>看看其中有哪些有趣的东西</p><h1 id="一、数据获取"><a href="#一、数据获取" class="headerlink" title="一、数据获取"></a>一、数据获取</h1><h2 id="1、请求分析"><a href="#1、请求分析" class="headerlink" title="1、请求分析"></a>1、请求分析</h2><p>在 QQ 网页版直接搜索『说好不哭』<br>很容易就能找到单曲页面<br><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_2.jpg" alt="png"></fancybox></p><center><font  size = "1" color = "000000"  face = "楷体">说好不哭</font></center><p>拉到页面最下方<br>可以看到评论的分页查看按钮<br><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_3.jpg" alt="png"></fancybox></p><center><font  size = "1" color = "000000"  face = "楷体">分页查看</font></center><p>按下 F12 点击第二页<br>在请求流中就可以看到对应的请求<br><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_4.jpg" alt="png"></fancybox></p><center><font  size = "1" color = "000000"  face = "楷体">评论请求</font></center><p>其中可以看到两个重要参数：&lt;fontcolor = “FF0000”&gt;pagenum</font> 和 &lt;fontcolor = “FF0000”&gt;pagesize</font></p><p>将请求 copy 到 Postman 中进行测试<br><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_5.jpg" alt="png"></fancybox></p><center><font  size = "1" color = "000000"  face = "楷体">Postman测试</font></center><p>发现可以直接获取到数据<br>连 Header 都不需要添加<br>这里尝试对请求参数进行了精简<br>最终只需要如下几个参数即可<br><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_6.jpg" alt="png"></fancybox></p><center><font  size = "1" color = "000000"  face = "楷体">参数精简</font></center><p>从 Postman 中可以直接获取到对应的代码</p><pre><code>import requestsurl = &quot;https://c.y.qq.com/base/fcgi-bin/fcg_global_comment_h5.fcg&quot;querystring = {&quot;biztype&quot;:&quot;1&quot;,&quot;topid&quot;:&quot;237773700&quot;,&quot;cmd&quot;:&quot;8&quot;,&quot;pagenum&quot;:&quot;1&quot;,&quot;pagesize&quot;:&quot;25&quot;}response = requests.request(&quot;GET&quot;, url, params=querystring)print(response.text)</code></pre><p>这里是单页评论的获取<br>所有评论的获取只需递增 pagenum 即可</p><h2 id="2、数据解析"><a href="#2、数据解析" class="headerlink" title="2、数据解析"></a>2、数据解析</h2><p>返回数据中有很多暂时不需要的字段<br>这里我们只取其中的用户名、评论时间、评论内容、点赞数<br>对应如下字段</p><pre><code>{    &quot;nick&quot;: &quot;丨那壹刻永遠消失\&quot;\&quot;&quot;,    &quot;praisenum&quot;: 1,    &quot;rootcommentcontent&quot;: &quot;越听越好听怎么回事！&quot;,    &quot;time&quot;: 1568729836,}</code></pre><p>由于数据量较大 这里我们暂时将数据存放在 Excel 中<br>一来无须依赖外部数据库<br>二来可以使用 Excel 对数据进行二次处理<br>数据存储代码如下：</p><pre><code>def file_do(list_info, file_name):    # 获取文件大小    if not os.path.exists(file_name):        wb = openpyxl.Workbook()        page = wb.active        page.title = &#39;jay&#39;        page.append([&#39;昵称&#39;,&#39;时间&#39;,&#39;点赞数&#39;,&#39;评论&#39;])    else:        wb = openpyxl.load_workbook(file_name)        page = wb.active    for info in list_info:        try:            page.append(info)        except Exception:            print(info)    wb.save(filename=file_name)</code></pre><h1 id="二、数据可视化"><a href="#二、数据可视化" class="headerlink" title="二、数据可视化"></a>二、数据可视化</h1><h2 id="1、各时段的评论数"><a href="#1、各时段的评论数" class="headerlink" title="1、各时段的评论数"></a>1、各时段的评论数</h2><p>首先我们对评论按小时区间进行汇总<br>由于时间粒度比较小，这里对时间粒度进行了一些处理<br><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_7.jpg" alt="png"></fancybox></p><center><font  size = "1" color = "000000"  face = "楷体">评价人数走势图</font></center><p>周董的新曲是在 9.16 号 23 点准时发布的<br>可以看出在发布后的一个小时内（23:00-24:00）<br>评论数量达到了高峰<br>占了总评论数的一半以上<br>另外看了一眼 9.16 23 点之前的评论也很有意思<br><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_8.jpg" alt="png"></fancybox></p><p>一种搬好小板凳嗑着瓜子坐等的既视感</p><h2 id="2、大家都在说什么"><a href="#2、大家都在说什么" class="headerlink" title="2、大家都在说什么"></a>2、大家都在说什么</h2><p>词云生成的方法有很多<br>可以用代码生成<br>也可以用一些在线工具<br>这里我就使用了在线词云工具：wordart<br>后续可以给大家单独再普及一下<br>生成效果如下<br><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_9.jpg" alt="png"></fancybox></p><center><font  size = "1" color = "000000"  face = "楷体">词云</font></center><p>周杰伦、杰伦字眼很明显<br>还有大量跑来『打卡』的<br>『好听』、『来了』、『哭了』、『爱了』<br>其中少不了的还有『青春』<br>另外『阿信』的出现估计给了很多人惊喜</p><h2 id="3、大家都点赞了哪些评论"><a href="#3、大家都点赞了哪些评论" class="headerlink" title="3、大家都点赞了哪些评论"></a>3、大家都点赞了哪些评论</h2><p>我们以点赞数对评论进行了排序<br>排名靠前的评论是如下一些<br><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_10.jpg" alt="png"></fancybox></p><center><font  size = "1" color = "000000"  face = "楷体">评论排名</font></center><p>另外，QQ 音乐官方也会放出精彩评论<br><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_11.jpg" alt="png"></fancybox></p><center><font  size = "1" color = "000000"  face = "楷体">热心网友昀恺丶</font></center><p><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_12.jpg" alt="png"></fancybox></p><center><font  size = "1" color = "000000"  face = "楷体">凉城</font></center><p><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don'tcry/output_13.jpg" alt="png"></fancybox></p><center><font  size = "1" color = "000000"  face = "楷体">蜗牛..</font></center><p>对比下可以看出和我们获取到的数据是比较一致的<br>只不过官方并不是按点赞个数进行排名的<br>看得出来这些排名靠前的大都是在回忆青春<br>这些评论之所以能够得到大家的共鸣<br>也许他们的青春里都有一个周杰伦吧</p><h1 id="三、附件"><a href="#三、附件" class="headerlink" title="三、附件"></a>三、附件</h1><p><a href="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/img/don' target="_blank" rel="noopener"tcry/jav.csv">QQ音乐《说好不哭》评论抓取</a></p><h1 id="四、源码"><a href="#四、源码" class="headerlink" title="四、源码"></a>四、源码</h1><h2 id="1、评论爬取源码"><a href="#1、评论爬取源码" class="headerlink" title="1、评论爬取源码"></a>1、评论爬取源码</h2><pre><code>import requests,json,time,uuid,os,openpyxlimport refrom openpyxl.cell.cell import ILLEGAL_CHARACTERS_REinfo_list = []def get_comment_info():    global info_list    pagenum = 1    while(True):        print(pagenum)        url = &quot;https://c.y.qq.com/base/fcgi-bin/fcg_global_comment_h5.fcg&quot;        querystring = {&quot;biztype&quot;:&quot;1&quot;,&quot;topid&quot;:&quot;237773700&quot;,&quot;cmd&quot;:&quot;8&quot;,&quot;pagenum&quot;:pagenum,&quot;pagesize&quot;:&quot;25&quot;}        response = requests.request(&quot;GET&quot;, url, params=querystring)        resp = json.loads(response.text)        commentlist = resp.get(&#39;comment&#39;).get(&#39;commentlist&#39;)        if not commentlist or len(commentlist) == 0:            return        for comment in commentlist:            info = []            one_name = comment.get(&#39;nick&#39;)            # 将 UNIX 时间戳转化为普通时间格式            if comment.get(&#39;time&#39;) &lt; 1568735760:                return            time_local = time.localtime(comment.get(&#39;time&#39;))            one_time = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time_local)            one_praisenum = comment.get(&#39;praisenum&#39;)            one_comment = comment.get(&#39;rootcommentcontent&#39;)            ILLEGAL_CHARACTERS_RE.sub(r&#39;&#39;, one_comment)            ILLEGAL_CHARACTERS_RE.sub(r&#39;&#39;, one_name)            info = [one_name, one_time, one_praisenum, one_comment]            # print(info)            info_list.append(info)        pagenum += 1            # print(comment.get(&#39;nick&#39;))            # print(comment.get(&#39;rootcommentcontent&#39;))            # print(comment.get(&#39;time&#39;))            # print(comment.get(&#39;praisenum&#39;))def file_do(file_name):    # 获取文件大小    if not os.path.exists(file_name):        wb = openpyxl.Workbook()        page = wb.active        page.title = &#39;jay&#39;        page.append([&#39;昵称&#39;,&#39;时间&#39;,&#39;点赞数&#39;,&#39;评论&#39;])    else:        wb = openpyxl.load_workbook(file_name)        page = wb.active    for info in info_list:        try:            page.append(info)        except Exception:            print(info)            pass        continue    wb.save(filename=file_name)if __name__ == &quot;__main__&quot;:    file_name = str(uuid.uuid1()) + &#39;.xlsx&#39;    get_comment_info()    file_do(file_name)    print(&#39;data has saved in {}&#39;.format(file_name))</code></pre><h2 id="2、生成HTML图表源码"><a href="#2、生成HTML图表源码" class="headerlink" title="2、生成HTML图表源码"></a>2、生成HTML图表源码</h2><pre><code># 导入Style类，用于定义样式风格from pyecharts import Styleimport json# 导入Geo组件，用于生成柱状图from pyecharts import Bar# 导入Counter类，用于统计值出现的次数from collections import Counterimport fileinput,re# 设置全局主题风格from pyecharts import configureconfigure(global_theme=&#39;wonderland&#39;)# 数据可视化dates = []comment_text = &quot;&quot;def render():    global comment_text    with open(&#39;jay.csv&#39;, mode=&#39;r&#39;, encoding=&#39;utf-8&#39;) as f:        rows = f.readlines()        for row in rows[1:]:            if row.count(&#39;,&#39;) != 3:                continue            elements = row.split(&#39;,&#39;)            user = elements[0]            date = elements[1]            if &#39;2019&#39; not in date:                continue            like = elements[2]            comment = elements[3]            if &#39;2019-09-14&#39; in date:                dates.append(&#39;2019-09-14&#39;)            elif &#39;2019-09-15&#39; in date:                dates.append(&#39;2019-09-15&#39;)            elif &#39;2019-09-16 0&#39; in date or &#39;2019-09-16 1&#39; in date or &#39;2019-09-16 20&#39; in date or &#39;2019-09-16 21&#39; in date:                dates.append(&#39;2019-09-16 0-21&#39;)            elif &#39;2019-09-18&#39; in date:                continue            else:                dates.append(date)            comment_text += comment    with open(&quot;comment_text.txt&quot;,&quot;w&quot;, encoding=&#39;utf-8&#39;) as f:        f.write(comment_text)    date_data = Counter(dates).most_common()    # 按日期进行排序    date_data = sorted(date_data)    # print(data)    # 根据评分数据生成柱状图    bar = Bar(&#39;评价人数走势图&#39;, &#39;数据来源：QQ音乐网页版&#39;,              title_pos=&#39;center&#39;, width=800, height=600)    attr, value = bar.cast(date_data)    bar.add(&#39;&#39;, attr, value, is_visualmap=False, visual_range=[0, 3500], visual_text_color=&#39;#fff&#39;, is_more_utils=True,            xaxis_interval=0, xaxis_rotate=30,is_label_show=True,xaxis_label_textsize=8, label_text_size=8)    bar.render(        &#39;picture\评价人数走势图.html&#39;)render()</code></pre><p>最后，一起来听一下这首歌吧~</p><blockquote><p><a href="https://y.qq.com/n/yqq/song/001qvvgF38HVc4.html" target="_blank" rel="noopener">土豪通道</a><br><a href="https://cdn.jsdelivr.net/gh/InfiniteYinux/article@master/music/Jack-cry.mp3" target="_blank" rel="noopener">平民通道</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows(10)环境下搭建JSP开发环境</title>
      <link href="//post/Experience/jspEnvBulid/"/>
      <url>//post/Experience/jspEnvBulid/</url>
      
        <content type="html"><![CDATA[<p>JSP是Java Server Page的缩写，是由Sun Microsystems公司主导创建的一种动态网页技术标准。JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成HTML、XML或其他格式文档的Web网页，然后返回给请求者。JSP技术以Java语言作为脚本语言，为用户的HTTP请求提供服务，并能与服务器上的其它Java程序共同处理复杂的业务需求。目前，JSP已经成为开发动态网站的主流技术。</p><a id="more"></a><h1 id="安装配置JSP运行环境"><a href="#安装配置JSP运行环境" class="headerlink" title="安装配置JSP运行环境"></a>安装配置JSP运行环境</h1><h2 id="一、-安装配置JDK"><a href="#一、-安装配置JDK" class="headerlink" title="一、  安装配置JDK"></a>一、  安装配置JDK</h2><p>进入<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">JDK官网</a>选择Java SE Development Kit 8u172，根据自己的电脑选择32位或者64位进行下载。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_1.png" alt="image.png"><br>具体配置教程参考<a href="https://blog.csdn.net/qq_41436122/article/details/82620080?utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">《java环境变量 的配置与详解（全网最详细教程）》</a></p><h2 id="二、-安装配置Tomcat"><a href="#二、-安装配置Tomcat" class="headerlink" title="二、  安装配置Tomcat"></a>二、  安装配置Tomcat</h2><p>1、进入<a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noopener">Tomcat官网</a>安装下载,点击“32-bit/64-bit Windows Service Installer (pgp, sha512)”。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_29.png" alt="image.png"><br>2、下载完毕后，就可以在需要编译和运行Java程序的计算机安装Tomcat服务器，具体步骤如下：<br>（1）   双击“apache-tomcat-9.0.24.exe”文件开始安装。在弹出的安装向导对话框中，单击“Next”按钮，将弹出如下图所示的“许可协议”对话框。<img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_2.png" alt="image.png"><br>一直next就行</p><p>（2）   这里采用默认的组件安装，如果不懂就按默认的设置。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_3.png" alt="image.png"></p><p>（3）   这里是Tomcat默认的端口号，不喜欢这个可以自己设置成别的，但是千万别与系统端口号重复！<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_4.png" alt="image.png"><br>（4）接下来就一直next就行，路径默认就行。</p><h2 id="三、-Tomcat环境变量Catalina-Home配置"><a href="#三、-Tomcat环境变量Catalina-Home配置" class="headerlink" title="三、 Tomcat环境变量Catalina_Home配置"></a>三、 Tomcat环境变量Catalina_Home配置</h2><p>1、CATALINA_HOME是TOMCAT安装路径的别名，目的是为了方便使用TOMCAT</p><p>2、计算机&gt;属性&gt;环境变量, 新建环境变量。变量名为CATALINA_HOME ,变量值tomcat的解压目录，我电脑上的为：“D:\Function\Apache Software Foundation\Tomcat 9.0”，注意后面不用多加“\”或者“;”<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_5.png" alt="image.png"></p><p>3、在环境变量Path中，新增加“%CATALINA_HOME%\bin\”<br>4、打开你放置刚才下载的Tomcat的bin目录，找到“startup.bat”文件双击，然后就会弹出一个DOS窗口显示Tomcat启动的进程状态。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_6.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_7.png" alt="image.png"></p><p>5、测试Tomcat是否配置成功：打开浏览器，输入在地址栏中输入：<a href="http://localhost:8080" target="_blank" rel="noopener">localhost:8080</a>运行结果如下图所示即为配置成功！（因为Tomcat已经在运行再次打开会报错）<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_8.png" alt="image.png"><br>6、关闭tomcat:进入命令行cmd，输入shutdown.bat</p><h2 id="四、Eclipse的安装配置"><a href="#四、Eclipse的安装配置" class="headerlink" title="四、Eclipse的安装配置"></a>四、Eclipse的安装配置</h2><p>1、进入<a href="https://www.eclipse.org/" target="_blank" rel="noopener">eclipse官网</a>下载eclipse-inst-win64.exe<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_9.png" alt="image.png"></p><p>根据自己的系统版本选择镜像下载<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_10.png" alt="image.png"><br>选择国内镜像下载</p><p>2、运行eclipse-inst-win64.exe<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_11.png" alt="image.png"></p><p>选择第一个<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_12.png" alt="image.png"><br>选择Java目录和eclipse安装目录，然后点击install</p><p>3、安装完成后打开eclipse<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_13.png" alt="image.png"><br>如果新建项目中没有Web选项，这时候就需要我们自己去添加web插件</p><p>4、添加Web插件：依次点击【Help】-&gt;【Install New Software】，在【work with】下拉框中选择自己的eclipse版本<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_14.png" alt="image.png"><br>在下面的下拉框中勾选 Web, XML, Java EE and OSGi Enterprise Development；</p><p>然后点击next，耐心等待下载<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_15.png" alt="image.png"><br>在这一步的时候点击同意，然后点击finish</p><p>安装这几个插件，耐心等待……..安装完成之后，会自动弹出对话框让你重启eclipse，重启下就行，此时，就可以新建web项目了<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_16.png" alt="image.png"></p><h2 id="五、新建jsp文件"><a href="#五、新建jsp文件" class="headerlink" title="五、新建jsp文件"></a>五、新建jsp文件</h2><p>1、新建jsp文件：依次点击【File】-&gt;【New】-&gt;【Project】；在弹出的列表中点击Web，选择 【Dynamic Web Project】<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_17.png" alt="image.png"></p><p>然后点击【Next】输入项目名，然后点击【Finish】<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_18.png" alt="image.png"></p><p>然后打开创建的项目，选择【WebContent】右键新建【JSP File】<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_19.png" alt="image.png"></p><p>新建的文件报错<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_20.png" alt="image.png"></p><p>接下来添加Tomcat：点击【Server】，再点击蓝色字体，在弹出的列表框中点击【Apache】，选择你安装的Tomcat，这里我安装的是【Tomcat v9.0.24】，然后点击next<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_23.png" alt="image.png"></p><p>右键点击项目—&gt;【Build Path】—&gt;【Configure Build Path】<br>点击【libraries】-&gt;【Add Library】-&gt;【Server Runtime】-&gt;【Next】-&gt;【Finish】-&gt;【Apply and Close】<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_21.png" alt="image.png"></p><p>接下来更改编码：导航栏点击【Windows】-&gt;【Preference】-&gt;【JSP File】 Encoding选择“UTF-8”，然后点击应用并关闭<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_22.png" alt="image.png"></p><p>在这里需要选择安装的Tomcat的文件路径，填好后点击Next<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_24.png" alt="image.png"></p><p>点击创建的项目名即可添加到配置中，然后点击Finish<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_25.png" alt="image.png"></p><p>接下来就可以创建一个简单的JSP实例来测试拉；<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_26.png" alt="image.png"></p><pre><code>&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; contentType=&quot;text/html; charset=UTF-8&quot;%&gt;&lt;%String path = request.getContextPath();String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;%&gt;&lt;%    //计算1-100之间的和,并输出 到客户端浏览器中     int sum=0;    for(int i=1;i&lt;=100;i++)        sum+=i;    out.print(&quot;1-100的和为：&quot;+sum+&quot;\n&quot;); %&gt;&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;&lt;html&gt;  &lt;head&gt;    &lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt;    &lt;title&gt;My JSP &#39;GreetingJsp.jsp&#39; starting page&lt;/title&gt;    &lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;    &lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;    &lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;        &lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&gt;    &lt;meta http-equiv=&quot;description&quot; content=&quot;This is my page&quot;&gt;    &lt;!--    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;    --&gt;  &lt;/head&gt;  &lt;body&gt;        &lt;br&gt;这是我的第一个JSP页面 &lt;br&gt;    &lt;table&gt;        &lt;tr&gt;             &lt;td&gt;7&lt;/td&gt;             &lt;td&gt;8&lt;/td&gt;             &lt;td&gt;9&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;             &lt;td&gt;4&lt;/td&gt;             &lt;td&gt;5&lt;/td&gt;             &lt;td&gt;6&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;             &lt;td&gt;1&lt;/td&gt;             &lt;td&gt;2&lt;/td&gt;             &lt;td&gt;3&lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p>右键【Run As】-&gt;【Run on Server】<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_27.png" alt="image.png"><br>运行成功！一个简单的JSP页面就生成啦</p><p>复制蓝色背景内的链接，打开浏览器即可预览啦<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/jspone/output_28.png" alt="image.png"><br><br></p>]]></content>
      
      
      <categories>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib - Pyplot 教程</title>
      <link href="//post/Experience/matplotlib-2/"/>
      <url>//post/Experience/matplotlib-2/</url>
      
        <content type="html"><![CDATA[<p>提供类似MATLAB的绘图框架。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibPyplot/fengmian.png" alt="png"></p><a id="more"></a><h1 id="Pyplot-教程"><a href="#Pyplot-教程" class="headerlink" title="Pyplot 教程"></a>Pyplot 教程</h1><p>关于pylot接口的介绍。</p><h2 id="pyplot-简介"><a href="#pyplot-简介" class="headerlink" title="pyplot 简介"></a>pyplot 简介</h2><p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">matplotlib.pyplot</a> 是命令样式函数的集合，使matplotlib像MATLAB一样工作。 每个pyplot函数对图形进行一些更改：例如，创建图形，在图形中创建绘图区域，在绘图区域中绘制一些线条，用标签装饰图形等。</p><p>在<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">matplotlib.pyplot</a>中，各种状态在函数调用中保留，以便跟踪当前图形和绘图区域等内容，并且绘图函数指向当前轴（请注意“轴”在此处以及在大多数位置 文档是指<a href="https://matplotlib.org/tutorials/introductory/usage.html#figure-parts" target="_blank" rel="noopener">图形的轴部分</a>，而不是多个轴的严格数学术语。</p><p>注意: pyplot API通常不如面向对象的API灵活。您在此处看到的大多数函数调用也可以作为Axes对象中的方法调用。 我们建议您浏览教程和示例以了解其工作原理。</p><p>使用pyplot生成可视化非常快速：</p><pre><code class="python">import matplotlib.pyplot as pltplt.plot([1, 2, 3, 4])plt.ylabel(&#39;some numbers&#39;)plt.show()</code></pre><pre><code>&lt;Figure size 640x480 with 1 Axes&gt;</code></pre><p>您可能想知道为什么x轴的范围是0-3，y轴的范围是1-4。如果为<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot" target="_blank" rel="noopener">plot()</a>命令提供单个列表或数组，则matplotlib假定它是一系列y值，并自动为您生成x值。由于python范围以0开头，因此默认的x向量与y具有相同的长度，但从0开始。因此x数据为 [0,1,2,3]。</p><pre><code class="python">plt.plot([1, 2, 3, 4], [1, 4, 9, 16])</code></pre><pre><code>[&lt;matplotlib.lines.Line2D at 0x1de069a2a20&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibPyplot/output_3_1.png" alt="png"></p><h2 id="格式化绘图的样式"><a href="#格式化绘图的样式" class="headerlink" title="格式化绘图的样式"></a>格式化绘图的样式</h2><p>对于每对x，y对的参数，有一个可选的第三个参数，它是指示绘图的颜色和线型的格式字符串。格式字符串的字母和符号来自MATLAB，您可以将颜色字符串与线型字符串连接起来。默认格式字符串为“b-”，为蓝色实线。例如，要用红色圆圈绘制上述内容，您将发出：</p><pre><code class="python">#plt.plot(x,y,format_string,**kwargs) #x轴数据，y轴数据，format_string控制曲线的格式字串 #format_string 由颜色字符，风格字符，和标记字符 plt.plot([1, 2, 3, 4], [1, 4, 9, 16], &#39;ro&#39;)plt.axis([0, 6, 0, 20])plt.show()</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibPyplot/output_5_0.png" alt="png"></p><p>有关线型和格式字符串的完整列表，请参阅 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot" target="_blank" rel="noopener">plot()</a> 文档。 上例中的 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.axis.html#matplotlib.pyplot.axis" target="_blank" rel="noopener">axis()</a> 命令采用 [xmin, xmax, ymin, ymax] 列表并指定轴的视口。</p><p>如果matplotlib仅限于使用列表，那么数字处理将毫无用处。通常，您将使用numpy数组。实际上，所有序列都在内部转换为numpy数组。 下面的示例说明了使用数组在一个命令中绘制具有不同格式样式的多行。</p><pre><code class="python">import numpy as np# 每隔200ms均匀采样一次t = np.arange(0., 5., 0.2)# 红色的破折号，蓝色的正方形和绿色的三角形plt.plot(t, t, &#39;r--&#39;, t, t**2, &#39;bs&#39;, t, t**3, &#39;g^&#39;)plt.show()</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibPyplot/output_7_0.png" alt="png"></p><h2 id="使用关键字字符串绘图"><a href="#使用关键字字符串绘图" class="headerlink" title="使用关键字字符串绘图"></a>使用关键字字符串绘图</h2><p>在某些情况下，您可以使用允许您使用字符串访问特定变量的格式的数据。例如，使用 <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.recarray.html#numpy.recarray" target="_blank" rel="noopener">numpy.recarray</a> 或<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html#pandas.DataFrame" target="_blank" rel="noopener">pandas.DataFrame</a>。</p><p>Matplotlib允许您使用data关键字参数提供此类对象。如果提供，那么您可以生成包含与这些变量对应的字符串的图。</p><pre><code>matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, *, data=None, **kwargs)</code></pre><p>x，y：表示的是大小为(n,)的数组，也就是我们即将绘制散点图的数据点<br>s:是一个实数或者是一个数组大小为(n,)，这个是一个可选的参数。<br>c:表示的是颜色，也是一个可选项。默认是蓝色’b’,表示的是标记的颜色，或者可以是一个表示颜色的字符，或者是一个长度为n的表示颜色的序列等等，感觉还没用到过现在不解释了。但是c不可以是一个单独的RGB数字，也不可以是一个RGBA的序列。可以是他们的2维数组（只有一行）。<br>marker:表示的是标记的样式，默认的是’o’。<br>cmap:Colormap实体或者是一个colormap的名字，cmap仅仅当c是一个浮点数数组的时候才使用。如果没有申明就是image.cmap<br>norm:Normalize实体来将数据亮度转化到0-1之间，也是只有c是一个浮点数的数组的时候才使用。如果没有申明，就是默认为colors.Normalize。<br>vmin,vmax:实数，当norm存在的时候忽略。用来进行亮度数据的归一化。<br>alpha：实数，0-1之间。<br>linewidths:也就是标记点的长度。    </p><pre><code class="python">data = {&#39;a&#39;: np.arange(50),        &#39;c&#39;: np.random.randint(0, 50, 50),        &#39;d&#39;: np.random.randn(50)}data[&#39;b&#39;] = data[&#39;a&#39;] + 10 * np.random.randn(50)data[&#39;d&#39;] = np.abs(data[&#39;d&#39;]) * 100plt.scatter(&#39;a&#39;, &#39;b&#39;, c=&#39;c&#39;, s=&#39;d&#39;, data=data)plt.xlabel(&#39;entry a&#39;)plt.ylabel(&#39;entry b&#39;)plt.show()</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibPyplot/output_10_0.png" alt="png"></p><pre><code class="python">data = {&#39;a&#39;: np.arange(50),        &#39;c&#39;: np.random.randint(0, 50, 50),        &#39;d&#39;: np.random.randn(50)}print(data)data[&#39;b&#39;] = data[&#39;a&#39;] + 10 * np.random.randn(50)data[&#39;d&#39;] = np.abs(data[&#39;d&#39;]) * 100print(data)</code></pre><pre><code>{&#39;a&#39;: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), &#39;c&#39;: array([47,  5, 29, 21, 15, 12, 29, 23, 10, 25, 26, 45, 32, 30, 37, 27, 43,        9, 26, 45, 48, 14, 23, 30, 22,  0,  5, 47, 21, 26, 35,  7,  2, 19,       24, 41, 26,  9, 20, 16, 15, 29, 23,  4, 21, 12, 23, 30, 41, 19]), &#39;d&#39;: array([ 0.91474741,  1.4102975 , -0.09708013, -1.47629846, -1.57769092,       -0.46290149,  1.23430367,  0.38467709, -0.01272562, -1.44240598,       -0.21927709, -0.30498565, -0.11862153, -1.24972745, -1.32424128,       -1.5610827 ,  1.26963903,  0.62084676, -1.0549506 ,  0.37044246,       -0.39299613,  0.42897231, -0.33461671, -0.86706857, -0.76486767,       -1.3074562 , -0.33973554, -1.08680383,  0.27878669,  1.0599157 ,       -0.38176051,  0.79680669, -0.6874751 ,  1.38240815, -0.1344723 ,        0.7627456 ,  0.36115735,  0.83799247,  0.02523584,  0.81839594,       -0.77025921, -0.06682006,  0.06934268,  0.36251595, -0.99875799,        1.23386736, -0.32016664,  0.45225071,  0.55994446,  0.47643056])}{&#39;a&#39;: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), &#39;c&#39;: array([47,  5, 29, 21, 15, 12, 29, 23, 10, 25, 26, 45, 32, 30, 37, 27, 43,        9, 26, 45, 48, 14, 23, 30, 22,  0,  5, 47, 21, 26, 35,  7,  2, 19,       24, 41, 26,  9, 20, 16, 15, 29, 23,  4, 21, 12, 23, 30, 41, 19]), &#39;d&#39;: array([ 91.4747409 , 141.02975036,   9.70801323, 147.6298458 ,       157.76909222,  46.29014854, 123.43036704,  38.46770907,         1.27256168, 144.24059782,  21.92770893,  30.49856537,        11.86215303, 124.972745  , 132.42412769, 156.10827022,       126.96390267,  62.0846764 , 105.49506   ,  37.0442464 ,        39.29961326,  42.89723069,  33.46167088,  86.70685708,        76.48676738, 130.74561997,  33.97355351, 108.68038257,        27.87866927, 105.9915699 ,  38.17605117,  79.68066907,        68.74750955, 138.2408153 ,  13.44723023,  76.27455996,        36.1157352 ,  83.79924741,   2.52358383,  81.83959391,        77.02592105,   6.68200567,   6.93426756,  36.25159505,        99.87579944, 123.38673588,  32.01666378,  45.22507109,        55.99444581,  47.6430561 ]), &#39;b&#39;: array([  4.62276015,   7.74528096,  -4.77823695, -11.7847356 ,        18.05816585,  -8.1731315 ,   4.98414606,  18.1539417 ,        11.06732176,  15.32465307,   5.923213  ,   6.77520583,        -8.72986134,  19.414693  ,  22.05933889,  10.92443259,        16.1005237 ,  28.55305548,   7.16710341,  19.82975597,        35.25631478,  13.32137703,   9.26598849,  14.25528353,        17.70779422,  18.62234998,  41.83152657,  26.02409203,        23.25997035,  20.38161932,   2.84095495,  36.00225335,        46.69340509,  22.75167791,  34.33249818,  25.09595488,        41.37140253,  16.54690243,  32.4532621 ,  31.12442736,        40.99257063,  49.49197597,  55.91868808,  55.13338215,        33.1365961 ,  48.95821962,  25.50538193,  58.72572039,        49.63841177,  41.7925894 ])}</code></pre><h2 id="用分类变量绘图"><a href="#用分类变量绘图" class="headerlink" title="用分类变量绘图"></a>用分类变量绘图</h2><p>也可以使用分类变量创建绘图。Matplotlib允许您将分类变量直接传递给许多绘图函数。例如：</p><pre><code class="python">names = [&#39;group_a&#39;, &#39;group_b&#39;, &#39;group_c&#39;]values = [1, 10, 100]# 表示figure 的大小为宽、长（单位为inch）plt.figure(1, figsize=(18, 6))# plt.subplot(ABC)表示第A行,B图形的总数量，C第几个图形plt.subplot(131)# 直方图plt.bar(names, values)plt.subplot(132)#散点图plt.scatter(names, values)plt.subplot(133)#折线图plt.plot(names, values)plt.suptitle(&#39;Categorical Plotting&#39;)plt.show()</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibPyplot/output_13_0.png" alt="png"></p><h2 id="控制线的属性"><a href="#控制线的属性" class="headerlink" title="控制线的属性"></a>控制线的属性</h2><p>线可以设置许多属性：linewidth，dash style，antialiased等; 请参阅 <a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D" target="_blank" rel="noopener">matplotlib.lines.Line2D</a>。 有几种方法可以设置线属性。</p><p>使用关键字args：</p><pre><code>plt.plot(x, y, linewidth=2.0)</code></pre><p>使用Line2D实例的setter方法。 plot返回Line2D对象列表; 例如，line1，line2 = plot（x1，y1，x2，y2）。 在下面的代码中，我们假设我们只有一行，因此返回的列表的长度为1.我们使用tuple解压缩为line，以获取该列表的第一个元素：</p><pre><code>line, = plt.plot(x, y, &#39;-&#39;)line.set_antialiased(False) # turn off antialising</code></pre><p>使用 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.setp.html#matplotlib.pyplot.setp" target="_blank" rel="noopener">setp()</a> 命令。 下面的示例使用MATLAB样式命令在行列表上设置多个属性。setp透明地使用对象列表或单个对象。您可以使用python关键字参数或MATLAB样式的字符串/值对：</p><pre><code>lines = plt.plot(x1, y1, x2, y2)# use keyword argsplt.setp(lines, color=&#39;r&#39;, linewidth=2.0)# or MATLAB style string value pairsplt.setp(lines, &#39;color&#39;, &#39;r&#39;, &#39;linewidth&#39;, 2.0)</code></pre><p>以下是可用的<a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D" target="_blank" rel="noopener">Line2D</a>属性。</p><table align="center">    <thead>        <tr>            <th>属性</th>            <th>值类型</th>        </tr>    </thead>    <tbody>        <tr>            <th>alpha</th>            <th>float</th>        </tr>        <tr>            <th>animated</th>            <th>[True | False]</th>        </tr>        <tr>            <th>antialiased 或 aa</th>            <th>[True | False]</th>        </tr>        <tr>            <th>clip_box</th>            <th>matplotlib.transform.Bbox实例</th>        </tr>        <tr>            <th>clip_on</th>            <th>[True | False]</th>        </tr>        <tr>            <th>clip_path</th>            <th>路径实例和变换实例(修补程序)</th>        </tr>        <tr>            <th>color 或 c</th>            <th>任何Matplotlib颜色</th>        </tr>        <tr>            <th>contains</th>            <th>the hit testing function</th>        </tr>        <tr>            <th>dash_capstyle</th>            <th>['butt' | 'round' | 'projecting']</th>        </tr>        <tr>            <th>dash_joinstyle</th>            <th>['miter' | 'round' | 'bevel']</th>        </tr>        <tr>            <th>dashes</th>            <th>以点为单位的开/关油墨顺序</th>        </tr>        <tr>            <th>data</th>            <th>(np.array xdata, np.array ydata)</th>        </tr>        <tr>            <th>figure</th>            <th>matplotlib.quire.Figure实例</th>        </tr>        <tr>            <th>label</th>            <th>任何字符串</th>        </tr>        <tr>            <th>linestyle or ls</th>            <th>[ '-' | '--' | '-.' | ':' | 'steps' | ...]</th>        </tr>        <tr>            <th>linewidth or lw</th>            <th>浮点值</th>        </tr>        <tr>            <th>lod</th>            <th>[True | False]</th>        </tr>        <tr>            <th>marker</th>            <th>[ '+' | ',' | '.' | '1' | '2' | '3' | '4' ]</th>        </tr>        <tr>            <th>markeredgecolor or mec</th>            <th>任何Matplotlib颜色</th>        </tr>        <tr>            <th>markeredgewidth or mew</th>            <th>浮点值</th>        </tr>        <tr>            <th>markerfacecolor or mfc</th>            <th>任何Matplotlib颜色</th>        </tr>        <tr>            <th>markersize or ms</th>            <th>浮点数</th>        </tr>        <tr>            <th>markevery</th>            <th>[ None | integer | (startind, stride) ]</th>        </tr>        <tr>            <th>picker</th>            <th>用于交互式选线</th>        </tr>        <tr>            <th>pickradius</th>            <th>线拾取选择半径</th>        </tr>        <tr>            <th>solid_capstyle</th>            <th>['butt' | 'round' | 'projecting']</th>        </tr>        <tr>            <th>solid_joinstyle</th>            <th>['miter' | 'round' | 'bevel']</th>        </tr>        <tr>            <th>transform</th>            <th>matplotlib.transforms.Transform实例</th>        </tr>        <tr>            <th>visible</th>            <th>[True | False]</th>        </tr>        <tr>            <th>xdata</th>            <th>np.array</th>        </tr>        <tr>            <th>ydata</th>            <th>np.array</th>        </tr>        <tr>            <th>zorder</th>            <th>任意数字</th>        </tr>    </tbody></table><p>若要获取可设置行属性的列表，请使用一行或多行作为参数调用<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.setp.html#matplotlib.pyplot.setp" target="_blank" rel="noopener">setp()</a> 函数。</p><h2 id="使用多个图形和轴"><a href="#使用多个图形和轴" class="headerlink" title="使用多个图形和轴"></a>使用多个图形和轴</h2><p>MATLAB和<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">pyplot</a>，都有当前图形和当前轴的概念。所有打印命令都适用于当前轴。函数gca() 返回当前轴(<a href="https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes" target="_blank" rel="noopener">matplotlib.axes.Axes</a>实例)，<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.gcf.html#matplotlib.pyplot.gcf" target="_blank" rel="noopener">gcf()</a> 返回当前地物(<a href="https://matplotlib.org/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure" target="_blank" rel="noopener">matplotlib.figure.Figure</a>实例)。通常情况下，你不必担心这一点，因为这一切都是在幕后处理的。下面是创建两个子图的脚本。</p><pre><code class="python">def f(t):    return np.exp(-t) * np.cos(2*np.pi*t)t1 = np.arange(0.0, 5.0, 0.1)t2 = np.arange(0.0, 5.0, 0.02)plt.figure(1)plt.subplot(211)plt.plot(t1, f(t1), &#39;bo&#39;, t2, f(t2), &#39;k&#39;)plt.subplot(212)plt.plot(t2, np.cos(2*np.pi*t2), &#39;r--&#39;)plt.show()</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibPyplot/output_16_0.png" alt="png"></p><p>这里的 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.figure.html#matplotlib.pyplot.figure" target="_blank" rel="noopener">figure()</a> 命令是可选的，因为默认情况下将创建 figure(1)，就像默认情况下创建 subplot(111) 一样，如果不手动指定任何轴。<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplot.html#matplotlib.pyplot.subplot" target="_blank" rel="noopener">subplot()</a>命令指定numrows, numcols, plot_number，其中 plot_number 的范围 从1到numrows*numcols。如果 numrows * numcols &lt;10，则subplot命令中的逗号是可选的。因此 subplot(211) 与 subplot(2, 1, 1) 相同。</p><p>您可以创建任意数量的子图和轴。如果要手动放置轴，即不在矩形网格上，请使用 axes() 命令，该命令允许您将位置指定为axes([left，bottom，width，height])，其中所有值均为小数（0到1）坐标。有关手动放置轴的示例，请参阅<a href="https://matplotlib.org/gallery/subplots_axes_and_figures/axes_demo.html" target="_blank" rel="noopener">Axes Demo</a>;有关具有大量子图的示例，请参阅 <a href="https://matplotlib.org/gallery/subplots_axes_and_figures/subplot_demo.html" target="_blank" rel="noopener">Basic Subplot Demo</a>。</p><p>您可以使用具有增加的图号的多个<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.figure.html#matplotlib.pyplot.figure" target="_blank" rel="noopener">figure()</a> 调用来创建多个数字。当然，每个图形可以包含您心中所需的轴和子图：</p><pre><code class="python">import matplotlib.pyplot as pltplt.figure(1)                # the first figureplt.subplot(211)             # the first subplot in the first figureplt.plot([1, 2, 3])plt.subplot(212)             # the second subplot in the first figureplt.plot([4, 5, 6])plt.figure(2)                # a second figureplt.plot([4, 5, 6])          # creates a subplot(111) by defaultplt.figure(1)                # figure 1 current; subplot(212) still currentplt.subplot(211)             # make subplot(211) in figure1 currentplt.title(&#39;Easy as 1, 2, 3&#39;) # subplot 211 title</code></pre><pre><code>Text(0.5, 1.0, &#39;Easy as 1, 2, 3&#39;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibPyplot/output_18_1.png" alt="png"></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibPyplot/output_18_2.png" alt="png"></p><p>您可以使用 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.clf.html#matplotlib.pyplot.clf" target="_blank" rel="noopener">clf()</a> 清除当前图形，使用 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.cla.html#matplotlib.pyplot.cla" target="_blank" rel="noopener">cla()</a> 清除当前轴。如果您发现在幕后为您维护状态（特别是当前图像，图形和轴）很烦人，请不要绝望：这只是围绕面向对象API的瘦状态包装器，您可以使用它（见<a href="https://matplotlib.org/tutorials/intermediate/artists.html" target="_blank" rel="noopener">Artist tutorial</a>）</p><p>如果你要制作大量的图像，你还需要注意一件事：在用 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.close.html#matplotlib.pyplot.close" target="_blank" rel="noopener">close()</a> 显式关闭数字之前，数字所需的内存不会完全释放。删除对图的所有引用，和/或使用窗口管理器来杀死屏幕上出现图形的窗口是不够的，因为pyplot会保持内部引用，直到调用close()。</p><h2 id="使用文本"><a href="#使用文本" class="headerlink" title="使用文本"></a>使用文本</h2><p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.text.html#matplotlib.pyplot.text" target="_blank" rel="noopener">text()</a> 命令可用于在任意位置添加文本，而<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.xlabel.html#matplotlib.pyplot.xlabel" target="_blank" rel="noopener">xlabel()</a>, <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.ylabel.html#matplotlib.pyplot.ylabel" target="_blank" rel="noopener">ylabel()</a> 和 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.title.html#matplotlib.pyplot.title" target="_blank" rel="noopener">title()</a> 用于在指定位置添加文本(有关更详细的示例，请参见Matplotlib图中的文本)</p><pre><code class="python">mu, sigma = 100, 15x = mu + sigma * np.random.randn(10000)# the histogram of the datan, bins, patches = plt.hist(x, 50, density=1, facecolor=&#39;g&#39;, alpha=0.75)plt.xlabel(&#39;Smarts&#39;)plt.ylabel(&#39;Probability&#39;)plt.title(&#39;Histogram of IQ&#39;)plt.text(60, .025, r&#39;$\mu=100,\ \sigma=15$&#39;)plt.axis([40, 160, 0, 0.03])plt.grid(True)plt.show()</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibPyplot/output_20_0.png" alt="png"></p><p>所有<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.text.html#matplotlib.pyplot.text" target="_blank" rel="noopener">text()</a> 命令都返回一个<a href="https://matplotlib.org/api/text_api.html#matplotlib.text.Text" target="_blank" rel="noopener">matplotlib.text.Text</a>实例。与上面的行一样，您可以通过将关键字参数传递给文本函数或使用<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.setp.html#matplotlib.pyplot.setp" target="_blank" rel="noopener">setp()</a>来自定义属性：</p><pre><code>t = plt.xlabel(&#39;my data&#39;, fontsize=14, color=&#39;red&#39;)</code></pre><p><a href="https://matplotlib.org/tutorials/text/text_props.html" target="_blank" rel="noopener">文本属性和布局</a>中更详细地介绍了这些属性。</p><h3 id="在文本中使用数学表达式"><a href="#在文本中使用数学表达式" class="headerlink" title="在文本中使用数学表达式"></a>在文本中使用数学表达式</h3><p>matplotlib在任何文本表达式中接受TeX方程表达式。 例如，要在标题中写入表达式σi= 15，您可以编写由美元符号包围的TeX表达式：</p><pre><code>plt.title(r&#39;$\sigma_i=15$&#39;)</code></pre><p>标题字符串前面的r很重要 - 它表示该字符串是一个原始字符串，而不是将反斜杠视为python转义。matplotlib有一个内置的TeX表达式解析器和布局引擎，并提供自己的数学字体 - 有关详细信息，请参阅编写<a href="https://matplotlib.org/tutorials/text/mathtext.html" target="_blank" rel="noopener">数学表达式</a>。因此，您可以跨平台使用数学文本，而无需安装TeX。 对于安装了LaTeX和dvipng的用户，您还可以使用LaTeX格式化文本并将输出直接合并到显示图或保存的postscript中 - 请参阅使用<a href="https://matplotlib.org/tutorials/text/usetex.html" target="_blank" rel="noopener">LaTeX</a>进行文本渲染。</p><h2 id="注释文本"><a href="#注释文本" class="headerlink" title="注释文本"></a>注释文本</h2><p>上面的基本<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.text.html#matplotlib.pyplot.text" target="_blank" rel="noopener">text()</a> 命令的使用将文本放在Axes上的任意位置。文本的常见用途是注释绘图的某些功能，而<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.text.html#matplotlib.pyplot.text" target="_blank" rel="noopener">annotate()</a>方法提供帮助功能以使注释变得容易。在注释中，有两点需要考虑：由参数xy表示的注释位置和文本xytext的位置。 这两个参数都是（x，y）元组。</p><pre><code class="python">ax = plt.subplot(111)t = np.arange(0.0, 5.0, 0.01)s = np.cos(2*np.pi*t)line, = plt.plot(t, s, lw=2)plt.annotate(&#39;local max&#39;, xy=(2, 1), xytext=(3, 1.5),             arrowprops=dict(facecolor=&#39;red&#39;, shrink=0.05),             )plt.ylim(-2, 2)plt.show()</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibPyplot/output_22_0.png" alt="png"></p><p>在此基本示例中，xy（箭头提示）和xytext位置（文本位置）都在数据坐标中。 可以选择各种其他坐标系 - 有关详细信息，请参阅<a href="https://matplotlib.org/tutorials/text/annotations.html#annotations-tutorial" target="_blank" rel="noopener">基本注释</a>和<a href="https://matplotlib.org/tutorials/text/annotations.html#plotting-guide-annotation" target="_blank" rel="noopener">高级注释</a>。更多示例可以在<a href="https://matplotlib.org/gallery/text_labels_and_annotations/annotation_demo.html" target="_blank" rel="noopener">Annotating Plots</a>中找到。</p><h2 id="对数和其他非线性轴"><a href="#对数和其他非线性轴" class="headerlink" title="对数和其他非线性轴"></a>对数和其他非线性轴</h2><p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">matplotlib.pyplot</a> 不仅支持线性轴刻度，还支持对数和logit刻度。 如果数据跨越许多数量级，则通常使用此方法。 更改轴的比例很容易：</p><pre><code>plt.xscale(&#39;log&#39;)</code></pre><p>下面显示了具有相同数据和y轴不同比例的四个图的示例。</p><pre><code class="python">from matplotlib.ticker import NullFormatter  # useful for `logit` scale# Fixing random state for reproducibilitynp.random.seed(19680801)# make up some data in the interval ]0, 1[y = np.random.normal(loc=0.5, scale=0.4, size=1000)y = y[(y &gt; 0) &amp; (y &lt; 1)]y.sort()x = np.arange(len(y))# plot with various axes scalesplt.figure(1)# linearplt.subplot(221)plt.plot(x, y)plt.yscale(&#39;linear&#39;)plt.title(&#39;linear&#39;)plt.grid(True)# logplt.subplot(222)plt.plot(x, y)plt.yscale(&#39;log&#39;)plt.title(&#39;log&#39;)plt.grid(True)# 对称 logplt.subplot(223)plt.plot(x, y - y.mean())plt.yscale(&#39;symlog&#39;, linthreshy=0.01)plt.title(&#39;symlog&#39;)plt.grid(True)# logitplt.subplot(224)plt.plot(x, y)plt.yscale(&#39;logit&#39;)plt.title(&#39;logit&#39;)plt.grid(True)# 使用“NullFormatter”将y轴上的小标记标签格式化为空字符串，以避免轴上有太多标签。plt.gca().yaxis.set_minor_formatter(NullFormatter())# 调整subplot布局，因为logit 1可能比平常占用更多的空间，这是由于像“1 - 10^{-3}”这样的y-tick标签造成的。plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25,                    wspace=0.35)plt.show()</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibPyplot/output_24_0.png" alt="png"></p><p>您也可以添加自己的比例，有关详细信息，请参阅<a href="https://matplotlib.org/devel/add_new_projection.html#adding-new-scales" target="_blank" rel="noopener">开发人员指南</a>以创建比例和转换。</p><pre><code class="python"></code></pre>]]></content>
      
      
      <categories>
          
          <category> 可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python可视化 </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib - matplotlib 教程</title>
      <link href="//post/Experience/matplotlib-1/"/>
      <url>//post/Experience/matplotlib-1/</url>
      
        <content type="html"><![CDATA[<p>Matplotlib 是 Python 的绘图库。 它可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/fengmian.png" alt="png"></p><a id="more"></a><h1 id="Pyplot-教程"><a href="#Pyplot-教程" class="headerlink" title="Pyplot 教程"></a>Pyplot 教程</h1><p>关于pylot接口的介绍。</p><h1 id="matplotlib-教程"><a href="#matplotlib-教程" class="headerlink" title="matplotlib 教程"></a>matplotlib 教程</h1><p>这个图库包含了使用Matplotlib可以做的许多事情的示例。可以点击任何图像，以查看完整的图像和源代码。</p><p>有关更短的示例，请参见<a href="https://matplotlib.org/gallery/index.html" target="_blank" rel="noopener">示例页</a>。你还可以在我们的<a href="https://matplotlib.org/contents.html" target="_blank" rel="noopener">用户指南</a>中找到<a href="https://matplotlib.org/resources/index.html" target="_blank" rel="noopener">外部资源</a>和<a href="https://matplotlib.org/faq/index.html" target="_blank" rel="noopener">常见问题解答</a>。</p><h1 id="matplotlib-入门"><a href="#matplotlib-入门" class="headerlink" title="matplotlib 入门"></a>matplotlib 入门</h1><p>这些教程介绍了使用Matplotlib创建可视化效果的基础知识，以及有效使用该包的一些最佳实践。</p><h2 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h2><p>本教程介绍一些基本的使用模式和最佳实践，以帮助您开始使用Matplotlib。</p><h3 id="一般概念"><a href="#一般概念" class="headerlink" title="一般概念"></a>一般概念</h3><p>matplotlib有一个广泛的代码库，对于许多新用户来说，这个代码库可能会让人望而生畏。然而，大多数Matplotlib可以用相当简单的概念框架和几个要点的知识来理解。</p><p>打印需要在一系列级别上执行操作，从最一般的级别(例如“轮廓此二维阵列”)到最具体的级别(例如“将此屏幕像素涂成红色”)。绘图软件包的目的是通过所有必要的控制，帮助您尽可能轻松地可视化您的数据-也就是说，在大多数情况下使用相对较高级别的命令，并且在需要时仍然能够使用低级别命令。</p><p>因此，matplotlib中的所有内容都是按照层次结构组织的。层次结构的顶部是matplotlib“状态机环境”，它是由<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">matplotlib.pylot</a>模块提供的。在这个级别上，使用简单的函数来添加打印元素(线、图像、文本等)。到当前地物中的当前轴。</p><p>注意：Pyplot的状态机环境的行为类似于MATLAB，并且对于具有MATLAB经验的用户来说应该是最熟悉的。</p><p>层次结构中的下一级是面向对象的接口的第一级，其中pyplot仅用于少数功能，例如图形创建，并且用户显式创建并跟踪图形和轴对象。 在此级别，用户使用pyplot来创建图形，并且通过这些图形，可以创建一个或多个轴对象。 然后，这些轴对象用于大多数绘图操作。</p><p>对于更多的控制 - 这对于在GUI应用程序中嵌入matplotlib图表这一点至关重要 - 可以完全删除pyplot级别，从而留下纯粹面向对象的方法。</p><pre><code class="python"># 导入matplotlib模块import matplotlib.pyplot as pltimport numpy as npimport pandas as pd</code></pre><h2 id="一个图的一部分"><a href="#一个图的一部分" class="headerlink" title="一个图的一部分"></a>一个图的一部分</h2><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/" alt=""></p><h2 id="Figure"><a href="#Figure" class="headerlink" title="Figure"></a>Figure</h2><p>该图<strong>记录了所有<a href="https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes" target="_blank" rel="noopener">子轴</a>，一些 “特殊” 的艺术家（标题，图形图例等）和画布</strong>。（不要过于担心画布，它是至关重要的，因为它实际上是绘图的对象，以获得你绘制的图像，但作为用户它或多或少是你不可见的）。一个数字可以有任意数量的<a href="https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes" target="_blank" rel="noopener">Axes</a>，但是有用的应该至少有一个。<br>创建一个图像的最简单方法是使用pylot：</p><pre><code class="python"># 没有坐标轴的空图形fig = plt.figure()# 为图形添加一个标题fig.suptitle(&#39;No axes on this figure&#39;)# 带有2x2坐标轴网格的图形fig, ax_lst = plt.subplots(2, 2)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/output_3_1.png" alt="png"></p><h1 id="Axes对象"><a href="#Axes对象" class="headerlink" title="Axes对象"></a>Axes对象</h1><p>这就是你想象中的“一幅图”，它是具有数据空间的图像区域。给定的图形可以包含许多轴，但给定的<a href="https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes" target="_blank" rel="noopener">Axes</a>对象只能在<a href="https://matplotlib.org/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure" target="_blank" rel="noopener">一个图</a>中。 Axes包含两个（或3D的三个）<a href="https://matplotlib.org/api/axis_api.html#matplotlib.axis.Axis" target="_blank" rel="noopener">Axis</a>对象（注意Axes和Axis之间的差异），它们负责数据限制（数据限制也可以通过 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.set_xlim.html#matplotlib.axes.Axes.set_xlim" target="_blank" rel="noopener">set_xlim()</a> 和 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.set_ylim.html#matplotlib.axes.Axes.set_ylim" target="_blank" rel="noopener">set_ylim()</a> 来设置Axes方法）。每个Axes都有一个标题（通过 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.set_title.html#matplotlib.axes.Axes.set_title" target="_blank" rel="noopener">set_title()</a> 设置），一个x标签（通过 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.set_xlabel.html#matplotlib.axes.Axes.set_xlabel" target="_blank" rel="noopener">set_xlabel()</a> 设置）和一个通过 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.set_ylabel.html#matplotlib.axes.Axes.set_ylabel" target="_blank" rel="noopener">set_ylabel()</a> 设置的y标签。</p><p>Axis 类及其成员函数是使用 OO 接口的主要入口点。</p><h2 id="Axis对象"><a href="#Axis对象" class="headerlink" title="Axis对象"></a>Axis对象</h2><p>这些是类似数字的对象。它们负责设置图形限制并生成刻度线（轴上的标记）和ticklabels（标记刻度线的字符串）。刻度线的位置由<a href="https://matplotlib.org/api/ticker_api.html#matplotlib.ticker.Locator" target="_blank" rel="noopener">Locator</a>对象确定，ticklabel字符串由<a href="https://matplotlib.org/api/ticker_api.html#matplotlib.ticker.Formatter" target="_blank" rel="noopener">Formatter</a>格式化。正确的定位器和格式化器的组合可以非常精确地控制刻度位置和标签。</p><h2 id="Artist对象"><a href="#Artist对象" class="headerlink" title="Artist对象"></a>Artist对象</h2><p>基本上你在图上看到的一切都是艺术家（Artist）对象（甚至是图，轴和轴对象）。这包括Text对象，Line2D对象，集合对象，Patch对象……（现在你明白了）。渲染图形时，所有艺术家都被绘制到画布（canvas）上。大多数艺术家（Artist）都与轴有关; 这样的艺术家（Artist）不能被多个轴共享，也不能从一个轴移动到另一个轴。</p><h2 id="绘制函数的输入类型"><a href="#绘制函数的输入类型" class="headerlink" title="绘制函数的输入类型"></a>绘制函数的输入类型</h2><p>所有绘图函数都需要np.array或np.ma.masked_array对象作为输入类型。如果是 “类数组（array-like）” 对象（如<a href="http://www.pypandas.cn/" target="_blank" rel="noopener">pandas</a>数据对象和np.matrix）可能会或可能不会按预期工作。最好在绘图之前将它们转换为np.array对象。</p><p>例如，要转换<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html#pandas.DataFrame" target="_blank" rel="noopener">pandas.DataFrame</a></p><pre><code class="python">a = pd.DataFrame(np.random.rand(4,5), columns = list(&#39;abcde&#39;))a_asndarray = a.values</code></pre><p>以及转换np.matrix</p><pre><code class="python">b = np.matrix([[1,2],[3,4]])b_asarray = np.asarray(b)</code></pre><h2 id="Matplotlib，pyplot和pylab：它们之间有什么关系？"><a href="#Matplotlib，pyplot和pylab：它们之间有什么关系？" class="headerlink" title="Matplotlib，pyplot和pylab：它们之间有什么关系？"></a>Matplotlib，pyplot和pylab：它们之间有什么关系？</h2><p>Matplotlib是整个包; <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">matplotlib.pyplot</a> 是 matplotlib中的一个模块; 和pylab是一个与 matplotlib 一起安装的模块。</p><p>Pyplot为底层面向对象的绘图库提供状态机接口。 状态机隐式地自动创建图形和轴以实现所需的图形。例如：</p><pre><code class="python">x = np.linspace(0, 2, 100)#创建图形和轴,实现绘图plt.plot(x, x, label=&#39;linear&#39;)plt.plot(x, x**2, label=&#39;quadratic&#39;)plt.plot(x, x**3, label=&#39;cubic&#39;)#x/y轴标签plt.xlabel(&#39;x label&#39;)plt.ylabel(&#39;y label&#39;)#表名plt.title(&quot;Simple Plot&quot;)plt.legend()plt.show()</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/output_9_0.png" alt="png"></p><p>第一次调用 plt.plot 将自动创建必要的图形和轴以实现所需的绘图。随后对plt.plot的调用会重新使用当前轴，并且每次都会添加另一行。设置标题，图例和轴标签还会自动使用当前轴并设置标题，创建图例并分别标记轴。</p><p>pylab是一个便利模块，它在单个名称空间中批量导入 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">matplotlib.pyplot</a>（用于绘图）和<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">numpy</a>一样（用于数学和使用数组）。不过不推荐使用pylab，并且由于命名空间污染而强烈建议不要使用它。请改用pyplot。</p><p>对于非交互式绘图，建议使用pyplot创建图形，然后使用OO界面进行绘图。</p><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p>查看此文档和示例时，您将找到不同的代码样式和使用模式。这些风格完全没有问题，各有利弊。几乎所有示例都可以转换为另一种样式并实现相同的结果。唯一需要注意的是避免为自己的代码混合了别的代码风格，尽量保持风格的统一。</p><p>注意：matplotlib的开发人员必须遵循特定的编程风格和指导原则。请参见<a href="https://matplotlib.org/devel/index.html#developers-guide-index" target="_blank" rel="noopener">Matplotlib开发人员手册</a>。</p><p>在不同的风格中，有两种是官方支持的。因此，这些是使用matplotlib的首选方法。</p><p>对于pyplot样式，脚本顶部的通常导入：</p><pre><code class="python">import matplotlib.pyplot as pltimport numpy as np</code></pre><p>然后调用一次，例如，np.arange，np.zeros，np.pi，plt.figure，plt.plot，plt.show等。使用pyplot接口创建图像，然后使用对象方法：<br>然后使用对象方法：</p><pre><code class="python">plt.figure(figsize = (10, 6))x = np.arange(0, 10, 0.2)y = np.sin(x)fig, ax = plt.subplots()ax.plot(x, y)plt.show()</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/output_14_1.png" alt="png"></p><p>那么，为什么所有都是额外的类型而不是MATLAB样式(依赖于全局状态和平面名称空间)呢？对于像这个例子这样非常简单的事情，唯一的好处是学术性的：更冗长的风格更明确，更清楚地说明事物从何而来，以及正在发生的事情。对于更复杂的应用程序，这种明确性和明确性变得越来越有价值，而更丰富和更完整的面向对象接口可能会使程序更易于编写和维护。</p><pre><code class="python">def my_plotter(ax, data1, data2, param_dict):    &quot;&quot;&quot;    用来制作图表的辅助函数    参数    ----------    ax:Axes        要画的坐标轴    data1:数组        x数据    data2:数组        y数据    param_dict: dict类型        要传递给ax.plot的kwargs字典    Returns    -------    list:        list of artists added    &quot;&quot;&quot;    out = ax.plot(data1, data2, **param_dict)    return out# which you would then use as:plt.figure(figsize = (10, 6))data1, data2, data3, data4 = np.random.randn(4, 100)fig, ax = plt.subplots(1, 1)my_plotter(ax, data1, data2, {&#39;marker&#39;: &#39;x&#39;})</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/output_16_2.png" alt="png"></p><p>或者如果你想有两个小子图：</p><pre><code class="python"># 创建带有1x2坐标轴网格的图形fig, (ax1, ax2) = plt.subplots(1, 2)my_plotter(ax1, data1, data2, {&#39;marker&#39;: &#39;x&#39;})my_plotter(ax2, data3, data4, {&#39;marker&#39;: &#39;o&#39;})</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/output_18_1.png" alt="png"></p><p>同样，对于这些简单的例子来说，这种风格看起来有点过头了，但是一旦图形变得稍微复杂一些，就会有回报。</p><h2 id="后端-Backends"><a href="#后端-Backends" class="headerlink" title="后端(Backends)"></a>后端(Backends)</h2><h3 id="什么是后端？"><a href="#什么是后端？" class="headerlink" title="什么是后端？"></a>什么是后端？</h3><p>网站和邮件列表中的许多文档都提到了“后端（Backends）”，许多新用户对这个术语感到困惑。matplotlib针对许多不同的用例和输出格式。有些人在python shell中以交互方式使用matplotlib，并在键入命令时弹出绘图窗口。有些人运行Jupyter笔记本并绘制内联图以进行快速数据分析。其他人将matplotlib嵌入到图形用户界面（如wxpython或pygtk）中以构建丰富的应用程序。有些人在批处理脚本中使用matplotlib从数值模拟生成postscript图像，还有一些人运行Web应用程序服务器来动态提供图形。</p><p>为了支持所有这些用例，matplotlib可以针对不同的输出，并且这些功能中的每一个都称为后端（Backends）; “前端（frontend）”是面向用户的代码，即绘图代码，而“后端（Backends）”完成幕后的所有艰苦工作以制作图形。 有两种类型的后端：用户界面后端（用于pygtk，wxpython，tkinter，qt4或macosx;也称为“交互式后端”）和硬拷贝后端来制作图像文件（PNG，SVG，PDF，PS; 也被称为“非交互式后端”）。</p><p>配置后端有四种方法。如果它们彼此冲突，将使用以下列表中最后提到的方法，例如，调用 <a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use" target="_blank" rel="noopener">use()</a> 将覆盖 matplotlibrc 中的设置。</p><pre><code>matplotlibrc文件中的后端参数（请参阅[使用样式表和rcParams自定义Matplotlib](https://matplotlib.org/tutorials/introductory/customizing.html)）：</code></pre><pre><code>backend : WXAgg   #使用带有反纹理(agg)呈现的wxpython</code></pre><pre><code>在Unix系统上，为当前shell或单个脚本设置[MPLBACKEND](https://matplotlib.org/faq/environment_variables_faq.html#envvar-MPLBACKEND)环境变量：</code></pre><pre><code>&gt; export MPLBACKEND=module://my_backend&gt; python simple_plot.py&gt; MPLBACKEND=&quot;module://my_backend&quot; python simple_plot.py</code></pre><p>在Windows上，只有前者是可用的：</p><pre><code>&gt; set MPLBACKEND=module://my_backend&gt; python simple_plot.py</code></pre><p>设置此环境变量将覆盖任何 matplotlibrc 中的后端参数，即使当前工作目录中存在matplotlibrc也是如此。 因此，全局设置<a href="https://matplotlib.org/faq/environment_variables_faq.html#envvar-MPLBACKEND" target="_blank" rel="noopener">MPLBACKEND</a> ，例如 在.bashrc 或 .profile 中，不鼓励它，因为它可能导致反常的行为。<br>如果您的脚本依赖于特定的后端，则可以使用 <a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use" target="_blank" rel="noopener">use()</a> 函数：</p><pre><code class="python">import matplotlib# 默认情况下生成postscript输出matplotlib.use(&#39;PS&#39;)   </code></pre><p>如果使用 <a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use" target="_blank" rel="noopener">use()</a> 函数，则必须在输入 <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">matplotlib.pyplot</a> 之前完成此操作。导入 pyplot 后调用 <a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use" target="_blank" rel="noopener">use()</a> 将不起作用。如果用户希望使用不同的后端，则使用 <a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use" target="_blank" rel="noopener">use()</a> 将需要更改代码。因此，除非绝对必要，否则应避免显式调用 <a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use" target="_blank" rel="noopener">use()</a>。</p><p>注意：后端名称规范不区分大小写；例如，‘GTK3Agg’ 和 ‘gtk3agg’ 是等效的。</p><p>通过典型的方式安装matplotlib，例如：从二进制安装程序或Linux发行包安装的话，可以设置好一个默认的后端，允许交互式工作和从脚本绘图，输出到屏幕和/或文件，所以至少一开始的时候你不需要使用上面给出的任何方法。</p><p>但是，如果您想编写图形用户界面或Web应用程序服务器（<a href="https://matplotlib.org/faq/howto_faq.html#howto-webapp" target="_blank" rel="noopener">Web应用程序服务器中的Matplotlib</a>），或者需要更好地了解正在发生的事情，请继续阅读。为了使图形用户界面可以更加自定义，matplotlib将画布（绘图所在的位置）中的渲染器（实际绘制的东西）的概念分开。用户界面的规范渲染器是Agg，它使用 <a href="http://antigrain.com/" target="_blank" rel="noopener">Anti-Grain Geometry</a> C++库来制作图形的光栅（像素）图像。除macosx之外的所有用户界面都可以与agg渲染一起使用，例如WXAgg，GTK3Agg，QT4Agg，QT5Agg，TkAgg。此外，一些用户界面支持其他渲染引擎。 例如，使用GTK + 3，您还可以选择Cairo渲染（后端GTK3Cairo）。</p><p>对于渲染引擎，还可以区分<a href="https://en.wikipedia.org/wiki/Vector_graphics" target="_blank" rel="noopener">矢量</a>(vector)或<a href="https://en.wikipedia.org/wiki/Raster_graphics" target="_blank" rel="noopener">光栅</a>(raster)渲染器。矢量图形语言发出绘图命令，例如“从此点到此点绘制线”，因此无标度，并且栅格后端生成线的像素表示，其精度取决于DPI设置。</p><p>下面是matplotlib渲染器的摘要(每个渲染器都有一个同名的后端；它们是非交互式后端，能够写入文件)：</p><table><thead><tr><th align="left">渲染格式</th><th align="left">文件类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">AGG</td><td align="left">png</td><td align="center">raster graphics – 使用反纹理几何（Anti-Grain Geometry）引擎的高质量图像。</td></tr><tr><td align="left">PS</td><td align="left">ps eps</td><td align="center">vector graphics – Postscript output</td></tr><tr><td align="left">PDF</td><td align="left">pdf</td><td align="center">vector graphics – Portable Document Format</td></tr><tr><td align="left">SVG</td><td align="left">svg</td><td align="center">vector graphics – Scalable Vector Graphics</td></tr><tr><td align="left">Cairo</td><td align="left">png ps pdf svg</td><td align="center">raster graphics 和 vector graphics – 使用 Cairo图形库(Cairo graphics)库</td></tr></tbody></table><p>以下是支持的用户界面和渲染器组合; 这些是交互式后端，能够显示到屏幕并使用上表中的适当渲染器写入文件：</p><table><thead><tr><th align="left">渲染格式</th><th align="center">文件类型</th></tr></thead><tbody><tr><td align="left">Qt5Agg</td><td align="center">在Qt5画布中进行Agg渲染(需要PyQt5)。可以在IPython中使用 %matplotlib qt5 激活此后端。</td></tr><tr><td align="left">ipympl</td><td align="center">嵌入在Jupyter小部件中的Agg渲染。（需要ipympl）。这个后端可以在带有％matplotlib ipympl 的Jupyter笔记本中启用。</td></tr><tr><td align="left">GTK3Agg</td><td align="center">Agg渲染到GTK 3.x画布（需要PyGObject，pycairo或cairocffi）。 可以使用％matplotlib gtk3 在 IPython中激活此后端。</td></tr><tr><td align="left">macosx</td><td align="center">将AGG渲染到OSX中的Cocoa画布中。可以在IPython中使用 %matplotlib OSX 激活此后端。</td></tr><tr><td align="left">TkAgg</td><td align="center">Agg渲染到Tk画布（需要TkInter）。可以使用 ％matplotlib tk 在IPython中激活此后端。</td></tr><tr><td align="left">nbAgg</td><td align="center">在经典的Jupyter笔记本中嵌入一个交互式界面。 可以通过％matplotlib 笔记本 在Jupyter笔记本中启用此后端。</td></tr><tr><td align="left">WebAgg</td><td align="center">show() 将启动一个带有交互式图形的 tornado 服务。</td></tr><tr><td align="left">GTK3Cairo</td><td align="center">在GTK 3.x画布上呈现cairo(需要PyGObject 和 pycairo 或 cairocffi )。</td></tr><tr><td align="left">Qt4Agg</td><td align="center">Agg渲染到 Qt4 画布（需要 PyQt4 或pyside）。可以使用 ％matplotlib qt4 在IPython中激活此后端。</td></tr><tr><td align="left">WXAgg</td><td align="center">Agg渲染到 wxWidgets 画布（需要wxPython 4）。可以使用 ％matplotlib wx 在IPython中激活此后端。</td></tr></tbody></table><h3 id="ipympl"><a href="#ipympl" class="headerlink" title="ipympl"></a>ipympl</h3><p>Jupyter小部件生态系统的移动速度太快，无法直接在Matplotlib中支持。安装ipympl</p><pre><code class="python">pip install ipympljupyter nbextension enable --py --sys-prefix ipympl# 或者conda install ipympl -c conda-forge</code></pre><p>请参阅 <a href="https://github.com/matplotlib/jupyter-matplotlib" target="_blank" rel="noopener">jupyter-matplotlib</a> 了解更多细节。</p><h3 id="GTK-和-Cairo"><a href="#GTK-和-Cairo" class="headerlink" title="GTK 和 Cairo"></a>GTK 和 Cairo</h3><p>GTK3 后端 (包括 GTK3Agg 和 GTK3Cairo) 依赖于 Cairo (pycairo&gt;=1.11.0 或 cairocffi).</p><h3 id="如何选择PyQt4或PySide？"><a href="#如何选择PyQt4或PySide？" class="headerlink" title="如何选择PyQt4或PySide？"></a>如何选择PyQt4或PySide？</h3><p>QT_API环境变量可以设置为 pyqt 或 pyside，分别使用 PyQt4 或 PySide。</p><p>由于要使用的绑定的默认值是PyQt4，matplotlib 首先尝试导入它，如果导入失败，它会尝试导入 PySide。</p><h3 id="什么是交互模式？"><a href="#什么是交互模式？" class="headerlink" title="什么是交互模式？###"></a>什么是交互模式？###</h3><p>使用交互式后端（请参阅<a href="https://www.matplotlib.org.cn/tutorials/introductory/usage.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%90%8E%E7%AB%AF%EF%BC%9F" target="_blank" rel="noopener">什么是后端？</a>）允许但本身并不需要或确保绘制到屏幕上。是否以及何时绘制到屏幕，以及在屏幕上绘制绘图后是否继续脚本或shell会话取决于调用的函数和方法，以及确定matplotlib是否处于“交互模式”的状态变量”。默认的布尔值由matplotlibrc文件设置，并且可以像任何其他配置参数一样进行自定义（请参阅<a href="https://matplotlib.org/tutorials/introductory/customizing.html" target="_blank" rel="noopener">使用样式表和rcParams自定义Matplotlib</a>）。它也可以通过<a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.interactive" target="_blank" rel="noopener">matplotlib.interactive()</a> 设置，并且可以通过<a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.is_interactive" target="_blank" rel="noopener">matplotlib.is_interactive()</a> 查询其值。无论是在脚本还是在shell中，在绘图命令流的中间打开和关闭交互模式很少需要并且可能令人困惑，因此在下文中我们将假设所有绘图都是以交互模式打开或关闭。</p><p>注意：与交互性相关的主要更改，特别是<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.show.html#matplotlib.pyplot.show" target="_blank" rel="noopener">show()</a>的角色和行为，在向matplotlib 1.0版的过渡中进行了更改，并在1.0.1中修复了错误。这里我们描述主要交互式后端的1.0.1版行为，但MacOSX除外。</p><p>交互模式也可以通过matplotlib.pyplot.ion()打开，并通过matplotlib.pyplot.ioff()关闭。</p><p>注意：交互模式在ipython和普通的python shell中使用合适的后端，但它在IDLE IDE中不起作用。如果默认后端不支持交互性，则通过“<a href="https://matplotlib.org/tutorials/introductory/usage.html#id4" target="_blank" rel="noopener">可以使用什么是后端？</a>”这个话题中讨论的任何方法显式激活交互式后端。</p><h3 id="交互例子"><a href="#交互例子" class="headerlink" title="交互例子"></a>交互例子</h3><p>从普通的python提示符，或者在没有选项的情况下调用ipython之后，试试这个：</p><pre><code class="python">import matplotlib.pyplot as pltplt.ion()plt.plot([1.6, 2.7])</code></pre><pre><code>[&lt;matplotlib.lines.Line2D at 0x20712cf1828&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/output_25_1.png" alt="png"></p><p>假设您运行的是1.0.1或更高版本，并且默认情况下安装并选择了交互式后端，您应该看到一个图，并且您的终端提示也应该是活动的; 您可以键入其他命令，例如：</p><pre><code class="python">plt.title(&quot;interactive test&quot;)plt.xlabel(&quot;index&quot;)</code></pre><pre><code>Text(0.5, 0, &#39;index&#39;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/output_27_1.png" alt="png"></p><p>然后你会看到每一行后都要更新绘图。从版本1.5开始，通过其他方式修改绘图也应该自动更新大多数后端的显示。获取对<a href="https://matplotlib.org/api/axes_api.html#matplotlib.axes.Axes" target="_blank" rel="noopener">Axes</a>实例的引用，并调用该实例的方法：</p><pre><code class="python">ax = plt.gca()ax.plot([3.1, 2.2])</code></pre><pre><code>[&lt;matplotlib.lines.Line2D at 0x20712a740f0&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/output_29_1.png" alt="png"></p><p>如果你使用的是某些后端（如macosx）或旧版本的matplotlib，则可能无法立即将新行添加到绘图中。在这种情况下，您需要显式调用<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.draw.html#matplotlib.pyplot.draw" target="_blank" rel="noopener">draw()</a> 以更新绘图：</p><pre><code class="python">plt.draw()</code></pre><pre><code>&lt;Figure size 432x288 with 0 Axes&gt;</code></pre><h3 id="非交互式示例"><a href="#非交互式示例" class="headerlink" title="非交互式示例"></a>非交互式示例</h3><p>像上一个示例中一样开始一个新会话，但现在关闭交互模式：</p><pre><code class="python">import matplotlib.pyplot as pltplt.ioff()plt.plot([1.6, 2.7])</code></pre><pre><code>[&lt;matplotlib.lines.Line2D at 0x20712a9afd0&gt;]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/output_33_1.png" alt="png"></p><p>什么都没发生 - 或者至少没有任何东西出现在屏幕上（除非你使用macosx后端，这是异常的）。要显示绘图，您需要执行以下操作：</p><pre><code class="python">plt.show()</code></pre><p>现在你看到图像，但你的终端命令行没有响应; show() 命令会阻止其他命令的输入，直到您手动终止绘图窗口。</p><p>被迫使用阻塞功能？这有什么用，假设您需要一个脚本，将文件内容绘制到屏幕上。您想查看该图，然后结束脚本。如果没有一些阻塞命令（如show()），脚本会闪现图像，然后立即结束，屏幕上不显示任何内容。</p><p>此外，非交互模式会将所有图形延迟到调用show()；这比每次在脚本中添加新功能时重新绘制打印更有效。</p><p>在版本1.0之前，show()通常不能在单个脚本中调用多次(尽管有时可以不受限制)；对于版本1.0.1及更高版本，此限制已解除，因此可以编写如下脚本：</p><pre><code class="python">import numpy as npimport matplotlib.pyplot as pltplt.ioff()for i in range(3):    plt.plot(np.random.rand(10))    plt.show()</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/output_37_0.png" alt="png"></p><p>这就形成了三个阴谋，一次一个。即。第一个地块关闭后，将显示第二个地块。</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>在交互模式下，pyplot功能会自动绘制到屏幕上。</p><p>交互式绘制时，如果除了pyplot函数之外还使用对象方法调用，则只要想要刷新绘图，就调用<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.draw.html#matplotlib.pyplot.draw" target="_blank" rel="noopener">draw()</a> 。</p><p>在要生成一个或多个图形的脚本中使用非交互模式，并在结束或生成一组新图形之前显示它们。在这种情况下，使用<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.show.html#matplotlib.pyplot.show" target="_blank" rel="noopener">show()</a>显示图形并阻止执行，直到您手动销毁它们。</p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>无论是以交互模式探索数据还是以编程方式保存大量绘图，渲染性能都可能成为您管道中的一个痛苦瓶颈。Matplotlib提供了几种方法来大大减少渲染时间，但代价是绘图外观略有变化（达到可设置的容差）。可用于缩短渲染时间的方法取决于正在创建的绘图类型。</p><h3 id="线段简化"><a href="#线段简化" class="headerlink" title="线段简化"></a>线段简化</h3><p>对于具有直线段的打印(例如，典型的直线打印、多边形轮廓等)，渲染性能可以由matplotLibrc文件中的path.Simplify和path.Simplify_Threshold参数控制(有关matplotlib文件的详细信息，请参见<a href="https://matplotlib.org/tutorials/introductory/customizing.html" target="_blank" rel="noopener">使用样式表和rcParams自定义Matplotlib</a>)。Simplify参数是一个布尔值，用于指示是否简化了直线段。path.Simplify_Threshold参数控制简化线段的程度；阈值越高，渲染速度越快。</p><p>以下脚本将首先显示数据而不进行任何简化，然后简化显示相同的数据。 尝试与它们互动：</p><pre><code class="python">import numpy as npimport matplotlib.pyplot as pltimport matplotlib as mpl# 设置并创建要绘图的数据y = np.random.rand(100000)y[50000:] *= 2y[np.logspace(1, np.log10(50000), 400).astype(int)] = -1mpl.rcParams[&#39;path.simplify&#39;] = Truempl.rcParams[&#39;path.simplify_threshold&#39;] = 0.0plt.plot(y)plt.show()mpl.rcParams[&#39;path.simplify_threshold&#39;] = 1.0plt.plot(y)plt.show()</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/output_40_0.png" alt="png"></p><p>Matplotlib目前默认为1/9的保守简化阈值。如果要更改默认设置以使用其他值，可以更改matplotlibrc文件。或者，您可以为交互式绘图（具有最大简化）创建新样式，并为出版质量绘图创建另一种样式（最小化简化）并根据需要激活它们。有关如何执行这些操作的说明，请参阅<a href="https://matplotlib.org/tutorials/introductory/customizing.html" target="_blank" rel="noopener">使用样式表和rcParams自定义Matplotlib</a>。</p><p>简化通过将线段迭代地合并为单个矢量直到下一个线段与矢量的垂直距离（在显示坐标空间中测量）大于 path.simplify_threshold 参数来工作。</p><p>注意：与版本细分如何简化相关的更改在版本2.1中进行。 2.1之前的这些参数仍将改善渲染时间，但2.1版及更高版本的某些类型数据的渲染时间将大大改善。</p><h3 id="标记简化"><a href="#标记简化" class="headerlink" title="标记简化"></a>标记简化</h3><p>标记也可以简化，尽管不如线段强大。标记简化仅适用于<a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D" target="_blank" rel="noopener">Line2D</a>对象（通过市场营销属性）。无论在哪里传递<a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D" target="_blank" rel="noopener">Line2D</a>构造参数，例如<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot" target="_blank" rel="noopener">matplotlib.pyplot.plot()</a> 和 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot" target="_blank" rel="noopener">matplotlib.axes.Axes.plot()</a>，都可以使用markevery参数：</p><pre><code class="python">plt.plot(x, y, markevery=10)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/output_42_1.png" alt="png"></p><p>市场营销论证允许天真的子采样，或尝试均匀间隔（沿x轴）采样。 有关更多信息，请参阅Markevery演示。</p><h3 id="将线分割成较小的块"><a href="#将线分割成较小的块" class="headerlink" title="将线分割成较小的块"></a>将线分割成较小的块</h3><p>如果您正在使用Agg后端（请参阅<a href="https://www.matplotlib.org.cn/tutorials/introductory/usage.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%90%8E%E7%AB%AF%EF%BC%9F" target="_blank" rel="noopener">什么是后端？</a>），那么您可以使用 agg.path.chunksize rc参数。这允许您指定块大小，并且任何具有大于该多个顶点的行将被分割成多行，每行不超过 agg.path.chunksize 许多顶点。（除非agg.path.chunksize为零，在这种情况下没有分块。）对于某种类型的数据，将线条分成合理的大小可以大大减少渲染时间。</p><p>以下脚本将首先显示没有任何块大小限制的数据，然后显示块大小为10,000的相同数据。当数字很大时，可以最好地看到差异，尝试最大化GUI然后与它们进行交互：</p><pre><code class="python">import numpy as npimport matplotlib.pyplot as pltimport matplotlib as mplmpl.rcParams[&#39;path.simplify_threshold&#39;] = 1.0# Setup, and create the data to ploty = np.random.rand(100000)y[50000:] *= 2y[np.logspace(1,np.log10(50000), 400).astype(int)] = -1mpl.rcParams[&#39;path.simplify&#39;] = Truempl.rcParams[&#39;agg.path.chunksize&#39;] = 0plt.plot(y)plt.show()mpl.rcParams[&#39;agg.path.chunksize&#39;] = 10000plt.plot(y)plt.show()</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/matplotlibCourse/output_44_0.png" alt="png"></p><h3 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h3><p>轴的默认图例行为尝试查找覆盖最少数据点的位置（loc =’best’）。 如果有大量数据点，这可能是非常昂贵的计算。 在这种情况下，您可能希望提供特定位置。</p><h3 id="使用快速的风格"><a href="#使用快速的风格" class="headerlink" title="使用快速的风格"></a>使用快速的风格</h3><p>快速样式可用于自动将简化和分块参数设置为合理的设置，以加快绘制大量数据的速度。它可以通过运行简单地使用：</p><pre><code class="python">import matplotlib.style as mplstylemplstyle.use(&#39;fast&#39;)</code></pre><p>它的重量非常轻，因此它可以很好地与其他风格配合使用，只需确保最后应用快速样式，以便其他样式不会覆盖设置：</p><pre><code class="python">mplstyle.use([&#39;dark_background&#39;, &#39;ggplot&#39;, &#39;fast&#39;])</code></pre>]]></content>
      
      
      <categories>
          
          <category> 可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python可视化 </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seaborn中文教程（转）</title>
      <link href="//post/Experience/Seaborn/"/>
      <url>//post/Experience/Seaborn/</url>
      
        <content type="html"><![CDATA[<p>Seaborn是基于matplotlib的图形可视化python包。它提供了一种高度交互式界面，便于用户能够做出各种有吸引力的统计图表。<br>Seaborn是在matplotlib的基础上进行了更高级的API封装，从而使得作图更加容易，在大多数情况下使用seaborn能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。应该把Seaborn视为matplotlib的补充，而不是替代物。同时它能高度兼容numpy与pandas数据结构以及scipy与statsmodels等统计模式。</p><a id="more"></a><h1 id="章节概要"><a href="#章节概要" class="headerlink" title="章节概要"></a>章节概要</h1><ol><li>Seaborn介绍：</li><li>安装Seaborn</li><li>加载库和数据文件</li><li>Seaborn的绘图功能</li><li>用Matplotlib定制</li><li>Pandas的作用</li><li>Seaborn 主题</li><li>调色盘</li><li>图形重叠</li><li>融合数据</li><li>迷你画廊 </li></ol><h2 id="安装Seaborn"><a href="#安装Seaborn" class="headerlink" title="安装Seaborn"></a>安装Seaborn</h2><p>首先确定你的电脑已安装以下应用 </p><ul><li>Python 2.7+ or Python 3 </li><li>Pandas </li><li>Matplotlib </li><li>Seaborn </li><li>Jupyter Notebook(可选)</li></ul><p>打开Jupyter Notebook, 过几秒钟会弹出网页窗口Home。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/assets@master/1.png" alt="image.png"><br>点击右侧的New，新建一个Notebook，弹出一个新的网页窗口，点击上方可命名文件。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/assets@master/2.png" alt="image.png"></p><h2 id="Seaborn介绍："><a href="#Seaborn介绍：" class="headerlink" title="Seaborn介绍："></a>Seaborn介绍：</h2><p>Seaborn属于Matplotlib的一个高级接口，为我们进行数据的可视化分析提供了极大的方便。 </p><h2 id="加载库和数据文件"><a href="#加载库和数据文件" class="headerlink" title="加载库和数据文件"></a>加载库和数据文件</h2><p>加载pandas、matplotlib、seaborn。</p><pre><code class="python"># coding: utf-8#加载pandasimport pandas as pd#加载matplotlibfrom matplotlib import pyplot as plt#在notebook中显示数据点%matplotlib inline#加载seabornimport seaborn as sb</code></pre><p>这里提供了一个数据文件，下载链接为<br><a href="https://elitedatascience.com/wp-content/uploads/2017/04/Pokemon.csv" target="_blank" rel="noopener">Pokemon.csv</a></p><p>用pandas读取数据文件，并显示前五行。</p><pre><code class="python">#用pandas读取Pokemon.csvdf = pd.read_csv(&quot;f:/Pokemon.csv&quot;, encoding = &quot;unicode_escape&quot;)#读取前五行，编译后的结果为一个列表。df.head()</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>#</th>      <th>Name</th>      <th>Type 1</th>      <th>Type 2</th>      <th>Total</th>      <th>HP</th>      <th>Attack</th>      <th>Defense</th>      <th>Sp. Atk</th>      <th>Sp. Def</th>      <th>Speed</th>      <th>Stage</th>      <th>Legendary</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>Bulbasaur</td>      <td>Grass</td>      <td>Poison</td>      <td>318</td>      <td>45</td>      <td>49</td>      <td>49</td>      <td>65</td>      <td>65</td>      <td>45</td>      <td>1</td>      <td>False</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>Ivysaur</td>      <td>Grass</td>      <td>Poison</td>      <td>405</td>      <td>60</td>      <td>62</td>      <td>63</td>      <td>80</td>      <td>80</td>      <td>60</td>      <td>2</td>      <td>False</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>Venusaur</td>      <td>Grass</td>      <td>Poison</td>      <td>525</td>      <td>80</td>      <td>82</td>      <td>83</td>      <td>100</td>      <td>100</td>      <td>80</td>      <td>3</td>      <td>False</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>Charmander</td>      <td>Fire</td>      <td>NaN</td>      <td>309</td>      <td>39</td>      <td>52</td>      <td>43</td>      <td>60</td>      <td>50</td>      <td>65</td>      <td>1</td>      <td>False</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>Charmeleon</td>      <td>Fire</td>      <td>NaN</td>      <td>405</td>      <td>58</td>      <td>64</td>      <td>58</td>      <td>80</td>      <td>65</td>      <td>80</td>      <td>2</td>      <td>False</td>    </tr>  </tbody></table></div><pre><code class="python">#绘制散点图sb.lmplot(x = &#39;Attack&#39;, y = &#39;Defense&#39;, data = df)</code></pre><pre><code>D:\Function\Anaconda3\lib\site-packages\scipy\stats\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval&lt;seaborn.axisgrid.FacetGrid at 0x2ea94d27c50&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_8_2.png" alt="png"></p><h2 id="Seaborn的绘图功能"><a href="#Seaborn的绘图功能" class="headerlink" title="Seaborn的绘图功能"></a>Seaborn的绘图功能</h2><p>Seaborn最大的优点之一在于其种类繁多的绘图功能，下面我们利用lmplot()函数，用一行代码来绘制散点图。我们希望x轴显示Attack数据，y轴显示Defense数据，则可以编写代码。 </p><p>事实上seaborn并没有专门用来绘制散点图的功能，实际上我们用它来拟合和绘制回归线。<br>幸运的是，我们可以通过设置函数的参数来得到我们想要的散点图。用fit_reg = False 移去回归线，用hug参数来用不同颜色显示Pokemon进化阶段的信息。 </p><pre><code class="python">#移去回归线，用不同颜色来表示pokemon的进化阶段，即刻得到散点图：sb.lmplot(x = &#39;Attack&#39;, y = &#39;Defense&#39;, data = df,         fit_reg = False,         hue = &#39;Stage&#39;)</code></pre><pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x2ea950e4278&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_11_1.png" alt="png"></p><p>从散点图可以看出，所有的数据点都分布在数轴的正半轴，然而散点图的数轴从负数开始的，我们可以对它进行改进。</p><h2 id="用Matplotlib定制"><a href="#用Matplotlib定制" class="headerlink" title="用Matplotlib定制"></a>用Matplotlib定制</h2><p>虽然Seaborn是Matplotlib的一个高级接口，但是我们有时候也需要用到Matplotlib。其中包括设置数轴的范围。我们利用Matplotlib的ylim()和xlim()函数来设置数轴的范围。 </p><pre><code class="python">#设置数轴范围plt.gca().set(xlim = (0, None), ylim = (0, None),             xlabel=&#39;Attack&#39;, ylabel=&#39;Defense&#39;)</code></pre><pre><code>[(0, 1.0), Text(0, 0.5, &#39;Defense&#39;), (0, 1.0), Text(0.5, 0, &#39;Attack&#39;)]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_14_1.png" alt="png"></p><h2 id="Pandas的作用"><a href="#Pandas的作用" class="headerlink" title="Pandas的作用"></a>Pandas的作用</h2><p>尽管这是一个Seaborn教程，pandas依然在实际应用中起到了十分重要的作用。下面我们根据Pokemon的攻击数据来绘制箱形图</p><pre><code class="python">sb.boxplot(data = df)#得到的箱形图： </code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea950c99b0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_16_1.png" alt="png"></p><p>很好，这是一个良好的开端，但是我们可以移除不需要的几列数据。</p><pre><code>移除掉Total，因为我们有独立的统计数据。移除掉Stage跟Legendary，因为它们不是攻击统计数据。我们可以创建一个新的数据集stats_df，满足我们上述的要求。</code></pre><pre><code class="python">#创建新数据集stats_df = df.drop([&#39;Total&#39;, &#39;Stage&#39;, &#39;Legendary&#39;], axis = 1)#Boxplotsb.boxplot(data = stats_df)</code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea962be358&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_18_1.png" alt="png"></p><p>得到了一个改进了的箱形图。</p><h2 id="Seaborn-主题"><a href="#Seaborn-主题" class="headerlink" title="Seaborn 主题"></a>Seaborn 主题</h2><p>Seaborn的另一个好处就是其恰到好处、开箱即用的风格主题。其默认的主题为“darkgrid”<br>下一步，我们把主题改为“whitegrid”来创建一个小提琴图</p><pre><code>小提琴图常常作为箱形图的替代小提琴图通过小提琴的厚度展示了数据的分布，而不仅仅是总结数据。根据Pokemon的主要类型，我们可以将Attack数据的分布可视化。 </code></pre><pre><code class="python">#设置主题sb.set_style(&#39;whitegrid&#39;)#violin plotsb.violinplot(x = &#39;Type 1&#39;, y = &#39;Attack&#39;, data = df)</code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea96343828&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_21_1.png" alt="png"></p><p>可以得到小提琴图，x轴显示的是Pokemon的Type1，y轴显示的是不同Pokemon的攻击数值。 </p><h2 id="调色盘"><a href="#调色盘" class="headerlink" title="调色盘"></a>调色盘</h2><p>Seaborn可以根据我们的需求，来设置颜色。我们可以创建一个python命令列表，用颜色的十六进制数值来设置。数值可以在<a href="https://bulbapedia.bulbagarden.net/wiki/Category:Type_color_templates" target="_blank" rel="noopener">Bulbapedia</a>中寻找。</p><pre><code class="python">#创建颜色列表pkmn_type_colors = [&#39;#78C850&#39;,                    &#39;#F08030&#39;,                    &#39;#6890F0&#39;,                    &#39;#A8B820&#39;,                    &#39;#A8A878&#39;,                    &#39;#A040A0&#39;,                    &#39;#F8D030&#39;,                    &#39;#E0C068&#39;,                    &#39;#EE99AC&#39;,                    &#39;#C03028&#39;,                    &#39;#F85888&#39;,                    &#39;#B8A038&#39;,                    &#39;#705898&#39;,                    &#39;#98D8D8&#39;,                    &#39;#7038F8&#39;                   ]#导入小提琴图中sb.violinplot(x = &#39;Type 1&#39;, y = &#39;Attack&#39;, data = df,             palette = pkmn_type_colors)</code></pre><pre><code>D:\Function\Anaconda3\lib\site-packages\scipy\stats\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea94d24470&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_24_2.png" alt="png"></p><p>为了能够让数据文件中的151个Pokemon都能够在图中简单展示，我们可以用群集图 swarm plot达到这一目的。 </p><pre><code class="python">sb.swarmplot(x = &#39;Type 1&#39;, y = &#39;Attack&#39;, data = df,            palette = pkmn_type_colors)</code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea96d5bda0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_26_1.png" alt="png"></p><h2 id="图形重叠"><a href="#图形重叠" class="headerlink" title="图形重叠"></a>图形重叠</h2><p>我们已经绘制出了小提琴图和群集图，Seaborn允许我们将这两张图整合在一张图上，步骤如下：</p><pre><code>首先，我们用Matplotlib设置图形比例。然后，我们绘制小提琴图，用inner = None将小提琴中间的木杆移去。接着，我们绘制群集图，并将数据点的颜色变为黑色。最后，我们可以用Matplotlib设置一个标题。</code></pre><pre><code class="python">#设置图形比例plt.figure(figsize = (10, 6))#创建violinplotsb.violinplot(x = &#39;Type 1&#39;, y = &#39;Attack&#39;, data = df,              inner = None,             palette = pkmn_type_colors)#创建swarmplotsb.swarmplot(x = &#39;Type 1&#39;, y = &#39;Attack&#39;, data = df,             color = &#39;k&#39;,            palette = pkmn_type_colors)#设置标题plt.title(&#39;Attack by Type&#39;)#其中alpha为透明度。 编译后可以得到如下图形。 </code></pre><pre><code>Text(0.5, 1.0, &#39;Attack by Type&#39;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_28_1.png" alt="png"></p><p>现在我们可以清晰的看到不同Pokemon的攻击值了。那么我们怎么看其他的数值呢？</p><h2 id="融合数据"><a href="#融合数据" class="headerlink" title="融合数据"></a>融合数据</h2><p>为了展现其他的数据，我们当然可以重复以上的步骤，绘制多张图。但是我们同样也可以在一张图上表示所有的数据，这时候pandas就派上用场了。<br>我们可以利用pandas的melt()函数来将一些数据进行融合，这样就可以在不同Pokemon之间直接进行比对，melt()需要导入3个参数，分别为：</p><pre><code>需要融合的数据列表需要保留的ID变量，其他变量将会被Pandas融合。融合而成的新变量的名字。</code></pre><pre><code class="python">#数据融合melted_df = pd.melt(stats_df,                   id_vars = [&#39;Name&#39;, &#39;Type 1&#39;, &#39;Type 2&#39;],                   var_name = &#39;Stat&#39;)#前五行melted_df.head()</code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Name</th>      <th>Type 1</th>      <th>Type 2</th>      <th>Stat</th>      <th>value</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Bulbasaur</td>      <td>Grass</td>      <td>Poison</td>      <td>#</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td>Ivysaur</td>      <td>Grass</td>      <td>Poison</td>      <td>#</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>Venusaur</td>      <td>Grass</td>      <td>Poison</td>      <td>#</td>      <td>3</td>    </tr>    <tr>      <th>3</th>      <td>Charmander</td>      <td>Fire</td>      <td>NaN</td>      <td>#</td>      <td>4</td>    </tr>    <tr>      <th>4</th>      <td>Charmeleon</td>      <td>Fire</td>      <td>NaN</td>      <td>#</td>      <td>5</td>    </tr>  </tbody></table></div><p>我们为已经融合的数据列表melted_df绘制群集图。</p><pre><code class="python">#数据融合melted_df = pd.melt(stats_df,                   id_vars = [&#39;Name&#39;, &#39;Type 1&#39;, &#39;Type 2&#39;],                   var_name = &#39;Stat&#39;)#前五行melted_df.head()#绘制群集图sb.swarmplot(x = &#39;Stat&#39;, y = &#39;value&#39;, data = melted_df,            hue = &#39;Type 1&#39;)#就可以得到如下的群集图。x轴为Stat中融合的六个变量，y轴为Stat的值，不同颜色代表不同的Pokemon Type 1。</code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea9887da58&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_33_1.png" alt="png"></p><p>这张图表有一些细节需要完善：</p><pre><code>扩大图表。使用split = True 来分隔色调。使用我们自定义的颜色。调整y轴的范围将图例放在右侧。</code></pre><pre><code class="python">#扩大图表plt.figure(figsize = (10, 8))#绘制群集图，使用split = True 来分割，使用自定义的颜色sb.swarmplot(x = &#39;Stat&#39;, y = &#39;value&#39;, data = melted_df,            hue = &quot;Type 1&quot;,            split = True,            palette = pkmn_type_colors)#调整Y轴的范围plt.ylim(0,260)#将图例放在右侧plt.legend(bbox_to_anchor = (1,1), loc = 2)</code></pre><pre><code>D:\Function\Anaconda3\lib\site-packages\seaborn\categorical.py:2974: UserWarning: The `split` parameter has been renamed to `dodge`.  warnings.warn(msg, UserWarning)&lt;matplotlib.legend.Legend at 0x2ea98a7f0b8&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_35_2.png" alt="png"></p><p>即可得到一个已经细节完善后的图表。 </p><h2 id="迷你画廊"><a href="#迷你画廊" class="headerlink" title="迷你画廊"></a>迷你画廊</h2><h3 id="Heatmap"><a href="#Heatmap" class="headerlink" title="Heatmap"></a>Heatmap</h3><p>Heatmap可以帮助可视化矩阵状的数据。</p><pre><code class="python">#计算相关性corr = stats_df.corr()#Hteatmapsb.heatmap(corr)</code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea98dac4e0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_38_1.png" alt="png"></p><h3 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h3><p>Histogram能够绘制变量的数值分布。</p><pre><code class="python">#绘制直方图sb.distplot(df.Attack)</code></pre><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea988d2da0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_40_1.png" alt="png"></p><h3 id="Bar-Plot"><a href="#Bar-Plot" class="headerlink" title="Bar Plot"></a>Bar Plot</h3><p>条形图可以帮助分类变量的可视化。 </p><pre><code class="python">#绘制条形图abssb.countplot(x = &#39;Type 1&#39;, data = df, palette = pkmn_type_colors)#倾斜x轴的标签plt.xticks(rotation = -45)</code></pre><pre><code>(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14]), &lt;a list of 15 Text xticklabel objects&gt;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_42_1.png" alt="png"></p><h3 id="Factor-plots"><a href="#Factor-plots" class="headerlink" title="Factor plots"></a>Factor plots</h3><p>Factor plots能够根据类别分离图表。 </p><pre><code class="python">#分离图表g = sb.factorplot(x = &#39;Type 1&#39;,                  y = &#39;Attack&#39;,                  data = df,                  hue = &#39;Stage&#39;,  #用不同的颜色表示Stage                  col = &#39;Stage&#39;,  #根据Stage来分离图表                  kind = &#39;swarm&#39;, #创建群集图                 )#倾斜x轴的标签plt.xticks(rotation = -45)</code></pre><pre><code>D:\Function\Anaconda3\lib\site-packages\seaborn\categorical.py:3666: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`&#39;point&#39;`) has changed `&#39;strip&#39;` in `catplot`.  warnings.warn(msg)(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14]), &lt;a list of 15 Text xticklabel objects&gt;)</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_44_2.png" alt="png"></p><p>可以得到根据Stage分离的三个图表，分别用不同颜色的点表示不同的Pokemon。 </p><h3 id="Density-Plot"><a href="#Density-Plot" class="headerlink" title="Density Plot"></a>Density Plot</h3><p>密度图显示的是两个变量之间的分布。<br>曲线越密集的地方说明两个变量的关系越近，越稀疏的地方说明关系越远。 </p><pre><code class="python">#创建密度图sb.kdeplot(df.Attack, df.Defense)</code></pre><pre><code>D:\Function\Anaconda3\lib\site-packages\scipy\stats\stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval&lt;matplotlib.axes._subplots.AxesSubplot at 0x2ea9a8d6f60&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_47_2.png" alt="png"></p><h3 id="Joint-Distribution-Plot"><a href="#Joint-Distribution-Plot" class="headerlink" title="Joint Distribution Plot"></a>Joint Distribution Plot</h3><p>联合分布图将散点图和直方图的信息结合起来，提供双变量分布的详细信息。 </p><pre><code class="python">#创建联合分布图sb.jointplot(x = &#39;Attack&#39;, y = &#39;Defense&#39;, data = df)</code></pre><pre><code>&lt;seaborn.axisgrid.JointGrid at 0x2ea9ab74da0&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/seaborn/output_49_1.png" alt="png"></p><p>这里只是介绍了Seaborn常用的绘图功能，还有更强大的功能<a href="http://seaborn.pydata.org/examples/anscombes_quartet.html" target="_blank" rel="noopener">Example gallery</a>需要我们去学习，去探索。</p><pre><code class="python"></code></pre>]]></content>
      
      
      <categories>
          
          <category> 可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python可视化 </tag>
            
            <tag> seaborn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL学习日记（二）</title>
      <link href="//post/Experience/sqlShell-2/"/>
      <url>//post/Experience/sqlShell-2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="http://www.raincent.com/uploadfile/2015/1206/20151206103021361.jpg" alt=""></p><a id="more"></a><h2 id="章节导航"><a href="#章节导航" class="headerlink" title="章节导航"></a>章节导航</h2><hr><ol><li>SQL语句的多表查询方式</li><li>创建和管理DLL</li><li>数据处理 DML</li><li>约束</li></ol><h2 id="SQL语句的多表查询方式"><a href="#SQL语句的多表查询方式" class="headerlink" title="SQL语句的多表查询方式"></a>SQL语句的多表查询方式</h2><p>例如：按照 department_id 查询 employees(员工表)和 departments(部门表)的信息。</p><ul><li>方式一( 通用型):<pre><code>SELECT ... FROM ... WHERE</code></pre></li></ul><pre><code>SELECT e.last_name, e.department_id, d.department_nameFROM employees e, departments dWHERE e.`department_id` = d.`department_id`;</code></pre><ul><li>方式二：<pre><code>SELECT ... FROM ... NATURAL JOIN ...</code></pre>有局限性：会自动连接两个表中相同的列(可能有多个:department_id 和manager_id)</li></ul><pre><code>SELECT last_name,department_id,department_nameFROM employeesNATURAL JOIN departments</code></pre><p>方式三：</p><pre><code>SELECT ... JOIN ... USING ...</code></pre><p>有局限性：好于方式二，但若多表的连接列列名不同，此法不合适</p><pre><code>SELECT last_name,department_id,department_nameFROM employeesJOIN departmentsUSING(department_id)</code></pre><p>方式四：</p><pre><code>SELECT ... FROM ... JOIN ... ON ...</code></pre><p>常用方式，较方式一，更易实现外联接(左、右、满)</p><pre><code>SELECT last_name,e.department_id,department_nameFROM employees eJOIN departments dON e.department_id = d.department_id</code></pre><ol><li>内连接<ol><li></li></ol> –等值连接<br> –不等值连接<ol start="2"><li></li></ol> –非自连接<br> –自连接</li><li>外连接<br> –左外连接、右外连接、满外连接</li></ol><h2 id="创建和管理DLL"><a href="#创建和管理DLL" class="headerlink" title="创建和管理DLL"></a>创建和管理DLL</h2><p>  CRAETE TABLE /TRUNCATE TABLE /ALTER TABLE /REANME…TO/DROP TABLE ..操<br>作完以后，自动 commit;所以，rollback 对其操作，没有效果</p><ol><li><p>创建表</p><ol><li>直接创建<pre><code>create table emp1(name varchar2(20),salary number(8,2)default 1000,id number(4),hire_date date);</code></pre></li><li>通过子查询的方式创建<pre><code>create table emp2asselect last_name name,employee_id id,hire_datefrom employees;</code></pre>或者<pre><code>create table emp2asselect last_name name,employee_id id,hire_datefrom employeeswhere department_id = 80;/where 1=2;</code></pre></li></ol></li><li><p>修改表</p><ol><li>增加新的列<pre><code>alter table emp1add(birthday date)</code></pre></li><li>修改现有的列<pre><code>alter table emp1modify(name varchar2(25) default &#39;abc&#39;)</code></pre></li><li>重命名现有的列<pre><code>alter table emp1rename column salary to sal;</code></pre></li><li>删除现有的列<pre><code>alter table emp1drop column birthday;</code></pre></li></ol></li><li><p>清空表中的数据(与 与 delete from table_name </p><pre><code>truncate table emp2;</code></pre></li><li><p>重命名表</p><pre><code>rename emp2 to emp3;</code></pre></li><li><p>删除表</p><pre><code>drop table emp3;</code></pre><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2></li><li><p>增</p><ol><li>增添一条记录<pre><code>insert into [表名](,,,,,)values(,,,,,)</code></pre></li><li>从其它表中拷贝数据<pre><code>insert into [表名]select .... from [另一个表]where ....</code></pre></li></ol></li><li><p>改</p><pre><code>update [表名]set .....where ....</code></pre></li><li><p>删</p><pre><code>delete from [表名]where ....</code></pre></li><li><p>查(最常用的数据库操作)</p><pre><code>select ....from …where ….group by …having …order by ….</code></pre><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>对创建的表的列属性、字段进行的限制。诸如:not null/unique/primary<br>key/foreign key/check</p></li><li><p>如何定义约束— 在创建表的同时，添加对应属性的约束</p><ol><li><p>表级约束 &amp; 列级约束</p><pre><code>create table emp1( employee_id number(8), salary number(8), -- 列级约束 hire_date date not null, dept_id number(8), email varchar2(8) constraint emp1_email_uk unique, name varchar2(8) constaint emp1_name_uu not null, first_name varchar2(8), -- 表级约束     constraint emp1_emp_id_pk primary key(employee_id), constraint emp1_fir_name_uk unique(first_name), constraint  emp1_dept_id_fk  foreign  key(dept_id)  references departments(department_id) ON DELETE CASCADE)</code></pre></li><li><p>只有 not null 时只能使用列级约束，其他的约束两种方式皆可    </p></li></ol></li><li><p>添加和删除表的约束– 在创建表以后，只能添加和删除，不能修改</p><ol><li>添加<pre><code>alter table emp1add constaint emp1_sal_ck check(salary &gt; 0)</code></pre><ol><li>对于 not null 来说，不用 add ，需要 modify ：<pre><code>alter table emp1modify (salary not null)</code></pre></li></ol></li><li>删除<pre><code>alter table emp1drop constaint emp1_sal_ck</code></pre></li><li>使某一个约束失效：此约束还存在于表中，只是不起作用<pre><code>alter table emp1disable constraint emp1_email_uk;</code></pre></li><li>使某一个约束激活：激活以后，此约束具有约束力<pre><code>alter table emp1enable constraint emp1_email_uk;</code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL学习日记（一）</title>
      <link href="//post/Experience/sqlShell-1/"/>
      <url>//post/Experience/sqlShell-1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="http://www.raincent.com/uploadfile/2015/1206/20151206103021361.jpg" alt=""></p><a id="more"></a><h2 id="数据库的好处"><a href="#数据库的好处" class="headerlink" title="数据库的好处"></a>数据库的好处</h2><pre><code>1.持久化数据到本地2.可以实现结构化查询，方便管理</code></pre><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><p>1、DB：数据库，保存一组有组织的数据的容器<br>2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据<br>3、SQL:结构化查询语言，用于和DBMS通信的语言</p><h2 id="数据库存储数据的特点"><a href="#数据库存储数据的特点" class="headerlink" title="数据库存储数据的特点"></a>数据库存储数据的特点</h2><p>1、将数据放到表中，表再放到库中<br>2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。<br>3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。<br>4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”<br>5、表中的数据是按行存储的，每一行类似于java中的“对象”。</p><h2 id="MySQL服务的启动和停止"><a href="#MySQL服务的启动和停止" class="headerlink" title="MySQL服务的启动和停止"></a>MySQL服务的启动和停止</h2><p>方式一：计算机——右击管理——服务<br>方式二：通过管理员身份运行</p><pre><code>net start 服务名（启动服务）net stop 服务名（停止服务）</code></pre><h2 id="MySQL服务的登录和退出"><a href="#MySQL服务的登录和退出" class="headerlink" title="MySQL服务的登录和退出"></a>MySQL服务的登录和退出</h2><p>方式一：通过mysql自带的客户端<br>只限于root用户</p><p>方式二：通过windows自带的客户端<br>登录：</p><pre><code>mysql 【-h主机名 -P端口号 】-u用户名 -p密码</code></pre><p>退出：<br>exit或ctrl+C</p><h2 id="MySQL的常见命令"><a href="#MySQL的常见命令" class="headerlink" title="MySQL的常见命令"></a>MySQL的常见命令</h2><p>1.查看当前所有的数据库</p><pre><code>show databases;</code></pre><p>2.打开指定的库</p><pre><code>use 库名</code></pre><p>3.查看当前库的所有表</p><pre><code>show tables;</code></pre><p>4.查看其它库的所有表</p><pre><code>show tables from 库名;</code></pre><p>5.创建表</p><pre><code>create table 表名(    列名 列类型,    列名 列类型，    。。。);</code></pre><p>6.查看表结构</p><pre><code>desc 表名;</code></pre><p>7.查看服务器的版本<br>方式一：登录到mysql服务端</p><pre><code>select version();</code></pre><p>方式二：没有登录到mysql服务端</p><pre><code>mysql --version或mysql --V</code></pre><h2 id="MySQL的语法规范"><a href="#MySQL的语法规范" class="headerlink" title="MySQL的语法规范"></a>MySQL的语法规范</h2><p>1.不区分大小写,但建议关键字大写，表名、列名小写<br>2.每条命令最好用分号结尾<br>3.每条命令根据需要，可以进行缩进 或换行<br>4.注释<br>   单行注释：#注释文字<br>   单行注释：– 注释文字<br>   多行注释：/* 注释文字  */</p><h2 id="SQL的语言分类"><a href="#SQL的语言分类" class="headerlink" title="SQL的语言分类"></a>SQL的语言分类</h2><p>DQL（Data Query Language）：数据查询语言<br>    select<br>DML(Data Manipulate Language):数据操作语言<br>    insert 、update、delete<br>DDL（Data Define Languge）：数据定义语言<br>    create、drop、alter<br>TCL（Transaction Control Language）：事务控制语言<br>    commit、rollback</p><h2 id="SQL的常见命令"><a href="#SQL的常见命令" class="headerlink" title="SQL的常见命令"></a>SQL的常见命令</h2><pre><code>show databases； 查看所有的数据库use 库名； 打开指定 的库show tables ; 显示库中的所有表show tables from 库名;显示指定库中的所有表create table 表名(    字段名 字段类型,        字段名 字段类型); 创建表desc 表名; 查看指定表的结构select * from 表名;显示表中的所有数据</code></pre><h2 id="SQL实例"><a href="#SQL实例" class="headerlink" title="SQL实例"></a>SQL实例</h2><pre><code>-- select department_name from departments-- select * from departments where department_name = &#39;Con&#39;-- select * from departments where department_name = &#39;Con&#39; or location_id = 1700-- select distinct location_id from departments;-- select department_id from departments where location_id in (1700)    -- select department_id from departments where department_name like &#39;%Con%&#39;-- select count(depart) from departments;-- insert into departments(department_id, department_name, manager_id, location_id) values(290, &#39;Xrh&#39;, 117, 1100)-- update departments set manager_id = 512 where department_name = &#39;Gov&#39;-- DELETE from departments where department_id = 290;-- CREATE table person(--     username varchar(10),--     usergender varchar(6),--     userage int(4),--     primary key(username)-- );-- drop table person;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows环境下搭建spark开发环境(IDEA)</title>
      <link href="//post/Experience/SparkEnvBulid/"/>
      <url>//post/Experience/SparkEnvBulid/</url>
      
        <content type="html"><![CDATA[<p>“大数据”（Big Data）指一般的软件工具难以捕捉、管理和分析的大容量数据。“大数据”之“大”，并不仅仅在于“容量之大”，更大的意义在于：通过对海量数据的交换、整合和分析，发现新的知识，创造新的价值，带来“大知识”、“大科技”、“大利润”和“大发展”。“大数据”能帮助企业找到一个个难题的答案，给企业带来前所未有的商业价值与机会。大数据同时也给企业的IT系统提出了巨大的挑战。通过不同行业的“大数据”应用状况，我们能够看到企业如何使用大数据和云计算技术，解决他们的难题，灵活、快速、高效地响应瞬息万变的市场需求。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>本文重点介绍在如何Windows 10下开发spark应用程序的依赖环境的搭建。</p><h1 id="本章概要"><a href="#本章概要" class="headerlink" title="本章概要"></a>本章概要</h1><hr><ol><li>版本说明</li><li>环境配置<ul><li>jdk配置</li><li>scala安装配置</li><li>spark安装配置</li><li>hadoop安装配置</li><li>Intellij IDEA下载与配置</li></ul></li></ol><h1 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h1><hr><ol><li>jdk:1.8</li><li>scala:2.12.0</li><li>spark:2.4.3</li><li>hadoop:2.7.7</li></ol><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><hr><h2 id="jdk配置"><a href="#jdk配置" class="headerlink" title="jdk配置"></a>jdk配置</h2><ol><li>下载：登录<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Oracle官网</a>，接受协议，注册登录，选择对应版本。因为我的本机是64位Windows，所以需要下载64位（Windows x64）JDK安装包。 <center><fancybox>![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/jdkdownload.png)</fancybox></center></li><li>Windows下安装JDK非常方便，双击安装程序后，直接单击下一步即可，默认安装到<code>C:\Program Files\Java</code>目录下。其间会安装JRE，默认一下步即可。</li><li>设置环境变量 :右键单击桌面上的“此电脑”图标，在弹出的右键快捷菜单中选择最后一个“属性”选项；在弹出的系统窗口中，单击左侧“高级系统设置”选项，弹出“系统属性”对话框，如下图。 <center><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/jdkpath.png" alt="">)</fancybox></center>然后单击中间的“高级”选项卡，再单击下方的“环境变量(N)…”按钮。在弹出的环境变量对话框中，首先单击下方的“新建（W）…”按钮，然后在弹出的新建环境变量中输入对应的值。 <center><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/jdkpath1.png" alt="">)</fancybox></center>在环境变量中找到“Path”添加jdk和jre下bin的地址，如下图：<center><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/jdkpath2.png" alt="">)</fancybox></center>新建<code>CLASS_PATH</code>，如下图：<center><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/jdkpath3.png" alt=""></fancybox></center>检验配置是否成功，在cmd中运行java -version出现以下结果则说明jdk安装配置成功。<center><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/jdkpath4.png" alt=""></fancybox></center></li></ol><h2 id="scala安装配置"><a href="#scala安装配置" class="headerlink" title="scala安装配置"></a>scala安装配置</h2><ol><li>下载：通过<a href="http://spark.apache.org/downloads.html" target="_blank" rel="noopener">Spark官网下载</a>页面 可知“Note: Starting version 2.0, Spark is built with Scala 2.11 by default.”，下载Spark2.4.3对应的 <code>Scala 2.12.x</code>。登录<a href="http://www.scala-lang.org/" target="_blank" rel="noopener">Scala官网</a>，单击download按钮，然后再“Other Releases”标题下找到“Last 2.12.x maintenance release - Scala 2.12.0”链接。进入<a href="http://www.scala-lang.org/download/2.12.0.html" target="_blank" rel="noopener">downloan</a>页面，下拉找到如下图内容，下载msi格式的安装包即可。<center><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/scaladownload.png" alt=""></fancybox></center></li><li>安装: 默认安装到<code>C:\Program Files (x86)\scala</code>目录下<center><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/sparkinstall.png" alt=""></fancybox></center></li><li>环境变量：与设置Java环境变量类型， <code>SCALA_HOME=C:\Program Files (x86)\scala</code> <code>Path</code>环境变量在最后追加;设置成功后在<code>win+R</code>输入<code>cmd</code>后打开命令行输入<code>scala -version</code>可以看到安装的版本<code>%SCALA_HOME%\bin</code>；<center><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/scalainstalled.png" alt=""></fancybox></center></li></ol><h2 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h2><ol><li>Maven的安装与配置可以参考：《<a href="https://blog.csdn.net/chengyuqiang/article/details/72082149" target="_blank" rel="noopener">Hadoop基础教程-第4章 HDFS的Java API（4.1 Maven入门）</a>》<code>Intellij IDEA</code>上自带Maven，本文不再详细介绍<h2 id="Intellij-IDEA下载与配置"><a href="#Intellij-IDEA下载与配置" class="headerlink" title="Intellij IDEA下载与配置"></a>Intellij IDEA下载与配置</h2></li><li>下载与安装：登录<a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">官网</a>，按照自己的需求下载（<code>ultimate</code>，旗舰版）或者（<code>Community</code>，社区版）。<code>Ultimate</code>版本是商业软件，需要付费，<code>Community</code> 版为免费版，足够平时日常开发需要。比如这里直接下载<code>Community</code><center><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/Intellij%20IDEA.png" alt=""></fancybox></center></li><li>启动，安装完成后，单击<code>IntelliJ IDEA</code>图标即可启动<code>IntelliJ IDEA</code>. 由于是第一次安装，所以不需要导入配置。默认选项即可。<center><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/ideaconfig.png" alt=""></fancybox></center></li><li>选择“Evaluate for free”进入免费版<center><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea3.png" alt=""></fancybox></center>可以根据自身的习惯选择风格，并点击左下角“<code>Skip Remaining and Set Default”</code><center><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/Idea4.png" alt=""></fancybox></center></li><li>安装<code>scala</code>插件：点击左下角：<code>Configure-&gt;Plugins</code> 搜索并安装scala<center><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea5.png" alt="">)</fancybox></center><center><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea6.png" alt=""></fancybox></center>安装完成后重启IDEA，然后开始配置全局scala SDK<fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea7.png" alt=""></fancybox></center></li><li>配置JDK： 首先打开<code>Project Structure</code>，如下图然后我们添加上文安装的JDK，配置完成后点击OK，如下图：<fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea8.png" alt=""></fancybox></center></li><li>配置JDK 配置全局scala SDK：选中“<code>Global Libraries</code>”，点击“+”号，在弹出的菜单中选中“Scala SDK”，如下图：<fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea9.png" alt=""></fancybox></center>在弹出的“<code>Select JAR&#39;s for the new Scala SDK</code>”中选择与本机scala版本一致的Version，在这里由于我的scala版本是2.12.0 所以我选择的是2.12.0版本<fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea10.png" alt=""></fancybox></center>点击右下角OK完成配置<h2 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h2></li><li>单击“<code>Create New Project</code>”<fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea11.png" alt="">)</fancybox></center>选择maven<fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea12.png" alt="">)</fancybox></center>点击<code>Next</code>，填写<code>GroupID</code>和<code>ArtifactID</code><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea13.png" alt="">)</fancybox></center>点击Next，如下图：<fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea14.png" alt=""></fancybox></center>点击Finish，如下图：(在此步骤可以更改Content root 和 Module file location 的路径)<fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea15.png" alt="">)</fancybox></center>创建完后右下角如果出现提示：<fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea16.png" alt=""></fancybox></center>请点击<code>Enable Auto-Import</code></li><li>创建完后将scala框架添加到项目(若不设置有可能无法创建 scala class)：在IDEA启动后进入的界面中，可以看到界面左侧的项目界面，已经有一个名称为simpleSpark的工程。请在该工程名称上右键单击，在弹出的菜单中，选择<code>Add Framework Surport</code>，在左侧有一排可勾选项，找到scala，勾选即可</fancybox></center>（我的这里没有找到，但是也能运行，为了确保无误，借用<a href="https://blog.csdn.net/haijiege/article/details/80775792" target="_blank" rel="noopener">haijiege</a>的图）<fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea17.png" alt=""></li><li>将项目文件设置为source root ，选中scala–&gt;右键<code>快捷菜单</code>–&gt;<code>Mark Directory as</code> –&gt;<code>Sources root</code><fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea18.png" alt=""></fancybox></center>    </li></ol><h2 id="编辑代码"><a href="#编辑代码" class="headerlink" title="编辑代码"></a>编辑代码</h2><ol><li>pom.xml<br>Spark2.4.3 Maven库请参见 <a href="https://mvnrepository.com/artifact/org.apache.spark/spark-core_2.12/2.4.3" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.apache.spark/spark-core_2.12/2.4.3</a></li></ol><pre><code>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;Test.pack&lt;/groupId&gt;    &lt;artifactId&gt;SparkTest&lt;/artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;packaging&gt;jar&lt;/packaging&gt;    &lt;inceptionYear&gt;2008&lt;/inceptionYear&gt;    &lt;properties&gt;        &lt;spark.version&gt;2.4.3&lt;/spark.version&gt;        &lt;scala.version&gt;2.12.0&lt;/scala.version&gt;    &lt;/properties&gt;    &lt;repositories&gt;        &lt;repository&gt;            &lt;id&gt;nexus-aliyun&lt;/id&gt;            &lt;name&gt;Nexus aliyun&lt;/name&gt;            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;        &lt;/repository&gt;    &lt;/repositories&gt;    &lt;pluginRepositories&gt;        &lt;pluginRepository&gt;            &lt;id&gt;scala-tools.org&lt;/id&gt;            &lt;name&gt;Scala-Tools Maven2 Repository&lt;/name&gt;            &lt;url&gt;http://scala-tools.org/repo-releases&lt;/url&gt;        &lt;/pluginRepository&gt;    &lt;/pluginRepositories&gt;    &lt;dependencies&gt;        &lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-core --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;            &lt;artifactId&gt;spark-core_2.12&lt;/artifactId&gt;            &lt;version&gt;2.4.3&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;junit&lt;/groupId&gt;            &lt;artifactId&gt;junit&lt;/artifactId&gt;            &lt;version&gt;4.4&lt;/version&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.specs&lt;/groupId&gt;            &lt;artifactId&gt;specs&lt;/artifactId&gt;            &lt;version&gt;1.2.5&lt;/version&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;                &lt;version&gt;2.2-beta-5&lt;/version&gt;                &lt;configuration&gt;                    &lt;classifier&gt;dist&lt;/classifier&gt;                    &lt;appendAssemblyId&gt;true&lt;/appendAssemblyId&gt;                    &lt;descriptorRefs&gt;                        &lt;descriptor&gt;jar-with-dependencies&lt;/descriptor&gt;                    &lt;/descriptorRefs&gt;                &lt;/configuration&gt;                &lt;executions&gt;                    &lt;execution&gt;                        &lt;id&gt;make-assembly&lt;/id&gt;                        &lt;phase&gt;package&lt;/phase&gt;                        &lt;goals&gt;                            &lt;goal&gt;single&lt;/goal&gt;                        &lt;/goals&gt;                    &lt;/execution&gt;                &lt;/executions&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;&lt;/project&gt;</code></pre><ol><li><p>保存pom.xml文件后，如果Intellij IDEA右下角出现如下提示，请单击“<code>Enable Auto-Import</code>” <fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea16.png" alt=""></fancybox></center></p></li><li><p>WordCount.scala :新建<code>Scala Class</code>类<code>WordCount.scala</code>，Scala源文件后缀名是.scala。通过右键刚刚设置为<code>sources root</code>的scala文件夹，就有了<code>new</code>-&gt;<code>scala class</code>的选项。新建一个<code>scala class</code>，并且命名<code>WordCount</code>，选择object类型。打开建好的<code>WordCount.scala</code>文件，清空！然后黏贴以下代码：</p></li></ol><h1 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h1><hr><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h3><p><a href="http://fff" target="_blank" rel="noopener">sampleDataSet</a></p><h3 id="程序文件"><a href="#程序文件" class="headerlink" title="程序文件"></a>程序文件</h3><p><a href="http://fff" target="_blank" rel="noopener">WordCount</a></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在源文件代码中右键单击–&gt;Run “<code>WordCount</code>”<fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea19.png" alt=""></fancybox></center></p><p>运行结果如下（输出的信息较多请上下翻一下就能找到）<fancybox><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/spark-init/idea20.png" alt=""></fancybox></center></p>]]></content>
      
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件合集（持续更新中ing……）</title>
      <link href="//post/Activity/exe/"/>
      <url>//post/Activity/exe/</url>
      
        <content type="html"><![CDATA[<p>各种软件资源，这里统统都有！</p><a id="more"></a><h1 id="一、Adobe全家桶"><a href="#一、Adobe全家桶" class="headerlink" title="一、Adobe全家桶"></a>一、Adobe全家桶</h1><p>1、Photoshop cc 2018<br>    <fancybox><br>    <img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/PS.jpg" alt=""><br>    </fancybox><br>    链接: <a href="https://pan.baidu.com/s/1S08r_Q-xkgYZTyfhqj91ww" target="_blank" rel="noopener">https://pan.baidu.com/s/1S08r_Q-xkgYZTyfhqj91ww</a> 提取码: aim2</p><p>2、Premiere Pro cc 2017<br>    <fancybox><br>    <img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/PR.jpg" alt=""><br>    </fancybox><br>    链接: <a href="https://pan.baidu.com/s/1vhFAEGwlaf8dS_xSX4BXxA" target="_blank" rel="noopener">https://pan.baidu.com/s/1vhFAEGwlaf8dS_xSX4BXxA</a> 提取码: uxmy</p><p>3、Illustrator CC 2018<br>    <fancybox><br>    <img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/AI.jpg" alt=""><br>    </fancybox><br>    链接: <a href="https://pan.baidu.com/s/1nxUtGFpqeQtw61_yVExhSA" target="_blank" rel="noopener">https://pan.baidu.com/s/1nxUtGFpqeQtw61_yVExhSA</a> 提取码: 9pgx</p><p>4、Adobe Effects CC 2018<br>    <fancybox><br>    <img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/AE.jpg" alt=""><br>    </fancybox><br>    链接: <a href="https://pan.baidu.com/s/1SwcSkVP_yKzvZGZ3OTF-dA提取码" target="_blank" rel="noopener">https://pan.baidu.com/s/1SwcSkVP_yKzvZGZ3OTF-dA提取码</a>: 626s</p><p>5、Dreamweaver<br>    <fancybox><br>    <img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/DR.jpg" alt=""><br>    </fancybox><br>    链接: <a href="https://pan.baidu.com/s/1csLtkNUSiOC2kOXTEtIm1Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1csLtkNUSiOC2kOXTEtIm1Q</a> 提取码: t56s</p><p>6、Adobe破解软件<br>    链接: <a href="https://pan.baidu.com/s/1ZVQiBzcMf0M_0smakdSsUg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ZVQiBzcMf0M_0smakdSsUg</a> 提取码: frjc</p><h1 id="二、office全家桶"><a href="#二、office全家桶" class="headerlink" title="二、office全家桶"></a>二、office全家桶</h1><p>1、Office 2010-专业增强版-个体零售版-64 位和 32 位-中文简体<br>    <fancybox><br>    <img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/OFFICE2010.jpg" alt=""><br>    </fancybox><br>    链接: <a href="https://pan.baidu.com/s/1D5tdwbKwRofmUz1UDozwDQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1D5tdwbKwRofmUz1UDozwDQ</a> 提取码: w3ai</p><p>2、Office 2013-专业增强版-个体零售版-64 位和 32 位-中文简体<br>    <fancybox><br>    <img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/OFFICE2013.jpg" alt=""><br>    </fancybox><br>    链接: <a href="https://pan.baidu.com/s/1oTmgGpTGvyjL8hn0v6mpnA" target="_blank" rel="noopener">https://pan.baidu.com/s/1oTmgGpTGvyjL8hn0v6mpnA</a> 提取码: daur</p><p>3、Office 2016-专业增强版-个体零售版-64 位和 32 位-中文简体<br>    <fancybox><br>    <img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/OFFICE2016.jpg" alt=""><br>    </fancybox><br>    链接: <a href="https://pan.baidu.com/s/1SZh_z4zubo_4UjfsXk7BLw" target="_blank" rel="noopener">https://pan.baidu.com/s/1SZh_z4zubo_4UjfsXk7BLw</a> 提取码: uny3</p><p>4、Office 2019<br>    <fancybox><br>    ![]<a href="https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/OFFICE2019.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/OFFICE2019.jpg</a>)<br>    </fancybox><br>    链接: <a href="https://pan.baidu.com/s/1bTNJ5ONrceqmFvx6lT4O0Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1bTNJ5ONrceqmFvx6lT4O0Q</a> 提取码: 3yqs</p><h1 id="三、IDE"><a href="#三、IDE" class="headerlink" title="三、IDE"></a>三、IDE</h1><h2 id="1、C-amp-C-IDE"><a href="#1、C-amp-C-IDE" class="headerlink" title="1、C&amp;C++ IDE:"></a>1、C&amp;C++ IDE:</h2><h3 id="①-C-Free"><a href="#①-C-Free" class="headerlink" title="① C-Free"></a>① C-Free</h3><pre><code>    &lt;fancybox&gt;    ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/CFREE.jpg)    &lt;/fancybox&gt;    链接: https://pan.baidu.com/s/1GBcivRrNHEYEOtsBaEjGqA 提取码: 5b2e</code></pre><h3 id="②-vc6-0-兼容win10"><a href="#②-vc6-0-兼容win10" class="headerlink" title="② vc6.0(兼容win10)"></a>② vc6.0(兼容win10)</h3><pre><code>    &lt;fancybox&gt;    ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/VC6.0.jpg)    &lt;/fancybox&gt;     链接: https://pan.baidu.com/s/1ng-HgcVprOtX5P4M5h7WUw 提取码: 8sqs</code></pre><h3 id="③-codeblocks-ACM推荐IDE"><a href="#③-codeblocks-ACM推荐IDE" class="headerlink" title="③ codeblocks(ACM推荐IDE)"></a>③ codeblocks(ACM推荐IDE)</h3><pre><code>&lt;fancybox&gt;![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/CB.jpg)&lt;/fancybox&gt;链接: https://pan.baidu.com/s/1ya1Ly7qKI-O4DiNStAsHzQ 提取码: 9425</code></pre><h3 id="④-Dev-C-（蓝桥杯官方指定IDE）"><a href="#④-Dev-C-（蓝桥杯官方指定IDE）" class="headerlink" title="④ Dev C++（蓝桥杯官方指定IDE）"></a>④ Dev C++（蓝桥杯官方指定IDE）</h3><pre><code>    &lt;fancybox&gt;    ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/DEVC++.jpg)    &lt;/fancybox&gt;    链接: https://pan.baidu.com/s/1ydxrV5WLR505tNknK8YfcQ 提取码: fjvz </code></pre><h3 id="⑤-eclipse-cpp版"><a href="#⑤-eclipse-cpp版" class="headerlink" title="⑤ eclipse cpp版"></a>⑤ eclipse cpp版</h3><pre><code>    &lt;fancybox&gt;    ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/ECLIPSE.jpg)    &lt;/fancybox&gt;    链接: https://pan.baidu.com/s/1HUZ8w2Jci6g88gVIs6iWNQ 提取码: q7ig</code></pre><h2 id="2、Java-IDE"><a href="#2、Java-IDE" class="headerlink" title="2、Java IDE"></a>2、Java IDE</h2><h3 id="①-IDEA"><a href="#①-IDEA" class="headerlink" title="① IDEA"></a>① IDEA</h3><pre><code>    &lt;fancybox&gt;    ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/IDEA.jpg)    &lt;/fancybox&gt;     链接: https://pan.baidu.com/s/1bT41wqMWATNO4si1hbKS1g 提取码: ptmp</code></pre><h3 id="②-Eclipse"><a href="#②-Eclipse" class="headerlink" title="② Eclipse"></a>② Eclipse</h3><pre><code>    &lt;fancybox&gt;    ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/ECLIPSEJAVA.jpg    )    &lt;/fancybox&gt;     链接: https://pan.baidu.com/s/1CPdHdYLBkdYcF8PPN463mA 提取码: ksyh</code></pre><h3 id="③-MyEclipse"><a href="#③-MyEclipse" class="headerlink" title="③ MyEclipse"></a>③ MyEclipse</h3><pre><code>    &lt;fancybox&gt;    ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/MYECLIPSE.jpg)    &lt;/fancybox&gt;    链接: https://pan.baidu.com/s/1ZhwAtmklLJGVoVzdPMH_mg 提取码: 8dph</code></pre><h2 id="3、Python-IDE"><a href="#3、Python-IDE" class="headerlink" title="3、Python IDE"></a>3、Python IDE</h2><h3 id="①-pycharm-professional"><a href="#①-pycharm-professional" class="headerlink" title="① pycharm-professional"></a>① pycharm-professional</h3><pre><code>    &lt;fancybox&gt;    ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/PYCHARM.jpg)    &lt;/fancybox&gt;    链接: https://pan.baidu.com/s/1O9W_qlMkch5H2hJKDaFwDg 提取码: c67v</code></pre><h3 id="②-Anaconda3"><a href="#②-Anaconda3" class="headerlink" title="② Anaconda3"></a>② Anaconda3</h3><pre><code>    &lt;fancybox&gt;    ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/ANACONDA.jpg)    &lt;/fancybox&gt;    链接: https://pan.baidu.com/s/1v85y2SFWlbBd-UqlQQjI_A 提取码: aa9e</code></pre><h2 id="4、Hbuilder"><a href="#4、Hbuilder" class="headerlink" title="4、Hbuilder"></a>4、Hbuilder</h2><pre><code>    &lt;fancybox&gt;    ![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/HBUILDER.jpg)    &lt;/fancybox&gt;链接: https://pan.baidu.com/s/1IzTeJoP8eTkOJRWf5KnVFw 提取码: e4yn</code></pre><h1 id="四、思维导图XMind"><a href="#四、思维导图XMind" class="headerlink" title="四、思维导图XMind"></a>四、思维导图XMind</h1><pre><code>&lt;fancybox&gt;![](https://cdn.jsdelivr.net/gh/InfiniteYinux/cloud@2.45/img/software/XMIND.jpg)&lt;/fancybox&gt;链接:https://pan.baidu.com/s/1VawY6QZtJA6vNwVnBDy5hg 提取码: h4ay</code></pre><h1 id="五、百度网盘不限速"><a href="#五、百度网盘不限速" class="headerlink" title="五、百度网盘不限速"></a>五、百度网盘不限速</h1><pre><code>链接: https://pan.baidu.com/s/1gVUx0UfogSfE6Fc45vs-xw 提取码: z6hx</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 软件资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Stranger</title>
      <link href="//post/hello_world/"/>
      <url>//post/hello_world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://www.codingpy.cn" target="_blank" rel="noopener">Yinxu’s Blog</a>! This is your very first post. Check <a href="https://xaoxuu.com/wiki/" target="_blank" rel="noopener">documentation</a> for more info. </p><a id="more"></a><center><h1>Hi,it's Yinux's Blog.Nice to meet you!</h1><img src="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@3.0.8/images/bitmap.gif" data-original="https://cdn.jsdelivr.net/gh/InfiniteYinux/assets@master/biaoqing/paopao/E5A4AAE5BC80E5BF83_2x.png" /></center>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
